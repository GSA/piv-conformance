-- TestSteps are what we've been referring to as atoms
CREATE TABLE IF NOT EXISTS "TestSteps" (
	`Id`	INTEGER PRIMARY KEY AUTOINCREMENT,
	`Description`	TEXT, -- column 2 on each tab
        `Class`         TEXT, -- fully qualified class name
        `Method`        TEXT, -- method to invoke for the atom
	`NumParameters`	INTEGER -- parameter count. not really necessary but was briefly helpful, so it's still here
);

-- Map test cases to their atoms
CREATE TABLE IF NOT EXISTS "TestsToSteps" (
	`Id`	INTEGER PRIMARY KEY AUTOINCREMENT,
	`TestStepId`	INTEGER, --Foreign key TestSteps.Id
	`TestId`	INTEGER, --Foreign key TestCases.Id
        `ExecutionOrder`         INTEGER, --Sequence of atoms for a test case
        `Status`        INTEGER -- runners can populate with status info to see which step failed
);

-- used to pass parameters to atoms
CREATE TABLE IF NOT EXISTS "TestStepParameters" (
	`Id`	INTEGER PRIMARY KEY AUTOINCREMENT,
	`TestStepId`	INTEGER, --TestSteps.Id
	`TestId`	INTEGER, --TestCases.Id
        `Value`         TEXT, --Parameter Value
        `ParamOrder`    TEXT --Parameter order... idea here was one row for each pattern to be passed into a particular invocation of an atom.
        --If we settle on a string of key=value for the Value field, this could be OBE
);

-- TestCases is the primary driver of the test runner
CREATE TABLE IF NOT EXISTS "TestCases" (
	`Id`	INTEGER PRIMARY KEY AUTOINCREMENT,
        `TestGroup`         TEXT, -- can be filled in to allow selective execution by the runner. not in spreadsheet
	`TestCaseIdentifier`	TEXT, -- section column on step overview tab
        `TestCaseDescription`   TEXT, -- description column on step overview tab
        `TestCaseContainer` TEXT, -- ID of the container the test case applies to, if necessary
        `Status`        INTEGER, -- to be populated by runner
        `ExpectedStatus` INTEGER, -- everything on the spreadsheet should get 1 here - primarily present to give runners a way to mark tests that should fail
        `Enabled`   INTEGER -- allows the runner to enable/disable test cases. default to 1
);

-- Allow runners to create test groups. not in spreadsheet
CREATE TABLE IF NOT EXISTS "TestGroups" (
	`Id`	INTEGER PRIMARY KEY AUTOINCREMENT,
        `GroupDescription`   TEXT
);

-- Allow runners to create test groups. not in spreadsheet
CREATE TABLE IF NOT EXISTS "GroupsToTestCases" (
	`Id`	INTEGER PRIMARY KEY AUTOINCREMENT,
	`TestGroupId`	INTEGER, --TestGroups.Id
	`TestCaseId`	INTEGER --TestCases.Id
);

-- this isn't really going to be used by the look of things. probably should
-- be eliminated, but it's harmless and has been intermittently useful in dev.
CREATE TABLE IF NOT EXISTS "SystemSettings" (
	`Id`	INTEGER PRIMARY KEY AUTOINCREMENT,
	`ReaderName`	TEXT,
	`ApplicationPIN`	TEXT,
	`OutputDirectory`	TEXT,
	`SettingsGroup`	TEXT,
	`GPMasterKey`	TEXT
);

INSERT INTO "TestSteps" VALUES(1,'BERTLV.1','gov.gsa.pivconformance.conformancelib.tests.BER_TLVTests','berTLV_Test_1',NULL);
INSERT INTO "TestSteps" VALUES(2,'BERTLV.2','gov.gsa.pivconformance.conformancelib.tests.BER_TLVTests','berTLV_Test_2',NULL);
INSERT INTO "TestSteps" VALUES(3,'BERTLV.3','gov.gsa.pivconformance.conformancelib.tests.BER_TLVTests','berTLV_Test_3',NULL);
INSERT INTO "TestSteps" VALUES(4,'BERTLV.4','gov.gsa.pivconformance.conformancelib.tests.BER_TLVTests','berTLV_Test_4',NULL);
INSERT INTO "TestSteps" VALUES(5,'BERTLV.5','gov.gsa.pivconformance.conformancelib.tests.BER_TLVTests','berTLV_Test_5',NULL);
INSERT INTO "TestSteps" VALUES(6,'73-4.1','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CCCTests','sp800_73_4_Test_1',NULL);
INSERT INTO "TestSteps" VALUES(7,'73-4.2','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CCCTests','sp800_73_4_Test_2',NULL);
INSERT INTO "TestSteps" VALUES(8,'73-4.3','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CCCTests','sp800_73_4_Test_3',NULL);
INSERT INTO "TestSteps" VALUES(9,'73-4.4','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CCCTests','sp800_73_4_Test_4',NULL);
INSERT INTO "TestSteps" VALUES(10,'73-4.5','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CCCTests','sp800_73_4_Test_5',NULL);
INSERT INTO "TestSteps" VALUES(11,'73-4.6','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CCCTests','sp800_73_4_Test_6',NULL);
INSERT INTO "TestSteps" VALUES(12,'73-4.7','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CCCTests','sp800_73_4_Test_7',NULL);
INSERT INTO "TestSteps" VALUES(13,'73-4.8','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_8',NULL);
INSERT INTO "TestSteps" VALUES(14,'73-4.9','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_9',NULL);
INSERT INTO "TestSteps" VALUES(15,'73-4.10','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_10',NULL);
INSERT INTO "TestSteps" VALUES(16,'73-4.11','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_11',NULL);
INSERT INTO "TestSteps" VALUES(17,'73-4.12','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_12',NULL);
INSERT INTO "TestSteps" VALUES(18,'73-4.13','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_13',NULL);
INSERT INTO "TestSteps" VALUES(19,'73-4.14','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_14',NULL);
INSERT INTO "TestSteps" VALUES(20,'73-4.15','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_15',NULL);
INSERT INTO "TestSteps" VALUES(21,'73-4.16','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_16',NULL);
INSERT INTO "TestSteps" VALUES(22,'73-4.17','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_17',NULL);
INSERT INTO "TestSteps" VALUES(23,'73-4.18','gov.gsa.pivconformance.conformancelib.tests.X509DataObjectTests','sp800_73_4_Test_18',NULL);
INSERT INTO "TestSteps" VALUES(24,'73-4.19','gov.gsa.pivconformance.conformancelib.tests.X509DataObjectTests','sp800_73_4_Test_19',NULL);
INSERT INTO "TestSteps" VALUES(25,'73-4.20','gov.gsa.pivconformance.conformancelib.tests.X509DataObjectTests','sp800_73_4_Test_20',NULL);
INSERT INTO "TestSteps" VALUES(26,'73-4.21','gov.gsa.pivconformance.conformancelib.tests.X509DataObjectTests','sp800_73_4_Test_21',NULL);
INSERT INTO "TestSteps" VALUES(27,'73-4.22','gov.gsa.pivconformance.conformancelib.tests.X509DataObjectTests','sp800_73_4_Test_22',NULL);
INSERT INTO "TestSteps" VALUES(28,'73-4.23','gov.gsa.pivconformance.conformancelib.tests.X509DataObjectTests','sp800_73_4_Test_23',NULL);
INSERT INTO "TestSteps" VALUES(29,'73-4.24','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4FingerprintsTests','sp800_73_4_Test_24',NULL);
INSERT INTO "TestSteps" VALUES(30,'73-4.25','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4FingerprintsTests','sp800_73_4_Test_25',NULL);
INSERT INTO "TestSteps" VALUES(31,'73-4.26','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4FingerprintsTests','sp800_73_4_Test_26',NULL);
INSERT INTO "TestSteps" VALUES(32,'73-4.27','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4PrintedInfoTests','sp800_73_4_Test_27',NULL);
INSERT INTO "TestSteps" VALUES(33,'73-4.28','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4PrintedInfoTests','sp800_73_4_Test_28',NULL);
INSERT INTO "TestSteps" VALUES(34,'73-4.29','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4PrintedInfoTests','sp800_73_4_Test_29',NULL);
INSERT INTO "TestSteps" VALUES(35,'73-4.30','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4PrintedInfoTests','sp800_73_4_Test_30',NULL);
INSERT INTO "TestSteps" VALUES(36,'73-4.31','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4PrintedInfoTests','sp800_73_4_Test_31',NULL);
INSERT INTO "TestSteps" VALUES(37,'73-4.32','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4FacialImageTests','sp800_73_4_Test_32',NULL);
INSERT INTO "TestSteps" VALUES(38,'73-4.33','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4SecurityObjectTests','sp800_73_4_Test_33',NULL);
INSERT INTO "TestSteps" VALUES(39,'73-4.34','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4SecurityObjectTests','sp800_73_4_Test_34',NULL);
INSERT INTO "TestSteps" VALUES(40,'73-4.35','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4SecurityObjectTests','sp800_73_4_Test_35',NULL);
INSERT INTO "TestSteps" VALUES(41,'73-4.36','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4SecurityObjectTests','sp800_73_4_Test_36',NULL);
INSERT INTO "TestSteps" VALUES(42,'73-4.37','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4SecurityObjectTests','sp800_73_4_Test_37',NULL);
INSERT INTO "TestSteps" VALUES(43,'73-4.38','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4DiscoveryObjectTests','sp800_73_4_Test_38',NULL);
INSERT INTO "TestSteps" VALUES(44,'73-4.40','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4DiscoveryObjectTests','sp800_73_4_Test_40',NULL);
INSERT INTO "TestSteps" VALUES(45,'73-4.41','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4DiscoveryObjectTests','sp800_73_4_Test_41',NULL);
INSERT INTO "TestSteps" VALUES(46,'73-4.42','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4DiscoveryObjectTests','sp800_73_4_Test_42',NULL);
INSERT INTO "TestSteps" VALUES(47,'73-4.43','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_43',NULL);
INSERT INTO "TestSteps" VALUES(48,'73-4.44','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_44',NULL);
INSERT INTO "TestSteps" VALUES(49,'73-4.45','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_45',NULL);
INSERT INTO "TestSteps" VALUES(50,'73-4.46','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_46',NULL);
INSERT INTO "TestSteps" VALUES(51,'73-4.47','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_47',NULL);
INSERT INTO "TestSteps" VALUES(52,'73-4.48','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_48',NULL);
INSERT INTO "TestSteps" VALUES(53,'73-4.49','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_49',NULL);
INSERT INTO "TestSteps" VALUES(54,'73-4.50','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_50',NULL);
INSERT INTO "TestSteps" VALUES(55,'73-4.51','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_51',NULL);
INSERT INTO "TestSteps" VALUES(56,'73-4.52','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4PrintedInfoTests','sp800_73_4_Test_52',NULL);
INSERT INTO "TestSteps" VALUES(57,'73-4.53','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4PrintedInfoTests','sp800_73_4_Test_53',NULL);
INSERT INTO "TestSteps" VALUES(58,'73-4.54','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4SecurityObjectTests','sp800_73_4_Test_54',NULL);
INSERT INTO "TestSteps" VALUES(59,'73-4.55','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4DiscoveryObjectTests','sp800_73_4_Test_55',NULL);
INSERT INTO "TestSteps" VALUES(60,'73-4.56','gov.gsa.pivconformance.conformancelib.tests.SP800_73_4CommmonObjectTests','sp800_73_4_Test_56',NULL);
INSERT INTO "TestSteps" VALUES(61,'76.1','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_1',NULL);
INSERT INTO "TestSteps" VALUES(62,'76.2','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_2',NULL);
INSERT INTO "TestSteps" VALUES(63,'76.3','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_3',NULL);
INSERT INTO "TestSteps" VALUES(64,'76.4','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_4',NULL);
INSERT INTO "TestSteps" VALUES(65,'76.5','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_5',NULL);
INSERT INTO "TestSteps" VALUES(66,'76.6','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_6',NULL);
INSERT INTO "TestSteps" VALUES(67,'76.7','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_7',NULL);
INSERT INTO "TestSteps" VALUES(68,'76.8','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_8',NULL);
INSERT INTO "TestSteps" VALUES(69,'76.9','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_9',NULL);
INSERT INTO "TestSteps" VALUES(70,'76.10','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_10',NULL);
INSERT INTO "TestSteps" VALUES(71,'76.11','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_11',NULL);
INSERT INTO "TestSteps" VALUES(72,'76.12','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_12',NULL);
INSERT INTO "TestSteps" VALUES(73,'76.13','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_13',NULL);
INSERT INTO "TestSteps" VALUES(74,'76.14','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_14',NULL);
INSERT INTO "TestSteps" VALUES(75,'76.15a','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_15a',NULL);
INSERT INTO "TestSteps" VALUES(76,'76.15b','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_15b',NULL);
INSERT INTO "TestSteps" VALUES(77,'76.16','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_16',NULL);
INSERT INTO "TestSteps" VALUES(78,'76.17','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_17',NULL);
INSERT INTO "TestSteps" VALUES(79,'76.18','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_18',NULL);
INSERT INTO "TestSteps" VALUES(80,'76.19','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_19',NULL);
INSERT INTO "TestSteps" VALUES(81,'76.20','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_20',NULL);
INSERT INTO "TestSteps" VALUES(82,'76.21','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_21',NULL);
INSERT INTO "TestSteps" VALUES(83,'76.22','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_22',NULL);
INSERT INTO "TestSteps" VALUES(84,'76.23','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_23',NULL);
INSERT INTO "TestSteps" VALUES(85,'76.24','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_24',NULL);
INSERT INTO "TestSteps" VALUES(86,'76.25','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_25',NULL);
INSERT INTO "TestSteps" VALUES(87,'76.26','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_26',NULL);
INSERT INTO "TestSteps" VALUES(88,'76.27','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_27',NULL);
INSERT INTO "TestSteps" VALUES(89,'76.28','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_28',NULL);
INSERT INTO "TestSteps" VALUES(90,'76.29','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_29',NULL);
INSERT INTO "TestSteps" VALUES(91,'76.30','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_30',NULL);
INSERT INTO "TestSteps" VALUES(92,'76.31','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_31',NULL);
INSERT INTO "TestSteps" VALUES(93,'76.32','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_32',NULL);
INSERT INTO "TestSteps" VALUES(94,'76.33','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_33',NULL);
INSERT INTO "TestSteps" VALUES(95,'76.34','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_34',NULL);
INSERT INTO "TestSteps" VALUES(96,'76.35','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_35',NULL);
INSERT INTO "TestSteps" VALUES(97,'76.36','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_36',NULL);
INSERT INTO "TestSteps" VALUES(98,'76.37','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_37',NULL);
INSERT INTO "TestSteps" VALUES(99,'76.38','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_38',NULL);
INSERT INTO "TestSteps" VALUES(100,'76.39','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_39',NULL);
INSERT INTO "TestSteps" VALUES(101,'76.40','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_40',NULL);
INSERT INTO "TestSteps" VALUES(102,'76.41','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_41',NULL);
INSERT INTO "TestSteps" VALUES(103,'76.42','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_42',NULL);
INSERT INTO "TestSteps" VALUES(104,'76.43','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_43',NULL);
INSERT INTO "TestSteps" VALUES(105,'76.44','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_44',NULL);
INSERT INTO "TestSteps" VALUES(106,'76.45','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_45',NULL);
INSERT INTO "TestSteps" VALUES(107,'76.46','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_46',NULL);
INSERT INTO "TestSteps" VALUES(108,'76.47','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_47',NULL);
INSERT INTO "TestSteps" VALUES(109,'76.48','gov.gsa.pivconformance.conformancelib.tests.SP800_76_Tests','sp800_76Test_48',NULL);
INSERT INTO "TestSteps" VALUES(110,'CMS.1','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_1',NULL);
INSERT INTO "TestSteps" VALUES(111,'CMS.2','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_2',NULL);
INSERT INTO "TestSteps" VALUES(112,'CMS.3','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_3',NULL);
INSERT INTO "TestSteps" VALUES(113,'CMS.4','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_4',NULL);
INSERT INTO "TestSteps" VALUES(114,'CMS.5','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_5',NULL);
INSERT INTO "TestSteps" VALUES(115,'CMS.6','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_6',NULL);
INSERT INTO "TestSteps" VALUES(116,'CMS.7','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_7',NULL);
INSERT INTO "TestSteps" VALUES(117,'CMS.8','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_8',NULL);
INSERT INTO "TestSteps" VALUES(118,'CMS.9','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_9',NULL);
INSERT INTO "TestSteps" VALUES(119,'CMS.10','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_10',NULL);
INSERT INTO "TestSteps" VALUES(120,'CMS.11','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_11',NULL);
INSERT INTO "TestSteps" VALUES(121,'CMS.12','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_12',NULL);
INSERT INTO "TestSteps" VALUES(122,'CMS.13','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_13',NULL);
INSERT INTO "TestSteps" VALUES(123,'CMS.14','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_14',NULL);
INSERT INTO "TestSteps" VALUES(124,'CMS.15','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_15',NULL);
INSERT INTO "TestSteps" VALUES(125,'CMS.17','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_17',NULL);
INSERT INTO "TestSteps" VALUES(126,'CMS.18','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_18',NULL);
INSERT INTO "TestSteps" VALUES(127,'CMS.19','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_19',NULL);
INSERT INTO "TestSteps" VALUES(128,'CMS.20','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_20',NULL);
INSERT INTO "TestSteps" VALUES(129,'CMS.21','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_21',NULL);
INSERT INTO "TestSteps" VALUES(130,'CMS.22','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_22',NULL);
INSERT INTO "TestSteps" VALUES(131,'CMS.23','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_23',NULL);
INSERT INTO "TestSteps" VALUES(132,'CMS.24','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_24',NULL);
INSERT INTO "TestSteps" VALUES(133,'CMS.25','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_25',NULL);
INSERT INTO "TestSteps" VALUES(134,'CMS.26','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_26',NULL);
INSERT INTO "TestSteps" VALUES(135,'CMS.27','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_27',NULL);
INSERT INTO "TestSteps" VALUES(136,'CMS.28','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_28',NULL);
INSERT INTO "TestSteps" VALUES(137,'CMS.29','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_29',NULL);
INSERT INTO "TestSteps" VALUES(138,'CMS.30','gov.gsa.pivconformance.conformancelib.tests.CMSTests','CMS_Test_30',NULL);
INSERT INTO "TestSteps" VALUES(139,'78.1','gov.gsa.pivconformance.conformancelib.tests.SP800_78_X509DataObjectTests','sp800_78_Test_1',NULL);
INSERT INTO "TestSteps" VALUES(140,'78.2','gov.gsa.pivconformance.conformancelib.tests.SP800_78_X509DataObjectTests','sp800_78_Test_2',NULL);
INSERT INTO "TestSteps" VALUES(141,'78.3','gov.gsa.pivconformance.conformancelib.tests.SP800_78_X509DataObjectTests','sp800_78_Test_3',NULL);
INSERT INTO "TestSteps" VALUES(142,'PKIX.1','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_1',NULL);
INSERT INTO "TestSteps" VALUES(143,'PKIX.2','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_2',NULL);
INSERT INTO "TestSteps" VALUES(144,'PKIX.3','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_3',NULL);
INSERT INTO "TestSteps" VALUES(145,'PKIX.4','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_4',NULL);
INSERT INTO "TestSteps" VALUES(146,'PKIX.5','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_5',NULL);
INSERT INTO "TestSteps" VALUES(147,'PKIX.6','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_6',NULL);
INSERT INTO "TestSteps" VALUES(148,'PKIX.7','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_7',NULL);
INSERT INTO "TestSteps" VALUES(149,'PKIX.8','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_8',NULL);
INSERT INTO "TestSteps" VALUES(150,'PKIX.9','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_9',NULL);
INSERT INTO "TestSteps" VALUES(151,'PKIX.10','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_10',NULL);
INSERT INTO "TestSteps" VALUES(152,'PKIX.11','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_11',NULL);
INSERT INTO "TestSteps" VALUES(153,'PKIX.12','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_12',NULL);
INSERT INTO "TestSteps" VALUES(154,'PKIX.13','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_13',NULL);
INSERT INTO "TestSteps" VALUES(155,'PKIX.14','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_14',NULL);
INSERT INTO "TestSteps" VALUES(156,'PKIX.15','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_15',NULL);
INSERT INTO "TestSteps" VALUES(157,'PKIX.16','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_16',NULL);
INSERT INTO "TestSteps" VALUES(158,'PKIX.17','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_17',NULL);
INSERT INTO "TestSteps" VALUES(159,'PKIX.18','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_18',NULL);
INSERT INTO "TestSteps" VALUES(160,'PKIX.19','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_19',NULL);
INSERT INTO "TestSteps" VALUES(161,'PKIX.20','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_20',NULL);
INSERT INTO "TestSteps" VALUES(162,'PKIX.21','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_21',NULL);
INSERT INTO "TestSteps" VALUES(163,'PKIX.22','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_22',NULL);
INSERT INTO "TestSteps" VALUES(164,'PKIX.23','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_23',NULL);
INSERT INTO "TestSteps" VALUES(165,'PKIX.24','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_24',NULL);
INSERT INTO "TestSteps" VALUES(166,'PKIX.25','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_25',NULL);
INSERT INTO "TestSteps" VALUES(167,'PKIX.26','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_26',NULL);
INSERT INTO "TestSteps" VALUES(168,'PKIX.27','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_27',NULL);
INSERT INTO "TestSteps" VALUES(169,'PKIX.28','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_28',NULL);
INSERT INTO "TestSteps" VALUES(170,'PKIX.29','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_29',NULL);
INSERT INTO "TestSteps" VALUES(171,'PKIX.30','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_30',NULL);
INSERT INTO "TestSteps" VALUES(172,'PKIX.31','gov.gsa.pivconformance.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_31',NULL);
INSERT INTO "TestSteps" VALUES(173,'PlaceholderTest.1','gov.gsa.pivconformance.conformancelib.tests.PlaceholderTests','PlaceholderTest_1',NULL);
INSERT INTO "TestSteps" VALUES(174,'PlaceholderTest.2','gov.gsa.pivconformance.conformancelib.tests.PlaceholderTests','PlaceholderTest_2',NULL);
INSERT INTO "TestSteps" VALUES(175,'PlaceholderTest.3','gov.gsa.pivconformance.conformancelib.tests.PlaceholderTests','PlaceholderTest_3',NULL);
INSERT INTO "TestStepParameters" VALUES(1, 21,NULL,'15',0);
INSERT INTO "TestStepParameters" VALUES(2, 99,NULL,'CARDHOLDER_FINGERPRINTS_OID:513',0);
INSERT INTO "TestStepParameters" VALUES(3, 99,NULL,'CARDHOLDER_FACIAL_IMAGE_OID:1281',1);
INSERT INTO "TestStepParameters" VALUES(4, 99,NULL,'CARDHOLDER_IRIS_IMAGES_OID:9',2);
INSERT INTO "TestStepParameters" VALUES(5, 102,NULL,'CARDHOLDER_FINGERPRINTS_OID:8',0);
INSERT INTO "TestStepParameters" VALUES(6, 102,NULL,'CARDHOLDER_FACIAL_IMAGE_OID:2',1);
INSERT INTO "TestStepParameters" VALUES(7, 102,NULL,'CARDHOLDER_IRIS_IMAGES_OID:16',2);
INSERT INTO "TestStepParameters" VALUES(8, 103,NULL,'CARDHOLDER_FINGERPRINTS_OID:128',0);
INSERT INTO "TestStepParameters" VALUES(9, 103,NULL,'CARDHOLDER_FACIAL_IMAGE_OID:32:2',1);
INSERT INTO "TestStepParameters" VALUES(10, 103,NULL,'CARDHOLDER_IRIS_IMAGES_OID:64',2);
INSERT INTO "TestStepParameters" VALUES(11, 104,NULL,'-2',0);
INSERT INTO "TestStepParameters" VALUES(12, 104,NULL,'100',1);
INSERT INTO "TestStepParameters" VALUES(13, 114,NULL,'CARD_HOLDER_UNIQUE_IDENTIFIER_OID:2.16.840.1.101.3.6.1',0);
INSERT INTO "TestStepParameters" VALUES(14, 114,NULL,'CARDHOLDER_FINGERPRINTS_OID:2.16.840.1.101.3.6.2',1);
INSERT INTO "TestStepParameters" VALUES(15, 114,NULL,'CARDHOLDER_FACIAL_IMAGE_OID:2.16.840.1.101.3.6.2',2);
INSERT INTO "TestStepParameters" VALUES(16, 114,NULL,'CARDHOLDER_IRIS_IMAGES_OID:2.16.840',3);
INSERT INTO "TestStepParameters" VALUES(17, 124,NULL,'2.16.840.1.101.3.8.7',0);
INSERT INTO "TestStepParameters" VALUES(18, 125,NULL,'1.3.6.1.1.16.4',0);
INSERT INTO "TestStepParameters" VALUES(19, 137,NULL,'2.16.840.1.101.3.6.6',0);
INSERT INTO "TestStepParameters" VALUES(20, 138,NULL,'1.3.6.1.1.16.4',0);
INSERT INTO "TestStepParameters" VALUES(21, 147,NULL,'X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID:2.16.840.1.101.3.2.1.48.248',0);
INSERT INTO "TestStepParameters" VALUES(22, 147,NULL,'X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID:2.16.840.1.101.3.2.1.48.251',1);
INSERT INTO "TestStepParameters" VALUES(23, 147,NULL,'X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID:2.16.840.1.101.3.2.1.48.250',2);
INSERT INTO "TestStepParameters" VALUES(24, 147,NULL,'X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID:2.16.840.1.101.3.2.1.48.249',3);
INSERT INTO "TestStepParameters" VALUES(25, 147,NULL,'CARD_HOLDER_UNIQUE_IDENTIFIER_OID:2.16.840.1.101.3.2.1.48.252',4);
INSERT INTO "TestStepParameters" VALUES(26, 159,NULL,'2.16.840.1.101.3.2.1.3.19',0);
INSERT INTO "TestStepParameters" VALUES(27, 161,NULL,'X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID:2.16.840.1.101.3.6.8',0);
INSERT INTO "TestStepParameters" VALUES(28, 161,NULL,'CARD_HOLDER_UNIQUE_IDENTIFIER_OID:2.16.840.1.101.3.8.7',1);
INSERT INTO "TestStepParameters" VALUES(29, 162,NULL,'2.16.840.1.101.3.2.1.48.252',0);
INSERT INTO "TestStepParameters" VALUES(30, 168,NULL,'1.3.6.1.1.16.4',0);
INSERT INTO "TestStepParameters" VALUES(31, 174,NULL,'1',0);
INSERT INTO "TestStepParameters" VALUES(32, 174,NULL,'2',1);
INSERT INTO "TestStepParameters" VALUES(33, 174,NULL,'3',2);
INSERT INTO "TestStepParameters" VALUES(34, 175,NULL,'CAT:SLEEPY',0);
INSERT INTO "TestStepParameters" VALUES(35, 175,NULL,'DOG:HUNGRY',1);
INSERT INTO "TestStepParameters" VALUES(36, 175,NULL,'ELEPHANT:SAD',2);
INSERT INTO "TestCases" VALUES(1, NULL,'8 BER_TLV','BER-TLV Test Assertions','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(2, NULL,'8.1 CCC','Card Capabilities Container','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(3, NULL,'8.1.0','SP 800-73-4 Data Model','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(4, NULL,'8.1.0.1','Length field encoded as shown in SP800-85B Table 8.1','CARD_CAPABILITY_CONTAINER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(5, NULL,'8.1.0.2','Tag encoded as 3 bytes','CARD_CAPABILITY_CONTAINER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(6, NULL,'8.1.0.3','Each data object returned with 2 byte status word (90 00)','CARD_CAPABILITY_CONTAINER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(7, NULL,'8.1.0.4','If a variable length field has length of 0, tag length is followed immediately by next tag if applicable','CARD_CAPABILITY_CONTAINER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(8, NULL,'8.1.1','CCC Registered data model element is present and has a value of 0x10.','CARD_CAPABILITY_CONTAINER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(9, NULL,'8.1.2','CCC BERTLV tag is 5FC107','CARD_CAPABILITY_CONTAINER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(10, NULL,'8.1.3','CCC Tags 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xFA, 0xFB, 0xFC, 0xFD present in that order','CARD_CAPABILITY_CONTAINER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(11, NULL,'8.1.8','CCC Optional Tags 0xE3 and 0xB4 may be present or absent; if present are after tags listed in and are in that order','CARD_CAPABILITY_CONTAINER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(12, NULL,'8.1.9','CCC Tag 0xFE present and after any tags from 73-4.3 and 73-4.4','CARD_CAPABILITY_CONTAINER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(13, NULL,'8.1.10','Confirm that tag 0xFE has length of 0','CARD_CAPABILITY_CONTAINER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(14, NULL,'8.1.11','CCC tag order and value lengths comply with Table 8 of SP 800-73-4','CARD_CAPABILITY_CONTAINER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(15, NULL,'8.2 CHUID','Card Holder Unique Identifier','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(16, NULL,'8.2.0','SP 800-73-4 Data Model','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(17, NULL,'8.2.0.1','Length field encoded as shown in SP800-85B Table 8.1','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(18, NULL,'8.2.0.2','Tag encoded as 3 bytes','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(19, NULL,'8.2.0.3','Each data object returned with 2 byte status word (90 00)','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(20, NULL,'8.2.0.4','If a variable length field has length of 0, tag length is followed immediately by next tag if applicable','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(21, NULL,'8.2.1','CHUID tag order and value lengths comply with Table 9 of SP 800-73-4','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(22, NULL,'8.2.2.1','Tag 0x30 is present','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(23, NULL,'8.2.2.2','Tag 0x30 is the first tag or the first tag following 0xEE','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(24, NULL,'8.2.2.3','Tags 0x32 and 0x33 are optionally present and must follow 0x30 in that order','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(25, NULL,'8.2.2.4','Tag 0x34 is present','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(26, NULL,'8.2.2.5','Tag 0x34 follows Tag 0x30, 32, or 0x33','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(27, NULL,'8.2.2.6','Tag 0x35 is present','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(28, NULL,'8.2.2.7','Tag 0x35 follows Tag 0x34','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(29, NULL,'8.2.2.8','Tag 0x36 is optionally present and follows Tag  0x35','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(30, NULL,'8.2.2.9','Tags 0x3E and 0xFE are present and follow tags  in that order','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(31, NULL,'8.2.2.10','Tag 0x3E is present','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(32, NULL,'8.2.2.11','Tag 0x3E follows Tag 0x35 or 0x36','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(33, NULL,'8.2.2.12','Tag 0xFE is present','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(34, NULL,'8.2.2.13','Tag 0xFE follows Tag 0x3E','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(35, NULL,'8.2.2.14','If CHUID tag 0xEE is present, it is the first tag in the blob','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(36, NULL,'8.2.2.15','No tags other than (0xEE, 0x30, 0x32, 0x33, 0x34, 0x35, 0x36, 0x3E, 0xFE) are present','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(37, NULL,'8.2.2.16','The Agency Code, System Code, and Credential Number of the FASC-N are present. The credential series, individual credential issue, person identifier, organizational category, organizational identifier, and person/organization association category of the FASC-N are populated','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(38, NULL,'8.2.3','Expiration Date is formatted YYYYMMDD','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(39, NULL,'8.2.4','Expiration Date is within the next 15 years','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(40, NULL,'8.2.5','If the CHUID contains the optional Cardholder UUID, then the data element shall be in accordance with 800 73-4 Part 1 Section 3.4.2.','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(41, NULL,'8.2.6','The retired key map is not present','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(42, NULL,'8.2.7','Tag 0xFE has length of 0','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(43, NULL,'8.3 PIV Auth Cert','X.509 Certificate for PIV Authentication','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(44, NULL,'8.3.0','SP 800-73-4 Data Model','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(45, NULL,'8.3.0.1','Length field encoded as shown in SP800-85B Table 8.1','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(46, NULL,'8.3.0.2','Tag encoded as 3 bytes','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(47, NULL,'8.3.0.3','Each data object returned with 2 byte status word (90 00)','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(48, NULL,'8.3.0.4','If a variable length field has length of 0, tag length is followed immediately by next tag if applicable','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(49, NULL,'8.3.1','PIV Authentication Certificate container tag order and value lengths comply with Table 10 of SP 800-73-4','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(50, NULL,'8.3.2.1','Tags 0x70 and 0x71 are present in that order','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(51, NULL,'8.3.2.2','Tag 0x72 is optionally present and follows tags from 73-4.19','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(52, NULL,'8.3.2.3','Tag 0xFE is present and follows tags from 73-4.19, 73-4.20','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(53, NULL,'8.3.2.4','No tags other than (0x70, 0x71, 0x72, 0xFE) are present','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(54, NULL,'8.3.2.5','Tag 0xFE has length of 0','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(55, NULL,'8.4 Fingerprints','Card Holder Fingerprints','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(56, NULL,'8.4.0','SP 800-73-4 Data Model','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(57, NULL,'8.4.0.1','Length field encoded as shown in SP800-85B Table 8.1','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(58, NULL,'8.4.0.2','Tag encoded as 3 bytes','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(59, NULL,'8.4.0.3','Each data object returned with 2 byte status word (90 00)','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(60, NULL,'8.4.0.4','If a variable length field has length of 0, tag length is followed immediately by next tag if applicable','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(61, NULL,'8.4.1','Card Holder Fingerprints tag order and value lengths comply with Table 11 of SP 800-73-4','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(62, NULL,'8.4.2','Tag 0xFE has length of 0','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(63, NULL,'8.5 Printed Information','Printed Information','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(64, NULL,'8.5.0','SP 800-73-4 Data Model','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(65, NULL,'8.5.0.1','Length field encoded as shown in SP800-85B Table 8.1','PRINTED_INFORMATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(66, NULL,'8.5.0.2','Tag encoded as 3 bytes','PRINTED_INFORMATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(67, NULL,'8.5.0.3','Each data object returned with 2 byte status word (90 00)','PRINTED_INFORMATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(68, NULL,'8.5.0.4','If a variable length field has length of 0, tag length is followed immediately by next tag if applicable','PRINTED_INFORMATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(69, NULL,'8.5.1.1','Printed Information tag order and value lengths comply with Table 14 of SP 800-73-4','PRINTED_INFORMATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(70, NULL,'8.5.1.2','Tags 0x01, 0x02, 0x05, 0x06 are present in that order','PRINTED_INFORMATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(71, NULL,'8.5.1.3','Tags 0x01, 0x02, 0x05, 0x06 are in that order','PRINTED_INFORMATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(72, NULL,'8.5.1.4','Tag 0xFE follows Tag 0x06, 0x07, or 0x08','PRINTED_INFORMATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(73, NULL,'8.5.1.5','Tags 0x07 and 0x08 are optionally present in that order, following the tags from 73-4.28','PRINTED_INFORMATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(74, NULL,'8.5.1.6','Tag 0xFE is present and follows tags from 73-4.28, 73-4.29','PRINTED_INFORMATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(75, NULL,'8.5.1.7','No tags other than (0x01, 0x02, 0x04, 0x05, 0x06, 0x07, 0x08, 0xFE) are present','PRINTED_INFORMATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(76, NULL,'8.5.1.8','Tag 0xFE has length of 0','PRINTED_INFORMATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(77, NULL,'8.6 Facial Image','Card Holder Facial Image','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(78, NULL,'8.6.0','SP 800-73-4 Data Model','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(79, NULL,'8.6.0.1','Length field encoded as shown in SP800-85B Table 8.1','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(80, NULL,'8.6.0.2','Tag encoded as 3 bytes','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(81, NULL,'8.6.0.3','Each data object returned with 2 byte status word (90 00)','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(82, NULL,'8.6.0.4','If a variable length field has length of 0, tag length is followed immediately by next tag if applicable','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(83, NULL,'8.6.1.1','Printed Information tag order and value lengths comply with Table 13 of SP 800-73-4','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(84, NULL,'8.6.1.2','Position is one of the valid x,y coordinate types in the original image','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(85, NULL,'8.6.1.3','No tags other than (0xBC, 0xFE) are present','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(86, NULL,'8.6.4','Tag 0xFE has length of 0','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(87, NULL,'8.7 Digital Signature Cert','X.509 Certificate for Digital Signature','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(88, NULL,'8.7.0','SP 800-73-4 Data Model','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(89, NULL,'8.7.0.1','Length field encoded as shown in SP800-85B Table 8.1','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(90, NULL,'8.7.0.2','Tag encoded as 3 bytes','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(91, NULL,'8.7.0.3','Each data object returned with 2 byte status word (90 00)','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(92, NULL,'8.7.0.4','If a variable length field has length of 0, tag length is followed immediately by next tag if applicable','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(93, NULL,'8.7.1.1','X.509 Certificate for Digital Signature container tag order and value lengths comply with Table 15 of SP 800-73-4','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(94, NULL,'8.7.1.2','Tags 0x70 and 0x71 are present in that order','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(95, NULL,'8.7.1.3','Tag 0x72 is optionally present and follows tags from 73-4.19','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(96, NULL,'8.7.1.4','No tags other than (0x70, 0x71, 0x72, 0xFE) are present','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(97, NULL,'8.7.1.5','Tag 0xFE is present and follows tags from 73-4.19, 73-4.20','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(98, NULL,'8.7.1.6','Tag 0xFE has length of 0','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(99, NULL,'8.8 Key Management Cert','X.509 Certificate for Key Management','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(100, NULL,'8.8.0','SP 800-73-4 Data Model','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(101, NULL,'8.8.0.1','Length field encoded as shown in SP800-85B Table 8.1','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(102, NULL,'8.8.0.2','Tag encoded as 3 bytes','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(103, NULL,'8.8.0.3','Each data object returned with 2 byte status word (90 00)','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(104, NULL,'8.8.0.4','If a variable length field has length of 0, tag length is followed immediately by next tag if applicable','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(105, NULL,'8.8.1.1','X.509 Certificate for Key Management container tag order and value lengths comply with Table 16 of SP 800-73-4','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(106, NULL,'8.8.1.2','Tags 0x70 and 0x71 are present in that order','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(107, NULL,'8.8.1.3','Tag 0x72 is optionally present and follows tags from 73-4.19','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(108, NULL,'8.8.1.4','Tag 0xFE is present and follows tags from 73-4.19, 73-4.20','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(109, NULL,'8.8.1.5','No tags other than (0x70, 0x71, 0x72, 0xFE) are present','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(110, NULL,'8.8.1.6','Tag 0xFE has length of 0','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(111, NULL,'8.9 Card Auth Cert','X.509 Certificate for Card Authentication','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(112, NULL,'8.9.0','SP 800-73-4 Data Model','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(113, NULL,'8.9.0.1','Length field encoded as shown in SP800-85B Table 8.1','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(114, NULL,'8.9.0.2','Tag encoded as 3 bytes','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(115, NULL,'8.9.0.3','Each data object returned with 2 byte status word (90 00)','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(116, NULL,'8.9.0.4','If a variable length field has length of 0, tag length is followed immediately by next tag if applicable','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(117, NULL,'8.9.1.1','X.509 Certificate for Card Authentication tag order and value lengths comply with Table 17 of SP 800-73-4','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(118, NULL,'8.9.1.2','Tags 0x70 and 0x71 are present in that order','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(119, NULL,'8.9.1.3','Tag 0x72 is optionally present and follows tags from 73-4.19','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(120, NULL,'8.9.1.4','Tag 0xFE is present and follows tags from 73-4.19, 73-4.20','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(121, NULL,'8.9.1.5','No tags other than (0x70, 0x71, 0x72, 0xFE) are present','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(122, NULL,'8.9.1.6','Tag 0xFE has length of 0','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(123, NULL,'8.10 Security Object','Security Object','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(124, NULL,'8.10.0','SP 800-73-4 Data Model','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(125, NULL,'8.10.0.1','Length field encoded as shown in SP800-85B Table 8.1','SECURITY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(126, NULL,'8.10.0.2','Tag encoded as 3 bytes','SECURITY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(127, NULL,'8.10.0.3','Each data object returned with 2 byte status word (90 00)','SECURITY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(128, NULL,'8.10.0.4','If a variable length field has length of 0, tag length is followed immediately by next tag if applicable','SECURITY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(129, NULL,'8.10.1.1','Security Object tag order and value lengths comply with Table 12 of SP 800-73-4','SECURITY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(130, NULL,'8.10.1.2','Tags 0xBA, 0xBB, 0XFE are present','SECURITY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(131, NULL,'8.10.1.3','Tags 0xBA, 0xBB, 0XFE are are in that order','SECURITY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(132, NULL,'8.10.1.4','No tags other than (0xBA, 0xBB, 0xFE) are present','SECURITY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(133, NULL,'8.10.2','Parse data at tag 0xBA and for each data container found ensure that performing a select returns status words 0x90, 0x00','SECURITY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(134, NULL,'8.11 Discovery Object','Discovery Object','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(135, NULL,'8.11.0','SP 800-73-4 Data Model','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(136, NULL,'8.11.0.1','Length field encoded as shown in SP800-85B Table 8.1','DISCOVERY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(137, NULL,'8.11.0.2','Tag encoded as 3 bytes','DISCOVERY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(138, NULL,'8.11.0.3','Each data object returned with 2 byte status word (90 00)','DISCOVERY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(139, NULL,'8.11.0.4','If a variable length field has length of 0, tag length is followed immediately by next tag if applicable','DISCOVERY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(140, NULL,'8.11.1.1','Tag 0x4F (PIV Application AID) is present','DISCOVERY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(141, NULL,'8.11.1.2','Tag 0x5F2F (PIN Usage Policy) Is present','DISCOVERY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(142, NULL,'8.11.1.3','Discovery Object Tags 0x4F, 0x5F2F are in that order','DISCOVERY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(143, NULL,'8.11.1.4','The values of the tags conform with the vendor provided data.','DISCOVERY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(144, NULL,'8.11.1.5','The PIN usage policy matches the card capabilities provided by the vendor documentation. Associated optional data objects are present when the PIN usage policy asserts an optional capability (i.e., OCC, global PIN and pairing code)','DISCOVERY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(145, NULL,'8.11.6','Discovery Object tag order and value lengths comply with Table 18 of SP 800-73-4','DISCOVERY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(146, NULL,'8.12 Iris','Card Holder Iris Images','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(147, NULL,'8.13 Retired Key Management Cert','Key History Objects','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(148, NULL,'8.13.1','X.509 Key History 1','RETIRED_X_509_CERTIFICATE_FOR_KEY_MANAGEMENT_1_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(149, NULL,'8.13.2','X.509 Key History 2','RETIRED_X_509_CERTIFICATE_FOR_KEY_MANAGEMENT_2_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(150, NULL,'8.14 Key History','Key History (see Issue #52)','KEY_HISTORY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(151, NULL,'8.15 BITT','Biometric InformationTemplates Group Template','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(152, NULL,'8.16 SMCS','Secure Messaging Certificate Signer','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(153, NULL,'8.17 Pariring Code Reference','Pairing Code Reference Data Container','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(154, NULL,'9 Biometric Data Objects','Biometric Data Object Test Assertions','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(155, NULL,'9.1 Fingerprint','CBEFF Patron Format for Fingerprint Template','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(156, NULL,'9.1.1','CBEFF Structure for Fingerprint Template','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(157, NULL,'9.1.1.1','BDB length field is non-zero','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(158, NULL,'9.1.1.2','Recorded length matches actual BDB length','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(159, NULL,'9.1.1.3','SB length field is non-zero','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(160, NULL,'9.1.1.4','Recorded length matches actual SB length','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(161, NULL,'9.1.1.5','Card Holder Fingerprint object length equals sum of CBEFF header length + BDB length + SB length','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(162, NULL,'9.1.2','CBEFF Header for Fingerprint Template','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(163, NULL,'9.1.2.1','The Patron Header Version field has a value of 0x03.','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(164, NULL,'9.1.2.2','Validate that the biometric data block is signed but not encrypted','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(165, NULL,'9.1.2.3','Validate that BDB Format Owner is set to a value of 0x001B denoting M1, the INCITS Technical Committee on Biometrics.','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(166, NULL,'9.1.2.4','The BDB Format Type is set to a value of 0x0201','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(167, NULL,'9.1.2.5','Validate that that the creation date in the PIV Patron Format is encoded in 8 bytes using a binary representation of YYYYMMDDhhmmssZ','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(168, NULL,'9.1.2.6','Validate date encoding on Validity Period in PIV Patron Format','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(169, NULL,'9.1.2.7','Valdiate that that Biometric Type has the value 0x000008','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(170, NULL,'9.1.2.8','Validate that for the mandatory minutia PIV card templates, the CBEFF biometric data type encoding value shall be b100xxxxx, which corresponds to biometric data that has been processed.','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(171, NULL,'9.1.2.9','The Biometric Data Quality field is -2 or 0 - 100.','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(172, NULL,'9.1.2.10','Validate that that the Creator field in the PIV Patron Format contains 18 bytes of which the first K <= 17 bytes shall be ASCII characters, and the first of the remaining 18-K shall be a null terminator (zero)','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(173, NULL,'9.1.2.11','Validate that FASC-N field in the PIV Patron Format contains the same 25 bytes as the FASC-N component of the CHUID identifier','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(174, NULL,'9.1.2.12','Validate that the Reserved for Future Use field is equal to 0x00000000','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(175, NULL,'9.2 Facial Image','CBEFF Patron Format for Facial Image','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(176, NULL,'9.2.1','CBEFF Structure for Facial Image','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(177, NULL,'9.2.1.1','Validate that CBEFF structure conforms to SP800-76 Table 7','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(178, NULL,'9.2.1.2','BDB length field is non-zero','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(179, NULL,'9.2.1.3','Recorded length matches actual length','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(180, NULL,'9.2.1.4','SB length field is non-zero','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(181, NULL,'9.2.2','CBEFF Header for Facial Image','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(182, NULL,'9.2.2.1','Card Holder Fingerprint object length equals sum of CBEFF header length + BDB length + SB length','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(183, NULL,'9.2.2.2','Validate that the biometric data block is signed but not encrypted','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(184, NULL,'9.2.2.3','Validate that BDB Format Owner is set to a value of 0x001B denoting M1, the INCITS Technical Committee on Biometrics.','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(185, NULL,'9.2.2.4','The BDB Format Type is set to a value of 0x0501','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(186, NULL,'9.2.2.5','Validate that that the creation date in the PIV Patron Format is encoded in 8 bytes using a binary representation of YYYYMMDDhhmmssZ','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(187, NULL,'9.2.2.6','Validate date encoding on Validity Period in PIV Patron Format','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(188, NULL,'9.2.2.7','Validate that Biometric Type has the value 0x000002','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(189, NULL,'9.2.2.8','Validate that the CBEFF biometric data type encoding value shall be b001xxxxx, which corresponds to the raw biometric data','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(190, NULL,'9.2.2.9','The Biometric Data Quality field is -2 or 0 - 100.','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(191, NULL,'9.2.2.10','Validate that that the Creator field in the PIV Patron Format contains 18 bytes of which the first K <= 17 bytes shall be ASCII characters, and the first of the remaining 18-K shall be a null terminator (zero)','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(192, NULL,'9.2.2.11','Validate that FASC-N field in the PIV Patron Format contains the same 25 bytes as the FASC-N component of the CHUID identifier','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(193, NULL,'9.2.2.12','Validate that the Reserved for Future Use field is equal to 0x00000000','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(194, NULL,'9.3 Iris CBEFF','CBEFF Patron Format for Iris Image','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(195, NULL,'9.3.1','CBEFF Structure for Iris Image','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(196, NULL,'9.3.1.1','Validate that CBEFF structure conforms to SP800-76 Table 7','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(197, NULL,'9.3.1.2','BDB length field is non-zero','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(198, NULL,'9.3.1.3','Recorded length matches actual length','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(199, NULL,'9.3.1.4','SB length field is non-zero','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(200, NULL,'9.3.2','CBEFF Header for Iris Image','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(201, NULL,'9.3.2.1','Patron Header Version field has a value of 0x03.','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(202, NULL,'9.3.2.2','Validate that the biometric data block is signed but not encrypted','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(203, NULL,'9.3.2.3','The BDB Format Owner field has a value of 0x0101.','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(204, NULL,'9.3.2.4','The BDB Format Type field has a value of 0x0009.','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(205, NULL,'9.3.2.5','Validate that that the creation date in the PIV Patron Format is encoded in 8 bytes using a binary representation of YYYYMMDDhhmmssZ','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(206, NULL,'9.3.2.6','Validate date encoding on Validity Period in PIV Patron Format','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(207, NULL,'9.3.2.7','The value of the Biometric Type field for the iris image is 0x000010.','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(208, NULL,'9.3.2.8','Validate that the CBEFF biometric data type encoding value shall be b01000000, which corresponds to the raw biometric data','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(209, NULL,'9.3.2.9','The Biometric Data Quality field is -2 or 0 - 100.','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(210, NULL,'9.3.2.10','Validate that that the Creator field in the PIV Patron Format contains 18 bytes of which the first K <= 17 bytes shall be ASCII characters, and the first of the remaining 18-K shall be a null terminator (zero)','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(211, NULL,'9.3.2.11','Validate that FASC-N field in the PIV Patron Format contains the same 25 bytes as the FASC-N component of the CHUID identifier','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(212, NULL,'9.3.2.12','Validate that the Reserved for Future Use field is equal to 0x00000000','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(213, NULL,'9.4 OCC Fingerprint Template','Off-Card Comparison Fingerprint Template','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(214, NULL,'9.4.1','General Record Header Conformance','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(215, NULL,'9.4.1.1','Extract contents of format identifier, confirm value 0x464D5200','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(216, NULL,'9.4.1.2','Extract contents of version identifier, confirm value 0x20323030','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(217, NULL,'9.4.1.3','Biometric Data Block length (L) where 26 <= L <= 1574','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(218, NULL,'9.4.1.4','Confirm that product identifier owner and product identifier type are non-zero and that MSBs identify vendor, LSBs identify minutia detection algorithm version','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(219, NULL,'9.4.1.5','Confirm that product identifier owner and product identifier type are non-zero and that MSBs identify vendor, LSBs identify minutia detection algorithm version','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(220, NULL,'9.4.1.6','Confirm that capture equipment compliance has a value of 1000b','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(221, NULL,'9.4.1.7','Confirm that capture equipment id is non-NULL','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(222, NULL,'9.4.1.8','Width of the Size of Scanned Image in x direction is the larger of the widths of the two input images.','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(223, NULL,'9.4.1.9','Height of the Size of Scanned Image in y direction is the larger of the heights of the two input images.','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(224, NULL,'9.4.1.10','X and Y resolutions both have values of 197','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(225, NULL,'9.4.1.12','Number of Finger Views is 2','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(226, NULL,'9.4.1.13','Confirm that reserved byte is set to 0','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(227, NULL,'9.4.2','View Header Conformance','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(228, NULL,'9.4.2.0.1','Confirm that Finger View Header has value A','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(229, NULL,'9.4.2.0.2','Confirm that Finger View Position (0,14)','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(230, NULL,'9.4.2.1','If only 1 minutiae present for a finger, view number must be 0','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(231, NULL,'9.4.2.2','Impression type must be 0 or 2','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(232, NULL,'9.4.2.3','Finger Quality value shall be 20, 40, 60, 80, 100, 254, or 255.','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(233, NULL,'9.4.2.4','Number of minutia (0..128)','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(234, NULL,'9.4.2.5','Minutiae Type value shall be 01b, 10b, or 00b.','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(235, NULL,'9.4.2.6','Verify that position is one of the valid x,y coordinate types in the original image','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(236, NULL,'9.4.2.7','Verify that angle (0,179)','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(237, NULL,'9.4.2.8','Verify that quality (0,100)','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(238, NULL,'9.4.2.9','Verify that extended data block length is 0','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(239, NULL,'9.4.3','Fingerprint Minutiae Data Records','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(240, NULL,'9.4.3.1','Minutiae Type value shall be01b, 10b, or 00b.','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(241, NULL,'9.4.3.2','Extended Data Block Length shall be 0','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(242, NULL,'9.5','On-Card Comparison','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(243, NULL,'9.5.1','BIT Group Template data conformance for on-card comparison','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(244, NULL,'9.6 Facial Image BDB','Facial Image','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(245, NULL,'9.6.1','Facial Image Header Conformance','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(246, NULL,'9.6.1.1','Format Identifier has a value 0x46414300','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(247, NULL,'9.6.1.2','Version Number has a value of 0x30313000','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(248, NULL,'9.6.1.3','Number of Facial Images value is >= 1','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(249, NULL,'9.6.1.4','Number of Feature Points is >= 0','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(250, NULL,'9.6.2','Facial Image Data Conformance','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(251, NULL,'9.6.2.1','Facial Image Type is 1','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(252, NULL,'9.6.2.2','Image Data Type is 0 or 1','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(253, NULL,'9.6.2.3','Image Color Space is 1','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(254, NULL,'9.6.2.4','Source Type is 2 or 6','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(255, NULL,'9.7 Iris Image BDB','Iris Image','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(256, NULL,'9.7.1','Iris Image Profile','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(257, NULL,'9.7.2','Iris Image Data Conformance','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(258, NULL,'10 Signed Data Elements','Signed Data Elements Test Assertions','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(259, NULL,'10.1  CHUID','Card Holder Unique Identifier','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(260, NULL,'10.1.1','Signature Block Contents','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(261, NULL,'10.1.1.1','The CHUID buffer contains an asymmetric digital signature that is implemented as a SignedData type and is encoded as a CMS external signature according to RFC 5652.','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(262, NULL,'10.1.1.2','The value of the version field of the SignedData is 3.','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(263, NULL,'10.1.1.3','The digestAlgorithms field value of the SignedData is in accordance with Table 3-2 of SP800-78-4.','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(264, NULL,'10.1.1.4','Encapsulated content is absent and eContentType is id-PIV-CHUIDSecurityObject for CHUID and id-PIV-biometricObject for biometric objects in encapContentInfo','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(265, NULL,'10.1.1.5','The crls field is omitted from the SignedData.','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(266, NULL,'10.1.1.6','The signerInfos field in the SignedData contains a single SignerInfo.','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(267, NULL,'10.1.1.7','The SignerIdentifier in the SignerInfo uses the issuerAndSerialNumber choice and it corresponds to the issuer and serialNumber fields found in the X.509 certificate of the signer.','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(268, NULL,'10.1.1.8','Verify Digest Algorithm in SignerInfo','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(269, NULL,'10.1.1.8.1','The digestAlgorithm field value of the SignerInfo is in accordance with Table 3-2 of SP80078','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(270, NULL,'10.1.1.8.2','The digestAlgorithm field value of the SignerInfo matches the value present in the digestAlgorithms field of the SignedData.','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(271, NULL,'10.1.1.9','The value of the hash obtained from the message digest attribute of the signedAttrs of the SignerInfo is identical to that obtained after hashing the concatenated contents of the CHUID, excluding the asymmetric digital signature field and the Buffer Length field, if present.','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(272, NULL,'10.1.1.10','The value of the subject DN obtained from the certificate in the certificates field in the SignedData is identical to that obtained from the pivSigner-DN attribute of the signedAttrs of the SignerInfo.','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(273, NULL,'10.1.1.12','The signatureAlgorithm field specified in the SignerInfo field for RSA with PKCS #1 v1.5 padding specifies the rsaEncryption OID (as per Section 3.2 of RFC 3370) and for ECDSA and RSA with PSS padding, the signatureAlgorithm shall be in accordance with Table 3-3 of SP800-78-4.','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(274, NULL,'10.1.1.13','The certificate from the cert bag succesfully validates the CMS signature.','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(275, NULL,'10.2 Fingerprint','Off-Card Comparison Biometric Fingerprint','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(276, NULL,'10.2.1','Signature Block Contents','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(277, NULL,'10.2.1.1','CBEFF_SIGNATURE_BLOCK is present in the biometric CBEFF structure containing an asymmetric digital signature that is implemented as a SignedData type according to RFC 5652.','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(278, NULL,'10.2.1.2','PKCS#7 version is set to 3','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(279, NULL,'10.2.1.3','digestAlgorithms field value of the SignedData is in accordance with Table 3-2 of SP80078.','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(280, NULL,'10.2.1.4','Encapsulated content is absent and eContentType is id-PIV-CHUIDSecurityObject for CHUID and id-PIV-biometricObject for biometric objects in encapContentInfo','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(281, NULL,'10.2.1.5','The crls field is omitted from the SignedData.','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(282, NULL,'10.2.1.6','The signerInfos field in the SignedData contains a single SignerInfo.','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(283, NULL,'10.2.1.7.1','SignerId uses ths IssuerAndSerialNumber choice','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(284, NULL,'10.2.1.7.2','Issuer and Serial in the signer info corresponds to the issuer and serial values in the signer certificate','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(285, NULL,'10.2.1.8','Verify Digest Algorithm in SignerInfo','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(286, NULL,'10.2.1.8.1','The digestAlgorithm field value of the SignerInfo is in accordance with Table 3-2 of SP 800-78','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(287, NULL,'10.2.1.8.2','digestAlgorithm field value of the SignerInfo matches the value present in the digestAlgorithms field of the SignedData.','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(288, NULL,'10.2.1.9','Message digest from signed attributes bag matches the digest over Fingerprint biometric data (excluding contents of digital signature field)','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(289, NULL,'10.2.1.10','Value of the subject DN obtained from the certificate in the certificates field in the SignedData is identical to that obtained from the pivSigner-DN attribute of the signedAttrs of the SignerInfo.','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(290, NULL,'10.2.1.11','Signature algorithm value for RSA with PKCS #1 v1.5 padding specifies the rsaEncryption OID (as per Section 3.2 of RFC 3370) and for ECDSA and RSA with PSS padding, the signatureAlgorithm is in accordance with Table 3-3 of SP80078.','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(291, NULL,'10.2.1.12','Certificates field in the SignedData contains a single certificate that can be used to verify the digital signature in the SignerInfo. If the certificates field is omitted, then the certificates field of the SignedData for the CHUID contains the certificate that can be used to verify the digital signature.','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(292, NULL,'10.2.1.13','The content signing certificate contains id-piv-content-signing  EKU extension.','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(293, NULL,'10.2.1.14','The signed attribute pivFASC-N matches FASC-N read from CHUID container.','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(294, NULL,'10.2.1.15','The signed attribute entryUUID matches GUID read from CHUID container.','CARDHOLDER_FINGERPRINTS_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(295, NULL,'10.3 Facial Image','Biometric Facial Image','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(296, NULL,'10.3.1','Signature Block Contents','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(297, NULL,'10.3.1.1','CBEFF_SIGNATURE_BLOCK is present in the biometric CBEFF structure containing an asymmetric digital signature that is implemented as a SignedData type according to RFC 5652.','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(298, NULL,'10.3.1.2','PKCS#7 version is set to 3','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(299, NULL,'10.3.1.3','digestAlgorithms field value of the SignedData is in accordance with Table 3-2 of SP80078.','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(300, NULL,'10.3.1.4','Ensure encapsulated content is absent and eContentType is id-PIV-CHUIDSecurityObject for CHUID and id-PIV-biometricObject for biometric objects in encapContentInfo','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(301, NULL,'10.3.1.5','The crls field is omitted from the SignedData.','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(302, NULL,'10.3.1.6','The signerInfos field in the SignedData contains a single SignerInfo.','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(303, NULL,'10.3.1.7.1','SignerId uses ths IssuerAndSerialNumber choice','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(304, NULL,'10.3.1.7.2','Issuer and Serial in the signer info corresponds to the issuer and serial values in the signer certificate','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(305, NULL,'10.3.1.8','Verify Digest Algorithm in SignerInfo','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(306, NULL,'10.3.1.8.1','The digestAlgorithm field value of the SignerInfo is in accordance with Table 3-2 of SP 800-78','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(307, NULL,'10.3.1.8.2','digestAlgorithm field value of the SignerInfo matches the value present in the digestAlgorithms field of the SignedData.','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(308, NULL,'10.3.1.9','Message digest from signed attributes bag matches the digest over Facial Image biometric data (excluding contents of digital signature field)','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(309, NULL,'10.3.1.10','Value of the subject DN obtained from the certificate in the certificates field in the SignedData is identical to that obtained from the pivSigner-DN attribute of the signedAttrs of the SignerInfo.','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(310, NULL,'10.3.1.11','Signature algorithm value for RSA with PKCS #1 v1.5 padding specifies the rsaEncryption OID (as per Section 3.2 of RFC 3370) and for ECDSA and RSA with PSS padding, the signatureAlgorithm is in accordance with Table 3-3 of SP80078.','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(311, NULL,'10.3.1.12','Certificates field in the SignedData contains a single certificate that can be used to verify the digital signature in the SignerInfo. If the certificates field is omitted, then the certificates field of the SignedData for the CHUID contains the certificate that can be used to verify the digital signature.','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(312, NULL,'10.3.1.13','The content signing certificate contains id-piv-content-signing or directly-asserted id-fpki-pivi-content-signing (for PIV-I) EKU extension.','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(313, NULL,'10.3.1.14','The signed attribute pivFASC-N matches FASC-N read from CHUID container.','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(314, NULL,'10.3.1.15','The signed attribute entryUUID matches GUID read from CHUID container.','CARDHOLDER_FACIAL_IMAGE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(315, NULL,'10.4 Security Object','Security Object','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(316, NULL,'10.4.1','Data Integrity','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(317, NULL,'10.4.1.1','The actual hash of the data elements on the PIV card are identical to their corresponding hash values present in the security object.','SECURITY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(318, NULL,'10.4.2','Signature Block Contents','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(319, NULL,'10.4.2.1','Verify that the asymmetric digital field contains a CMS signed data object','SECURITY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(320, NULL,'10.4.2.2','Confirm that version of signed data structure is 1','SECURITY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(321, NULL,'10.4.2.3','Verify that eContent contains a security object','SECURITY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(322, NULL,'10.4.2.4','The eContent field contains a correctly formatted ldsSecurityobject and the eContentType asserts id-icao-ldsSecurityObject in encapContentInfo.','SECURITY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(323, NULL,'10.4.2.5','The certificates field is omitted from the SignedData.','SECURITY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(324, NULL,'10.4.2.6','digestAlgorithm field value of the SignerInfo is in accordance with Table 3-2 of SP 800-78','SECURITY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(325, NULL,'10.4.2.7','The signatureAlgorithm field specified in the SignerInfo field for RSA with PKCS #1 v1.5 padding specifies the rsaEncryption OID (as per Section 3.2 of RFC 3370) and for ECDSA and RSA with PSS padding, the signatureAlgorithm shall be in accordance with Table 3-3 of SP80078.','SECURITY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(326, NULL,'10.4.2.8','The signature in the SignerInfo corresponds to the signed security object and that it is it signed with the certificate that is used to sign the CHUID.','SECURITY_OBJECT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(327, NULL,'10.5 Iris','Biometric Iris','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(328, NULL,'10.5.1','Signature Block Contents','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(329, NULL,'10.5.1.1','CBEFF_SIGNATURE_BLOCK is present in the biometric CBEFF structure containing an asymmetric digital signature that is implemented as a SignedData type according to RFC 5652.','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(330, NULL,'10.5.1.2','PKCS#7 version is set to 3','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(331, NULL,'10.5.1.3','digestAlgorithms field value of the SignedData is in accordance with Table 3-2 of SP80078.','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(332, NULL,'10.5.1.4','Encapsulated content is absent and eContentType is id-PIV-CHUIDSecurityObject for CHUID and id-PIV-biometricObject for biometric objects in encapContentInfo','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(333, NULL,'10.5.1.5','The crls field is omitted from the SignedData.','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(334, NULL,'10.5.1.6','The signerInfos field in the SignedData contains a single SignerInfo.','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(335, NULL,'10.5.1.6.1','SignerId uses ths IssuerAndSerialNumber choice','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(336, NULL,'10.5.1.6.2','Issuer and Serial in the signer info corresponds to the issuer and serial values in the signer certificate','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(337, NULL,'10.5.1.7','Verify Digest Algorithm in SignerInfo','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(338, NULL,'10.5.1.7.1','digestAlgorithm field value of the SignerInfo is in accordance with Table 3-2 of SP 800-78','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(339, NULL,'10.5.1.7.2','digestAlgorithm field value of the SignerInfo matches the value present in the digestAlgorithms field of the SignedData.','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(340, NULL,'10.5.1.8','Message digest from signed attributes bag matches the digest over Fingerprint biometric data (excluding contents of digital signature field)','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(341, NULL,'10.5.1.9','Value of the subject DN obtained from the certificate in the certificates field in the SignedData is identical to that obtained from the pivSigner-DN attribute of the signedAttrs of the SignerInfo.','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(342, NULL,'10.5.1.10','Signature algorithm value for RSA with PKCS #1 v1.5 padding specifies the rsaEncryption OID (as per Section 3.2 of RFC 3370) and for ECDSA and RSA with PSS padding, the signatureAlgorithm is in accordance with Table 3-3 of SP80078.','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(343, NULL,'10.5.1.11','Certificates field in the SignedData contains a single certificate that can be used to verify the digital signature in the SignerInfo. If the certificates field is omitted, then the certificates field of the SignedData for the CHUID contains the certificate that can be used to verify the digital signature.','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(344, NULL,'10.5.1.12','The content signing certificate contains id-piv-content-signing or directly-asserted id-fpki-pivi-content-signing (for PIV-I) EKU extension.','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(345, NULL,'10.5.1.13','The signed attribute pivFASC-N matches FASC-N read from CHUID container.','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(346, NULL,'10.5.1.14','The signed attribute entryUUID matches GUID read from CHUID container.','CARDHOLDER_IRIS_IMAGES_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(347, NULL,'11 X.509 Certificate Profiles','PKI Certificate Profile Test Assertions','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(348, NULL,'11.1 PIV Auth Cert','PIV Authentication Certificate','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(349, NULL,'11.1.1','Algorithm Conformance','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(350, NULL,'11.1.1.1','The signatureAlgorithm value is in accordance with Table 3-3 of SP80078. If the algorithm value is id-RSASSA-PSS, verify that the signature->parameters field is populated with SHA-256 (OID = 2.16.840.1.101.3.4.2.1). For the other RSA algorithms, the parameters field is populated with NULL. For ECDSA, the parameters field is absent.','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(351, NULL,'11.1.1.2','The PIV authentication key is generated using an allowed asymmetric key algorithm.','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(352, NULL,'11.1.1.3','The key size and types used are in accordance with Table 3-1 of SP 800-78-4.','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(353, NULL,'11.1.2','Data Integrity Checks','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(354, NULL,'11.1.2.1','Key Usage','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(355, NULL,'11.1.2.1.1','Key Usage extension is present','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(356, NULL,'11.1.2.1.2','digitalSignature bit has been set','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(357, NULL,'11.1.2.1.3','Confirm no other keyUsage bits are set.','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(358, NULL,'11.1.2.2','A certificate policies extension is present.','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(359, NULL,'11.1.2.2.1','A policyIdentifier field in the certificatePolicies extension asserts id-fpki-common-authentication.','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(360, NULL,'11.1.2.3','OCSP','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(361, NULL,'11.1.2.3.1','authorityInformationAccess extension is present','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(362, NULL,'11.1.2.3.2','An accessMethod containing id-ad-ocsp is present.','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(363, NULL,'11.1.2.3.3','The accessLocation for the id-ad-ocsp AccessMethod is of type uniformResourceIdentifier.','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(364, NULL,'11.1.2.3.4','The URI scheme for id-ad-ocsp AccessLocation is "http" (not "https")','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(365, NULL,'11.1.2.4','PIV interim extension not tested in PIV-I','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(366, NULL,'11.1.2.5','Private key corresponds to the public key contained in the certificate as the signature verification succeeds.','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(367, NULL,'11.1.2.6','Subject Alternate Name','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(368, NULL,'11.1.2.6.1','Not tested for PIV-I. GeneralName field exists that contains an otherName with a type-id asserting the pivFASC-N OID. The value field of this otherName contains the FASC-N for the cardholder which matches the FASC-N obtained from parsing the CHUID.','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(369, NULL,'11.1.2.6.2','GeneralName field exists that contain a URI asserting a Card UUID as specified by [RFC4122, Section 3] that matches the GUID value in the CHUID.','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(370, NULL,'11.1.2.7','Expiration date of the PIV authentication certificate is not beyond the expiration date of the CHUID i.e. the PIV card.','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(371, NULL,'11.1.2.8','Exponent of the RSA asymmetric key for PIV authentication is equal to 65,537.','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(372, NULL,'11.1.2.9','CRL Distribution Point','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(373, NULL,'11.1.2.9.1','The URI scheme for id-ce-cRLDistributionPoint AccessLocation is "http" (not "https")','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(374, NULL,'11.1.2.9.2','URI points only to files with .crl extensions.','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(375, NULL,'11.1.2.10','Authority Information Access','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(376, NULL,'11.1.2.10.1','authorityInformationAccess extension is present','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(377, NULL,'11.1.2.10.2','An accessMethod containing id-ad-caIssuers is present','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(378, NULL,'11.1.2.10.3','The accessLocation for the id-ad-caIssuers AccessMethod is of type uniformResourceIdentifier.','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(379, NULL,'11.1.2.10.4','The URI scheme for id-ad-caIssuers AccessLocation is "http" (not "https")','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(380, NULL,'11.1.2.10.5','File has an extension of “.p7c” containing a certs-only CMS message (see RFC 3851)','X509_CERTIFICATE_FOR_PIV_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(381, NULL,'11.2 Digital Signature Cert','Digital Signature Certificate','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(382, NULL,'11.2.1','Algorithm Conformance','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(383, NULL,'11.2.1.1','The signatureAlgorithm value is in accordance with Table 3-3 of SP80078. If the algorithm value is id-RSASSA-PSS, verify that the signature->parameters field is populated with SHA-256 (OID = 2.16.840.1.101.3.4.2.1). For the other RSA algorithms, the parameters field is populated with NULL. For ECDSA, the parameters field is absent.','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(384, NULL,'11.2.1.2','The digital signature key is generated using an allowed asymmetric key algorithm.','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(385, NULL,'11.2.1.3','The key size used is in accordance with Table 3-1 of SP80078.','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(386, NULL,'11.2.2','Data Integrity Checks','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(387, NULL,'11.2.2.1','Key Usage','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(388, NULL,'11.2.2.1.1','Key Usage extension is present','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(389, NULL,'11.2.2.1.2','digitalSignature and nonRepudiation bits have been set.','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(390, NULL,'11.2.2.1.3','No other Key Usage bits are set.','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(391, NULL,'11.2.2.2','Private key corresponds to the public key contained in the certificate as the signature verification succeeds.','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(392, NULL,'11.2.2.3','Expiration date of the digital signature certificate is not beyond the expiration date of the CHUID i.e. the PIV card.','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(393, NULL,'11.2.2.4','Exponent of the RSA asymmetric key for digital signature is equal to 65,537.','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(394, NULL,'11.2.2.5','policyIdentifier field in the certificatePolicies extension asserts one of the following: id-fpki-common-hardware or id-fpki-common-High.','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(395, NULL,'11.2.2.6','CRL Distribution Point','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(396, NULL,'11.2.2.6.1','The URI scheme for id-ce-cRLDistributionPoint AccessLocation is "http" (not "https")','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(397, NULL,'11.2.2.6.2','URI points only to files with .crl extensions.','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(398, NULL,'11.2.2.7','Authority Information Access','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(399, NULL,'11.2.2.7.1','authorityInformationAccess extension is present','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(400, NULL,'11.2.2.7.2','An accessMethod containing id-ad-caIssuers is present','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(401, NULL,'11.2.2.7.3','The accessLocation for the id-ad-caIssuers AccessMethod is of type uniformResourceIdentifier.','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(402, NULL,'11.2.2.7.4','The URI scheme for id-ad-caIssuers AccessLocation is "http" (not "https")','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(403, NULL,'11.2.2.7.5','File has an extension of “.p7c” containing a certs-only CMS message (see RFC 3851)','X509_CERTIFICATE_FOR_DIGITAL_SIGNATURE_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(404, NULL,'11.3 Key Management Cert','Key Management Certificate','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(405, NULL,'11.3.1','Algorithm Conformance','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(406, NULL,'11.3.1.1','If the algorithm value is id-RSASSA-PSS, verify that the signature->parameters field is populated with SHA-256 (OID = 2.16.840.1.101.3.4.2.1). For the other RSA algorithms, the parameters field is populated with NULL. For ECDSA, the parameters field is absent.','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(407, NULL,'11.3.1.2','The key management key is generated using an allowed asymmetric key algorithm.','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(408, NULL,'11.3.1.3','The key sizes used are in accordance with Table 3-1 of SP80078.','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(409, NULL,'11.3.2','Data Integrity Checks','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(410, NULL,'11.3.2.1','Key Usage','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(411, NULL,'11.3.2.1.1','Key Usage extension is present','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(412, NULL,'11.3.2.1.1.1','If the public key algorithm is RSA, then the keyUsage extension asserts the keyEncipherment bit.','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(413, NULL,'11.3.2.1.1.2','If the algorithm is Elliptic Curve key, then the keyUsage extension asserts the keyAgreement bit.','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(414, NULL,'11.3.2.1.1.3','No other Key Usage bits are set.','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(415, NULL,'11.3.2.2','The private key corresponds to the public key contained in the certificate as the signature verification succeeds.','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(416, NULL,'11.3.2.3','Exponent of the RSA asymmetric key for key management is equal to 65,537.','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(417, NULL,'11.3.2.4','policyIdentifier field in the certificatePolicies extension asserts one of the following: id-fpki-common-hardware or id-fpki-common-High.','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(418, NULL,'11.3.2.5','CRL Distribution Point','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(419, NULL,'11.3.2.5.1','URI is present with the http scheme.','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(420, NULL,'11.3.2.5.2','URI points only to files with .crl extensions.','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(421, NULL,'11.3.2.6','Authority Information Access','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(422, NULL,'11.3.2.6.1','authorityInformationAccess extension is present','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(423, NULL,'11.3.2.6.2','An accessMethod containing id-ad-caIssuers is present','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(424, NULL,'11.3.2.6.3','The accessLocation for the id-ad-caIssuers AccessMethod is of type uniformResourceIdentifier.','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(425, NULL,'11.3.2.6.4','The URI scheme for id-ad-caIssuers AccessLocation is "http" (not "https")','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(426, NULL,'11.3.2.6.5','File has an extension of “.p7c” containing a certs-only CMS message (see RFC 3851)','X509_CERTIFICATE_FOR_KEY_MANAGEMENT_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(427, NULL,'11.4 Card Auth Cert','Card Authentication Certificate','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(428, NULL,'11.4.1','Algorithm Conformance','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(429, NULL,'11.4.1.1','If the algorithm value is id-RSASSA-PSS, verify that the signature->parameters field is populated with SHA-256 (OID = 2.16.840.1.101.3.4.2.1). For the other RSA algorithms, the parameters field is populated with NULL. For ECDSA, the parameters field is absent.','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(430, NULL,'11.4.1.2','The card authentication key is generated using the allowed asymmetric key algorithm.','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(431, NULL,'11.4.1.3','The key sizes used are in accordance with Table 3-1 of SP80078.','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(432, NULL,'11.4.2','Data Integrity Checks','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(433, NULL,'11.4.2.1','Key Usage','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(434, NULL,'11.4.2.1.1','Key Usage extension is present','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(435, NULL,'11.4.2.1.2','The digitalSignature bit has been set.','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(436, NULL,'11.4.2.1.3','No other bits have been set.','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(437, NULL,'11.4.2.2','policyIdentifier field in the certificatePolicies extension asserts id-fpki-common-cardAuth.','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(438, NULL,'11.4.2.3','Extended Key Usage','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(439, NULL,'11.4.2.3.1','Extended key usage (extKeyUsage) extension is present and maked critical','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(440, NULL,'11.4.2.3.2','Extended key usage (extKeyUsage) extension asserts id-PIV-cardAuth','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(441, NULL,'11.4.2.3.3','Extended key usage extension does not assert any other OIDs.','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(442, NULL,'11.4.2.4','Authority Information Access','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(443, NULL,'11.4.2.4.1','authorityInformationAccess extension is present','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(444, NULL,'11.4.2.4.2','An accessMethod containing id-ad-caIssuers is present','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(445, NULL,'11.4.2.4.3','The accessLocation for the id-ad-caIssuers AccessMethod is of type uniformResourceIdentifier.','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(446, NULL,'11.4.2.4.4','The URI scheme for id-ad-caIssuers AccessLocation is "http" (not "https")','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(447, NULL,'11.4.2.5','PIV interim extension not tested in PIV-I','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(448, NULL,'11.4.2.6','The private key corresponds to the public key contained in the certificate as the signature verification succeeds.','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(449, NULL,'11.4.2.7','Subject Alternate Name','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(450, NULL,'11.4.2.7.1','GeneralName field exists that contains an otherName with a type-id asserting the pivFASC-N OID. The value field of this otherName contains the FASC-N for the cardholder which matches the FASC-N obtained from parsing the CHUID.','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(451, NULL,'11.4.2.7.2','GeneralName field exists that contain a URI asserting a Card UUID as specified by [RFC4122, Section 3] that matches the GUID value in the CHUID.','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(452, NULL,'11.4.2.7.3','No other name forms appear in the subjectAltName extension.','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(453, NULL,'11.4.2.8','Exponent of the RSA asymmetric key for key management is equal to 65,537.','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(454, NULL,'11.4.2.9','CRL Distribution Point','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(455, NULL,'11.4.2.9.1','The URI scheme for id-ce-cRLDistributionPoint AccessLocation is "http" (not "https")','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(456, NULL,'11.4.2.9.2','URI points only to files with .crl extensions.','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(457, NULL,'11.4.2.10','Authority Information Access (85B-4)','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(458, NULL,'11.4.2.10.5','File has an extension of “.p7c” containing a certs-only CMS message (see RFC 3851)','X509_CERTIFICATE_FOR_CARD_AUTHENTICATION_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(459, NULL,'11.5 Secure Messaging CVC','Secure Messaging Card Verifiable Certificate','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(460, NULL,'11.5.1','Secure Messaging CVC Profile Conformance','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(461, NULL,'11.5.2','Algorithm Conformance','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(462, NULL,'11.5.3','Data Integrity Checks','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(463, NULL,'11.6 Intermediate CVC','Intermediate Card Verifiable Certificate','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(464, NULL,'11.6.1','Intermediate CVC Profile Conformance','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(465, NULL,'11.6.2','Algorithm Conformance','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(466, NULL,'11.7 Content Signing Cert','X.509 Certificate for Content Signing','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(467, NULL,'11.7.1','Algorithm Conformance','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(468, NULL,'11.7.1.1','If the algorithm value is id-RSASSA-PSS, verify that the signature->parameters field is populated with SHA-256 (OID = 2.16.840.1.101.3.4.2.1). For the other RSA algorithms, the parameters field is populated with NULL. For ECDSA, the parameters field is absent.','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(469, NULL,'11.7.1.2','The card authentication key is generated using the allowed asymmetric key algorithm.','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(470, NULL,'11.7.1.3','The key sizes used are in accordance with Table 3-1 of SP80078.','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(471, NULL,'11.7.2','Data Integrity Checks','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(472, NULL,'11.7.2.1','Key Usage','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(473, NULL,'11.7.2.1.1','Key Usage extension is present','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(474, NULL,'11.7.2.1.2','digitalSignature and nonRepudiation bits have been set','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(475, NULL,'11.7.2.1.3','No other bits have been set.','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(476, NULL,'11.7.2.2','X.509 Certificate for Content Signing is not expired.','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(477, NULL,'11.7.2.3','Exponent of the RSA asymmetric key for the X.509 Certificate for Content Signing is equal to 65,537.','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(478, NULL,'11.7.2.4','Certificate Policy and Extended Key Usage','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(479, NULL,'11.7.2.4.1','policyIdentifier field in the certificatePolicies extension asserts the id-fpki-common-piv-contentSigning policy of [COMMON] (OID = 2.16.840.1.101.3.2.1.3.39)','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(480, NULL,'11.7.2.4.2','extended key usage (extKeyUsage) asserts id-PIV-content-signing.','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(481, NULL,'11.7.2.5','CRL Distribution Point','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(482, NULL,'11.7.2.5.1','The URI scheme for id-ce-cRLDistributionPoint AccessLocation is "http" (not "https")','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(483, NULL,'11.7.2.5.2','URI points only to files with .crl extensions.','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(484, NULL,'11.7.2.6','Authority Information Access','',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(485, NULL,'11.7.2.6.1','authorityInformationAccess extension is present','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(486, NULL,'11.7.2.6.2','An accessMethod containing id-ad-caIssuers is present','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(487, NULL,'11.7.2.6.3','The accessLocation for the id-ad-caIssuers AccessMethod is of type uniformResourceIdentifier.','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(488, NULL,'11.7.2.6.4','The URI scheme for id-ad-caIssuers AccessLocation is "http" (not "https")','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(489, NULL,'11.7.2.6.5','File has an extension of “.p7c” containing a certs-only CMS message (see RFC 3851)','CARD_HOLDER_UNIQUE_IDENTIFIER_OID',NULL, 1, 1);
INSERT INTO "TestsToSteps" VALUES(1, 1,4,0,NULL);
INSERT INTO "TestsToSteps" VALUES(2, 2,5,0,NULL);
INSERT INTO "TestsToSteps" VALUES(3, 3,6,0,NULL);
INSERT INTO "TestsToSteps" VALUES(4, 4,7,0,NULL);
INSERT INTO "TestsToSteps" VALUES(5, 6,8,0,NULL);
INSERT INTO "TestsToSteps" VALUES(6, 7,9,0,NULL);
INSERT INTO "TestsToSteps" VALUES(7, 8,10,0,NULL);
INSERT INTO "TestsToSteps" VALUES(8, 9,11,0,NULL);
INSERT INTO "TestsToSteps" VALUES(9, 10,12,0,NULL);
INSERT INTO "TestsToSteps" VALUES(10, 28,13,0,NULL);
INSERT INTO "TestsToSteps" VALUES(11, 60,14,0,NULL);
INSERT INTO "TestsToSteps" VALUES(12, 1,17,0,NULL);
INSERT INTO "TestsToSteps" VALUES(13, 2,18,0,NULL);
INSERT INTO "TestsToSteps" VALUES(14, 3,19,0,NULL);
INSERT INTO "TestsToSteps" VALUES(15, 4,20,0,NULL);
INSERT INTO "TestsToSteps" VALUES(16, 60,21,0,NULL);
INSERT INTO "TestsToSteps" VALUES(17, 15,22,0,NULL);
INSERT INTO "TestsToSteps" VALUES(18, 47,23,0,NULL);
INSERT INTO "TestsToSteps" VALUES(19, 16,24,0,NULL);
INSERT INTO "TestsToSteps" VALUES(20, 48,25,0,NULL);
INSERT INTO "TestsToSteps" VALUES(21, 49,26,0,NULL);
INSERT INTO "TestsToSteps" VALUES(22, 50,27,0,NULL);
INSERT INTO "TestsToSteps" VALUES(23, 51,28,0,NULL);
INSERT INTO "TestsToSteps" VALUES(24, 18,29,0,NULL);
INSERT INTO "TestsToSteps" VALUES(25, 19,30,0,NULL);
INSERT INTO "TestsToSteps" VALUES(26, 52,31,0,NULL);
INSERT INTO "TestsToSteps" VALUES(27, 53,32,0,NULL);
INSERT INTO "TestsToSteps" VALUES(28, 54,33,0,NULL);
INSERT INTO "TestsToSteps" VALUES(29, 55,34,0,NULL);
INSERT INTO "TestsToSteps" VALUES(30, 14,35,0,NULL);
INSERT INTO "TestsToSteps" VALUES(31, 22,36,0,NULL);
INSERT INTO "TestsToSteps" VALUES(32, 20,38,0,NULL);
INSERT INTO "TestsToSteps" VALUES(33, 21,39,0,NULL);
INSERT INTO "TestsToSteps" VALUES(34, 18,40,0,NULL);
INSERT INTO "TestsToSteps" VALUES(35, 29,41,0,NULL);
INSERT INTO "TestsToSteps" VALUES(36, 28,42,0,NULL);
INSERT INTO "TestsToSteps" VALUES(37, 1,45,0,NULL);
INSERT INTO "TestsToSteps" VALUES(38, 2,46,0,NULL);
INSERT INTO "TestsToSteps" VALUES(39, 3,47,0,NULL);
INSERT INTO "TestsToSteps" VALUES(40, 4,48,0,NULL);
INSERT INTO "TestsToSteps" VALUES(41, 60,49,0,NULL);
INSERT INTO "TestsToSteps" VALUES(42, 24,50,0,NULL);
INSERT INTO "TestsToSteps" VALUES(43, 25,51,0,NULL);
INSERT INTO "TestsToSteps" VALUES(44, 26,52,0,NULL);
INSERT INTO "TestsToSteps" VALUES(45, 27,53,0,NULL);
INSERT INTO "TestsToSteps" VALUES(46, 28,54,0,NULL);
INSERT INTO "TestsToSteps" VALUES(47, 1,57,0,NULL);
INSERT INTO "TestsToSteps" VALUES(48, 2,58,0,NULL);
INSERT INTO "TestsToSteps" VALUES(49, 3,59,0,NULL);
INSERT INTO "TestsToSteps" VALUES(50, 4,60,0,NULL);
INSERT INTO "TestsToSteps" VALUES(51, 60,61,0,NULL);
INSERT INTO "TestsToSteps" VALUES(52, 28,62,0,NULL);
INSERT INTO "TestsToSteps" VALUES(53, 1,65,0,NULL);
INSERT INTO "TestsToSteps" VALUES(54, 2,66,0,NULL);
INSERT INTO "TestsToSteps" VALUES(55, 3,67,0,NULL);
INSERT INTO "TestsToSteps" VALUES(56, 4,68,0,NULL);
INSERT INTO "TestsToSteps" VALUES(57, 60,69,0,NULL);
INSERT INTO "TestsToSteps" VALUES(58, 33,70,0,NULL);
INSERT INTO "TestsToSteps" VALUES(59, 56,71,0,NULL);
INSERT INTO "TestsToSteps" VALUES(60, 57,72,0,NULL);
INSERT INTO "TestsToSteps" VALUES(61, 34,73,0,NULL);
INSERT INTO "TestsToSteps" VALUES(62, 35,74,0,NULL);
INSERT INTO "TestsToSteps" VALUES(63, 36,75,0,NULL);
INSERT INTO "TestsToSteps" VALUES(64, 28,76,0,NULL);
INSERT INTO "TestsToSteps" VALUES(65, 1,79,0,NULL);
INSERT INTO "TestsToSteps" VALUES(66, 2,80,0,NULL);
INSERT INTO "TestsToSteps" VALUES(67, 3,81,0,NULL);
INSERT INTO "TestsToSteps" VALUES(68, 4,82,0,NULL);
INSERT INTO "TestsToSteps" VALUES(69, 60,83,0,NULL);
INSERT INTO "TestsToSteps" VALUES(70, 30,84,0,NULL);
INSERT INTO "TestsToSteps" VALUES(71, 31,85,0,NULL);
INSERT INTO "TestsToSteps" VALUES(72, 28,86,0,NULL);
INSERT INTO "TestsToSteps" VALUES(73, 1,89,0,NULL);
INSERT INTO "TestsToSteps" VALUES(74, 2,90,0,NULL);
INSERT INTO "TestsToSteps" VALUES(75, 3,91,0,NULL);
INSERT INTO "TestsToSteps" VALUES(76, 4,92,0,NULL);
INSERT INTO "TestsToSteps" VALUES(77, 60,93,0,NULL);
INSERT INTO "TestsToSteps" VALUES(78, 24,94,0,NULL);
INSERT INTO "TestsToSteps" VALUES(79, 25,95,0,NULL);
INSERT INTO "TestsToSteps" VALUES(80, 27,96,0,NULL);
INSERT INTO "TestsToSteps" VALUES(81, 26,97,0,NULL);
INSERT INTO "TestsToSteps" VALUES(82, 28,98,0,NULL);
INSERT INTO "TestsToSteps" VALUES(83, 1,101,0,NULL);
INSERT INTO "TestsToSteps" VALUES(84, 2,102,0,NULL);
INSERT INTO "TestsToSteps" VALUES(85, 3,103,0,NULL);
INSERT INTO "TestsToSteps" VALUES(86, 4,104,0,NULL);
INSERT INTO "TestsToSteps" VALUES(87, 60,105,0,NULL);
INSERT INTO "TestsToSteps" VALUES(88, 24,106,0,NULL);
INSERT INTO "TestsToSteps" VALUES(89, 25,107,0,NULL);
INSERT INTO "TestsToSteps" VALUES(90, 26,108,0,NULL);
INSERT INTO "TestsToSteps" VALUES(91, 27,109,0,NULL);
INSERT INTO "TestsToSteps" VALUES(92, 28,110,0,NULL);
INSERT INTO "TestsToSteps" VALUES(93, 1,113,0,NULL);
INSERT INTO "TestsToSteps" VALUES(94, 2,114,0,NULL);
INSERT INTO "TestsToSteps" VALUES(95, 3,115,0,NULL);
INSERT INTO "TestsToSteps" VALUES(96, 4,116,0,NULL);
INSERT INTO "TestsToSteps" VALUES(97, 60,117,0,NULL);
INSERT INTO "TestsToSteps" VALUES(98, 24,118,0,NULL);
INSERT INTO "TestsToSteps" VALUES(99, 25,119,0,NULL);
INSERT INTO "TestsToSteps" VALUES(100, 26,120,0,NULL);
INSERT INTO "TestsToSteps" VALUES(101, 27,121,0,NULL);
INSERT INTO "TestsToSteps" VALUES(102, 28,122,0,NULL);
INSERT INTO "TestsToSteps" VALUES(103, 1,125,0,NULL);
INSERT INTO "TestsToSteps" VALUES(104, 2,126,0,NULL);
INSERT INTO "TestsToSteps" VALUES(105, 3,127,0,NULL);
INSERT INTO "TestsToSteps" VALUES(106, 4,128,0,NULL);
INSERT INTO "TestsToSteps" VALUES(107, 60,129,0,NULL);
INSERT INTO "TestsToSteps" VALUES(108, 39,130,0,NULL);
INSERT INTO "TestsToSteps" VALUES(109, 58,131,0,NULL);
INSERT INTO "TestsToSteps" VALUES(110, 40,132,0,NULL);
INSERT INTO "TestsToSteps" VALUES(111, 41,133,0,NULL);
INSERT INTO "TestsToSteps" VALUES(112, 1,136,0,NULL);
INSERT INTO "TestsToSteps" VALUES(113, 2,137,0,NULL);
INSERT INTO "TestsToSteps" VALUES(114, 3,138,0,NULL);
INSERT INTO "TestsToSteps" VALUES(115, 4,139,0,NULL);
INSERT INTO "TestsToSteps" VALUES(116, 44,140,0,NULL);
INSERT INTO "TestsToSteps" VALUES(117, 45,141,0,NULL);
INSERT INTO "TestsToSteps" VALUES(118, 59,142,0,NULL);
INSERT INTO "TestsToSteps" VALUES(119, 173,143,0,NULL);
INSERT INTO "TestsToSteps" VALUES(120, 46,144,0,NULL);
INSERT INTO "TestsToSteps" VALUES(121, 60,145,0,NULL);
INSERT INTO "TestsToSteps" VALUES(122, 173,148,0,NULL);
INSERT INTO "TestsToSteps" VALUES(123, 173,149,0,NULL);
INSERT INTO "TestsToSteps" VALUES(124, 173,150,0,NULL);
INSERT INTO "TestsToSteps" VALUES(125, 61,157,0,NULL);
INSERT INTO "TestsToSteps" VALUES(126, 62,158,0,NULL);
INSERT INTO "TestsToSteps" VALUES(127, 63,159,0,NULL);
INSERT INTO "TestsToSteps" VALUES(128, 109,160,0,NULL);
INSERT INTO "TestsToSteps" VALUES(129, 64,161,0,NULL);
INSERT INTO "TestsToSteps" VALUES(130, 65,163,0,NULL);
INSERT INTO "TestsToSteps" VALUES(131, 66,164,0,NULL);
INSERT INTO "TestsToSteps" VALUES(132, 67,165,0,NULL);
INSERT INTO "TestsToSteps" VALUES(133, 99,166,0,NULL);
INSERT INTO "TestsToSteps" VALUES(134, 100,167,0,NULL);
INSERT INTO "TestsToSteps" VALUES(135, 64,168,0,NULL);
INSERT INTO "TestsToSteps" VALUES(136, 102,169,0,NULL);
INSERT INTO "TestsToSteps" VALUES(137, 103,170,0,NULL);
INSERT INTO "TestsToSteps" VALUES(138, 104,171,0,NULL);
INSERT INTO "TestsToSteps" VALUES(139, 105,172,0,NULL);
INSERT INTO "TestsToSteps" VALUES(140, 107,174,0,NULL);
INSERT INTO "TestsToSteps" VALUES(141, 61,177,0,NULL);
INSERT INTO "TestsToSteps" VALUES(142, 62,178,0,NULL);
INSERT INTO "TestsToSteps" VALUES(143, 63,179,0,NULL);
INSERT INTO "TestsToSteps" VALUES(144, 109,180,0,NULL);
INSERT INTO "TestsToSteps" VALUES(145, 65,182,0,NULL);
INSERT INTO "TestsToSteps" VALUES(146, 66,183,0,NULL);
INSERT INTO "TestsToSteps" VALUES(147, 67,184,0,NULL);
INSERT INTO "TestsToSteps" VALUES(148, 99,185,0,NULL);
INSERT INTO "TestsToSteps" VALUES(149, 100,186,0,NULL);
INSERT INTO "TestsToSteps" VALUES(150, 64,187,0,NULL);
INSERT INTO "TestsToSteps" VALUES(151, 102,188,0,NULL);
INSERT INTO "TestsToSteps" VALUES(152, 103,189,0,NULL);
INSERT INTO "TestsToSteps" VALUES(153, 104,190,0,NULL);
INSERT INTO "TestsToSteps" VALUES(154, 105,191,0,NULL);
INSERT INTO "TestsToSteps" VALUES(155, 107,193,0,NULL);
INSERT INTO "TestsToSteps" VALUES(156, 61,196,0,NULL);
INSERT INTO "TestsToSteps" VALUES(157, 62,197,0,NULL);
INSERT INTO "TestsToSteps" VALUES(158, 63,198,0,NULL);
INSERT INTO "TestsToSteps" VALUES(159, 109,199,0,NULL);
INSERT INTO "TestsToSteps" VALUES(160, 65,201,0,NULL);
INSERT INTO "TestsToSteps" VALUES(161, 66,202,0,NULL);
INSERT INTO "TestsToSteps" VALUES(162, 67,203,0,NULL);
INSERT INTO "TestsToSteps" VALUES(163, 99,204,0,NULL);
INSERT INTO "TestsToSteps" VALUES(164, 100,205,0,NULL);
INSERT INTO "TestsToSteps" VALUES(165, 64,206,0,NULL);
INSERT INTO "TestsToSteps" VALUES(166, 102,207,0,NULL);
INSERT INTO "TestsToSteps" VALUES(167, 103,208,0,NULL);
INSERT INTO "TestsToSteps" VALUES(168, 104,209,0,NULL);
INSERT INTO "TestsToSteps" VALUES(169, 105,210,0,NULL);
INSERT INTO "TestsToSteps" VALUES(170, 107,212,0,NULL);
INSERT INTO "TestsToSteps" VALUES(171, 69,215,0,NULL);
INSERT INTO "TestsToSteps" VALUES(172, 61,216,0,NULL);
INSERT INTO "TestsToSteps" VALUES(173, 71,217,0,NULL);
INSERT INTO "TestsToSteps" VALUES(174, 72,218,0,NULL);
INSERT INTO "TestsToSteps" VALUES(175, 72,219,0,NULL);
INSERT INTO "TestsToSteps" VALUES(176, 73,220,0,NULL);
INSERT INTO "TestsToSteps" VALUES(177, 74,221,0,NULL);
INSERT INTO "TestsToSteps" VALUES(178, 173,222,0,NULL);
INSERT INTO "TestsToSteps" VALUES(179, 173,223,0,NULL);
INSERT INTO "TestsToSteps" VALUES(180, 77,224,0,NULL);
INSERT INTO "TestsToSteps" VALUES(181, 78,225,0,NULL);
INSERT INTO "TestsToSteps" VALUES(182, 79,226,0,NULL);
INSERT INTO "TestsToSteps" VALUES(183, 80,228,0,NULL);
INSERT INTO "TestsToSteps" VALUES(184, 81,229,0,NULL);
INSERT INTO "TestsToSteps" VALUES(185, 82,230,0,NULL);
INSERT INTO "TestsToSteps" VALUES(186, 83,231,0,NULL);
INSERT INTO "TestsToSteps" VALUES(187, 108,232,0,NULL);
INSERT INTO "TestsToSteps" VALUES(188, 84,233,0,NULL);
INSERT INTO "TestsToSteps" VALUES(189, 85,234,0,NULL);
INSERT INTO "TestsToSteps" VALUES(190, 86,235,0,NULL);
INSERT INTO "TestsToSteps" VALUES(191, 87,236,0,NULL);
INSERT INTO "TestsToSteps" VALUES(192, 88,237,0,NULL);
INSERT INTO "TestsToSteps" VALUES(193, 89,238,0,NULL);
INSERT INTO "TestsToSteps" VALUES(194, 85,240,0,NULL);
INSERT INTO "TestsToSteps" VALUES(195, 89,241,0,NULL);
INSERT INTO "TestsToSteps" VALUES(196, 173,243,0,NULL);
INSERT INTO "TestsToSteps" VALUES(197, 90,246,0,NULL);
INSERT INTO "TestsToSteps" VALUES(198, 91,247,0,NULL);
INSERT INTO "TestsToSteps" VALUES(199, 92,248,0,NULL);
INSERT INTO "TestsToSteps" VALUES(200, 93,249,0,NULL);
INSERT INTO "TestsToSteps" VALUES(201, 173,251,0,NULL);
INSERT INTO "TestsToSteps" VALUES(202, 173,252,0,NULL);
INSERT INTO "TestsToSteps" VALUES(203, 173,253,0,NULL);
INSERT INTO "TestsToSteps" VALUES(204, 173,254,0,NULL);
INSERT INTO "TestsToSteps" VALUES(205, 173,256,0,NULL);
INSERT INTO "TestsToSteps" VALUES(206, 173,257,0,NULL);
INSERT INTO "TestsToSteps" VALUES(207, 110,261,0,NULL);
INSERT INTO "TestsToSteps" VALUES(208, 111,262,0,NULL);
INSERT INTO "TestsToSteps" VALUES(209, 112,263,0,NULL);
INSERT INTO "TestsToSteps" VALUES(210, 114,264,0,NULL);
INSERT INTO "TestsToSteps" VALUES(211, 115,265,0,NULL);
INSERT INTO "TestsToSteps" VALUES(212, 116,266,0,NULL);
INSERT INTO "TestsToSteps" VALUES(213, 117,267,0,NULL);
INSERT INTO "TestsToSteps" VALUES(214, 131,269,0,NULL);
INSERT INTO "TestsToSteps" VALUES(215, 133,270,0,NULL);
INSERT INTO "TestsToSteps" VALUES(216, 120,271,0,NULL);
INSERT INTO "TestsToSteps" VALUES(217, 121,272,0,NULL);
INSERT INTO "TestsToSteps" VALUES(218, 122,273,0,NULL);
INSERT INTO "TestsToSteps" VALUES(219, 123,274,0,NULL);
INSERT INTO "TestsToSteps" VALUES(220, 110,277,0,NULL);
INSERT INTO "TestsToSteps" VALUES(221, 111,278,0,NULL);
INSERT INTO "TestsToSteps" VALUES(222, 112,279,0,NULL);
INSERT INTO "TestsToSteps" VALUES(223, 114,280,0,NULL);
INSERT INTO "TestsToSteps" VALUES(224, 115,281,0,NULL);
INSERT INTO "TestsToSteps" VALUES(225, 116,282,0,NULL);
INSERT INTO "TestsToSteps" VALUES(226, 117,283,0,NULL);
INSERT INTO "TestsToSteps" VALUES(227, 118,284,0,NULL);
INSERT INTO "TestsToSteps" VALUES(228, 131,286,0,NULL);
INSERT INTO "TestsToSteps" VALUES(229, 133,287,0,NULL);
INSERT INTO "TestsToSteps" VALUES(230, 120,288,0,NULL);
INSERT INTO "TestsToSteps" VALUES(231, 121,289,0,NULL);
INSERT INTO "TestsToSteps" VALUES(232, 122,290,0,NULL);
INSERT INTO "TestsToSteps" VALUES(233, 123,291,0,NULL);
INSERT INTO "TestsToSteps" VALUES(234, 124,292,0,NULL);
INSERT INTO "TestsToSteps" VALUES(235, 138,294,0,NULL);
INSERT INTO "TestsToSteps" VALUES(236, 110,297,0,NULL);
INSERT INTO "TestsToSteps" VALUES(237, 111,298,0,NULL);
INSERT INTO "TestsToSteps" VALUES(238, 112,299,0,NULL);
INSERT INTO "TestsToSteps" VALUES(239, 114,300,0,NULL);
INSERT INTO "TestsToSteps" VALUES(240, 115,301,0,NULL);
INSERT INTO "TestsToSteps" VALUES(241, 116,302,0,NULL);
INSERT INTO "TestsToSteps" VALUES(242, 117,303,0,NULL);
INSERT INTO "TestsToSteps" VALUES(243, 118,304,0,NULL);
INSERT INTO "TestsToSteps" VALUES(244, 131,306,0,NULL);
INSERT INTO "TestsToSteps" VALUES(245, 133,307,0,NULL);
INSERT INTO "TestsToSteps" VALUES(246, 120,308,0,NULL);
INSERT INTO "TestsToSteps" VALUES(247, 121,309,0,NULL);
INSERT INTO "TestsToSteps" VALUES(248, 122,310,0,NULL);
INSERT INTO "TestsToSteps" VALUES(249, 123,311,0,NULL);
INSERT INTO "TestsToSteps" VALUES(250, 124,312,0,NULL);
INSERT INTO "TestsToSteps" VALUES(251, 138,314,0,NULL);
INSERT INTO "TestsToSteps" VALUES(252, 42,317,0,NULL);
INSERT INTO "TestsToSteps" VALUES(253, 119,319,0,NULL);
INSERT INTO "TestsToSteps" VALUES(254, 126,320,0,NULL);
INSERT INTO "TestsToSteps" VALUES(255, 127,321,0,NULL);
INSERT INTO "TestsToSteps" VALUES(256, 128,322,0,NULL);
INSERT INTO "TestsToSteps" VALUES(257, 129,323,0,NULL);
INSERT INTO "TestsToSteps" VALUES(258, 131,324,0,NULL);
INSERT INTO "TestsToSteps" VALUES(259, 122,325,0,NULL);
INSERT INTO "TestsToSteps" VALUES(260, 123,326,0,NULL);
INSERT INTO "TestsToSteps" VALUES(261, 110,329,0,NULL);
INSERT INTO "TestsToSteps" VALUES(262, 111,330,0,NULL);
INSERT INTO "TestsToSteps" VALUES(263, 113,331,0,NULL);
INSERT INTO "TestsToSteps" VALUES(264, 114,332,0,NULL);
INSERT INTO "TestsToSteps" VALUES(265, 115,333,0,NULL);
INSERT INTO "TestsToSteps" VALUES(266, 116,334,0,NULL);
INSERT INTO "TestsToSteps" VALUES(267, 117,335,0,NULL);
INSERT INTO "TestsToSteps" VALUES(268, 118,336,0,NULL);
INSERT INTO "TestsToSteps" VALUES(269, 131,338,0,NULL);
INSERT INTO "TestsToSteps" VALUES(270, 133,339,0,NULL);
INSERT INTO "TestsToSteps" VALUES(271, 120,340,0,NULL);
INSERT INTO "TestsToSteps" VALUES(272, 121,341,0,NULL);
INSERT INTO "TestsToSteps" VALUES(273, 122,342,0,NULL);
INSERT INTO "TestsToSteps" VALUES(274, 123,343,0,NULL);
INSERT INTO "TestsToSteps" VALUES(275, 124,344,0,NULL);
INSERT INTO "TestsToSteps" VALUES(276, 138,346,0,NULL);
INSERT INTO "TestsToSteps" VALUES(277, 141,350,0,NULL);
INSERT INTO "TestsToSteps" VALUES(278, 139,351,0,NULL);
INSERT INTO "TestsToSteps" VALUES(279, 139,352,0,NULL);
INSERT INTO "TestsToSteps" VALUES(280, 143,355,0,NULL);
INSERT INTO "TestsToSteps" VALUES(281, 145,356,0,NULL);
INSERT INTO "TestsToSteps" VALUES(282, 145,357,0,NULL);
INSERT INTO "TestsToSteps" VALUES(283, 146,358,0,NULL);
INSERT INTO "TestsToSteps" VALUES(284, 147,359,0,NULL);
INSERT INTO "TestsToSteps" VALUES(285, 148,361,0,NULL);
INSERT INTO "TestsToSteps" VALUES(286, 149,362,0,NULL);
INSERT INTO "TestsToSteps" VALUES(287, 150,363,0,NULL);
INSERT INTO "TestsToSteps" VALUES(288, 164,364,0,NULL);
INSERT INTO "TestsToSteps" VALUES(289, 152,366,0,NULL);
INSERT INTO "TestsToSteps" VALUES(290, 168,369,0,NULL);
INSERT INTO "TestsToSteps" VALUES(291, 154,370,0,NULL);
INSERT INTO "TestsToSteps" VALUES(292, 155,371,0,NULL);
INSERT INTO "TestsToSteps" VALUES(293, 172,373,0,NULL);
INSERT INTO "TestsToSteps" VALUES(294, 165,374,0,NULL);
INSERT INTO "TestsToSteps" VALUES(295, 148,376,0,NULL);
INSERT INTO "TestsToSteps" VALUES(296, 163,377,0,NULL);
INSERT INTO "TestsToSteps" VALUES(297, 170,378,0,NULL);
INSERT INTO "TestsToSteps" VALUES(298, 171,379,0,NULL);
INSERT INTO "TestsToSteps" VALUES(299, 166,380,0,NULL);
INSERT INTO "TestsToSteps" VALUES(300, 141,383,0,NULL);
INSERT INTO "TestsToSteps" VALUES(301, 139,384,0,NULL);
INSERT INTO "TestsToSteps" VALUES(302, 139,385,0,NULL);
INSERT INTO "TestsToSteps" VALUES(303, 143,388,0,NULL);
INSERT INTO "TestsToSteps" VALUES(304, 145,389,0,NULL);
INSERT INTO "TestsToSteps" VALUES(305, 145,390,0,NULL);
INSERT INTO "TestsToSteps" VALUES(306, 152,391,0,NULL);
INSERT INTO "TestsToSteps" VALUES(307, 154,392,0,NULL);
INSERT INTO "TestsToSteps" VALUES(308, 155,393,0,NULL);
INSERT INTO "TestsToSteps" VALUES(309, 147,394,0,NULL);
INSERT INTO "TestsToSteps" VALUES(310, 172,396,0,NULL);
INSERT INTO "TestsToSteps" VALUES(311, 165,397,0,NULL);
INSERT INTO "TestsToSteps" VALUES(312, 148,399,0,NULL);
INSERT INTO "TestsToSteps" VALUES(313, 163,400,0,NULL);
INSERT INTO "TestsToSteps" VALUES(314, 170,401,0,NULL);
INSERT INTO "TestsToSteps" VALUES(315, 171,402,0,NULL);
INSERT INTO "TestsToSteps" VALUES(316, 166,403,0,NULL);
INSERT INTO "TestsToSteps" VALUES(317, 141,406,0,NULL);
INSERT INTO "TestsToSteps" VALUES(318, 139,407,0,NULL);
INSERT INTO "TestsToSteps" VALUES(319, 139,408,0,NULL);
INSERT INTO "TestsToSteps" VALUES(320, 143,411,0,NULL);
INSERT INTO "TestsToSteps" VALUES(321, 145,412,0,NULL);
INSERT INTO "TestsToSteps" VALUES(322, 145,413,0,NULL);
INSERT INTO "TestsToSteps" VALUES(323, 145,414,0,NULL);
INSERT INTO "TestsToSteps" VALUES(324, 152,415,0,NULL);
INSERT INTO "TestsToSteps" VALUES(325, 155,416,0,NULL);
INSERT INTO "TestsToSteps" VALUES(326, 147,417,0,NULL);
INSERT INTO "TestsToSteps" VALUES(327, 172,419,0,NULL);
INSERT INTO "TestsToSteps" VALUES(328, 165,420,0,NULL);
INSERT INTO "TestsToSteps" VALUES(329, 148,422,0,NULL);
INSERT INTO "TestsToSteps" VALUES(330, 163,423,0,NULL);
INSERT INTO "TestsToSteps" VALUES(331, 170,424,0,NULL);
INSERT INTO "TestsToSteps" VALUES(332, 171,425,0,NULL);
INSERT INTO "TestsToSteps" VALUES(333, 166,426,0,NULL);
INSERT INTO "TestsToSteps" VALUES(334, 141,429,0,NULL);
INSERT INTO "TestsToSteps" VALUES(335, 139,430,0,NULL);
INSERT INTO "TestsToSteps" VALUES(336, 139,431,0,NULL);
INSERT INTO "TestsToSteps" VALUES(337, 143,434,0,NULL);
INSERT INTO "TestsToSteps" VALUES(338, 145,435,0,NULL);
INSERT INTO "TestsToSteps" VALUES(339, 145,436,0,NULL);
INSERT INTO "TestsToSteps" VALUES(340, 147,437,0,NULL);
INSERT INTO "TestsToSteps" VALUES(341, 160,439,0,NULL);
INSERT INTO "TestsToSteps" VALUES(342, 161,440,0,NULL);
INSERT INTO "TestsToSteps" VALUES(343, 161,441,0,NULL);
INSERT INTO "TestsToSteps" VALUES(344, 148,443,0,NULL);
INSERT INTO "TestsToSteps" VALUES(345, 163,444,0,NULL);
INSERT INTO "TestsToSteps" VALUES(346, 170,445,0,NULL);
INSERT INTO "TestsToSteps" VALUES(347, 171,446,0,NULL);
INSERT INTO "TestsToSteps" VALUES(348, 152,448,0,NULL);
INSERT INTO "TestsToSteps" VALUES(349, 168,451,0,NULL);
INSERT INTO "TestsToSteps" VALUES(350, 169,452,0,NULL);
INSERT INTO "TestsToSteps" VALUES(351, 155,453,0,NULL);
INSERT INTO "TestsToSteps" VALUES(352, 172,455,0,NULL);
INSERT INTO "TestsToSteps" VALUES(353, 165,456,0,NULL);
INSERT INTO "TestsToSteps" VALUES(354, 166,458,0,NULL);
INSERT INTO "TestsToSteps" VALUES(355, 141,468,0,NULL);
INSERT INTO "TestsToSteps" VALUES(356, 139,469,0,NULL);
INSERT INTO "TestsToSteps" VALUES(357, 139,470,0,NULL);
INSERT INTO "TestsToSteps" VALUES(358, 143,473,0,NULL);
INSERT INTO "TestsToSteps" VALUES(359, 145,474,0,NULL);
INSERT INTO "TestsToSteps" VALUES(360, 145,475,0,NULL);
INSERT INTO "TestsToSteps" VALUES(361, 167,476,0,NULL);
INSERT INTO "TestsToSteps" VALUES(362, 155,477,0,NULL);
INSERT INTO "TestsToSteps" VALUES(363, 147,479,0,NULL);
INSERT INTO "TestsToSteps" VALUES(364, 161,480,0,NULL);
INSERT INTO "TestsToSteps" VALUES(365, 172,482,0,NULL);
INSERT INTO "TestsToSteps" VALUES(366, 165,483,0,NULL);
INSERT INTO "TestsToSteps" VALUES(367, 148,485,0,NULL);
INSERT INTO "TestsToSteps" VALUES(368, 163,486,0,NULL);
INSERT INTO "TestsToSteps" VALUES(369, 170,487,0,NULL);
INSERT INTO "TestsToSteps" VALUES(370, 171,488,0,NULL);
INSERT INTO "TestsToSteps" VALUES(371, 166,489,0,NULL);
