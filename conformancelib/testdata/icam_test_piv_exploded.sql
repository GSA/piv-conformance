CREATE TABLE "TestSteps" (
	`Id`	INTEGER PRIMARY KEY AUTOINCREMENT,
	`Description`	TEXT,
        `Class`         TEXT,
        `Method`        TEXT,
	`NumParameters`	INTEGER
);
CREATE TABLE "TestsToSteps" (
	`Id`	INTEGER PRIMARY KEY AUTOINCREMENT,
	`TestStepId`	INTEGER,
	`TestId`	INTEGER,
        `ExecutionOrder`         INTEGER,
        `Status`        INTEGER
);
CREATE TABLE "TestStepParameters" (
	`Id`	INTEGER PRIMARY KEY AUTOINCREMENT,
	`TestStepId`	INTEGER,
	`TestId`	INTEGER,
        `Value`         TEXT,
        `ParamOrder`    TEXT
);
CREATE TABLE "TestCases" (
	`Id`	INTEGER PRIMARY KEY AUTOINCREMENT,
        `TestGroup`         TEXT,
	`TestCaseIdentifier`	TEXT,
        `TestCaseDescription`   TEXT,
        `Status`        INTEGER,
        `ExpectedStatus` INTEGER,
        `Enabled`   INTEGER
);
CREATE TABLE "TestGroups" (
	`Id`	INTEGER PRIMARY KEY AUTOINCREMENT,
        `GroupDescription`   TEXT
);
CREATE TABLE "GroupsToTestCases" (
	`Id`	INTEGER PRIMARY KEY AUTOINCREMENT,
	`TestGroupId`	INTEGER,
	`TestCaseId`	INTEGER
);
CREATE TABLE "SystemSettings" (
	`Id`	INTEGER PRIMARY KEY AUTOINCREMENT,
	`ReaderName`	TEXT,
	`ApplicationPIN`	TEXT,
	`OutputDirectory`	TEXT,
	`SettingsGroup`	TEXT,
	`GPMasterKey`	TEXT
);
INSERT INTO "TestSteps" VALUES(1,'BERTLV.1','gov.gsa.conformanceLib.tests.BER_TLVTests','berTLV_Test_1',NULL);
INSERT INTO "TestSteps" VALUES(2,'BERTLV.2','gov.gsa.conformanceLib.tests.BER_TLVTests','berTLV_Test_2',NULL);
INSERT INTO "TestSteps" VALUES(3,'BERTLV.3','gov.gsa.conformanceLib.tests.BER_TLVTests','berTLV_Test_3',NULL);
INSERT INTO "TestSteps" VALUES(4,'BERTLV.4','gov.gsa.conformanceLib.tests.BER_TLVTests','berTLV_Test_4',NULL);
INSERT INTO "TestSteps" VALUES(5,'BERTLV.5','gov.gsa.conformanceLib.tests.BER_TLVTests','berTLV_Test_5',NULL);
INSERT INTO "TestSteps" VALUES(6,'73-4.1','gov.gsa.conformancelib.tests.SP800_73_4CCCTests','sp800_73_4_Test_1',NULL);
INSERT INTO "TestSteps" VALUES(7,'73-4.2','gov.gsa.conformancelib.tests.SP800_73_4CCCTests','sp800_73_4_Test_2',NULL);
INSERT INTO "TestSteps" VALUES(8,'73-4.3','gov.gsa.conformancelib.tests.SP800_73_4CCCTests','sp800_73_4_Test_3',NULL);
INSERT INTO "TestSteps" VALUES(9,'73-4.4','gov.gsa.conformancelib.tests.SP800_73_4CCCTests','sp800_73_4_Test_4',NULL);
INSERT INTO "TestSteps" VALUES(10,'73-4.5','gov.gsa.conformancelib.tests.SP800_73_4CCCTests','sp800_73_4_Test_5',NULL);
INSERT INTO "TestSteps" VALUES(11,'73-4.6','gov.gsa.conformancelib.tests.SP800_73_4CCCTests','sp800_73_4_Test_6',NULL);
INSERT INTO "TestSteps" VALUES(12,'73-4.7','gov.gsa.conformancelib.tests.SP800_73_4CCCTests','sp800_73_4_Test_7',NULL);
INSERT INTO "TestSteps" VALUES(13,'73-4.8','gov.gsa.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_8',NULL);
INSERT INTO "TestSteps" VALUES(14,'73-4.9','gov.gsa.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_9',NULL);
INSERT INTO "TestSteps" VALUES(15,'73-4.10','gov.gsa.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_10',NULL);
INSERT INTO "TestSteps" VALUES(16,'73-4.11','gov.gsa.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_11',NULL);
INSERT INTO "TestSteps" VALUES(17,'73-4.12','gov.gsa.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_12',NULL);
INSERT INTO "TestSteps" VALUES(18,'73-4.13','gov.gsa.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_13',NULL);
INSERT INTO "TestSteps" VALUES(19,'73-4.14','gov.gsa.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_14',NULL);
INSERT INTO "TestSteps" VALUES(20,'73-4.15','gov.gsa.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_15',NULL);
INSERT INTO "TestSteps" VALUES(21,'73-4.16','gov.gsa.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_16',NULL);
INSERT INTO "TestSteps" VALUES(22,'73-4.17','gov.gsa.conformancelib.tests.SP800_73_4CHUIDTests','sp800_73_4_Test_17',NULL);
INSERT INTO "TestSteps" VALUES(23,'73-4.18','gov.gsa.conformancelib.tests.X509DataObjectTests','sp800_73_4_Test_18',NULL);
INSERT INTO "TestSteps" VALUES(24,'73-4.19','gov.gsa.conformancelib.tests.X509DataObjectTests','sp800_73_4_Test_19',NULL);
INSERT INTO "TestSteps" VALUES(25,'73-4.20','gov.gsa.conformancelib.tests.X509DataObjectTests','sp800_73_4_Test_20',NULL);
INSERT INTO "TestSteps" VALUES(26,'73-4.21','gov.gsa.conformancelib.tests.X509DataObjectTests','sp800_73_4_Test_21',NULL);
INSERT INTO "TestSteps" VALUES(27,'73-4.22','gov.gsa.conformancelib.tests.X509DataObjectTests','sp800_73_4_Test_22',NULL);
INSERT INTO "TestSteps" VALUES(28,'73-4.23','gov.gsa.conformancelib.tests.X509DataObjectTests','sp800_73_4_Test_23',NULL);
INSERT INTO "TestSteps" VALUES(29,'73-4.24','gov.gsa.conformancelib.tests.SP800_73_4FingerprintsTests','sp800_73_4_Test_24',NULL);
INSERT INTO "TestSteps" VALUES(30,'73-4.25','gov.gsa.conformancelib.tests.SP800_73_4FingerprintsTests','sp800_73_4_Test_25',NULL);
INSERT INTO "TestSteps" VALUES(31,'73-4.26','gov.gsa.conformancelib.tests.SP800_73_4FingerprintsTests','sp800_73_4_Test_26',NULL);
INSERT INTO "TestSteps" VALUES(32,'73-4.27','gov.gsa.conformancelib.tests.SP800_73_4PrintedInfoTests','sp800_73_4_Test_27',NULL);
INSERT INTO "TestSteps" VALUES(33,'73-4.28','gov.gsa.conformancelib.tests.SP800_73_4PrintedInfoTests','sp800_73_4_Test_28',NULL);
INSERT INTO "TestSteps" VALUES(34,'73-4.29','gov.gsa.conformancelib.tests.SP800_73_4PrintedInfoTests','sp800_73_4_Test_29',NULL);
INSERT INTO "TestSteps" VALUES(35,'73-4.30','gov.gsa.conformancelib.tests.SP800_73_4PrintedInfoTests','sp800_73_4_Test_30',NULL);
INSERT INTO "TestSteps" VALUES(36,'73-4.31','gov.gsa.conformancelib.tests.SP800_73_4PrintedInfoTests','sp800_73_4_Test_31',NULL);
INSERT INTO "TestSteps" VALUES(37,'73-4.32','gov.gsa.conformancelib.tests.SP800_73_4FacialImageTests','sp800_73_4_Test_32',NULL);
INSERT INTO "TestSteps" VALUES(38,'73-4.33','gov.gsa.conformancelib.tests.SP800_73_4SecurityObjectTests','sp800_73_4_Test_33',NULL);
INSERT INTO "TestSteps" VALUES(39,'73-4.34','gov.gsa.conformancelib.tests.SP800_73_4SecurityObjectTests','sp800_73_4_Test_34',NULL);
INSERT INTO "TestSteps" VALUES(40,'73-4.35','gov.gsa.conformancelib.tests.SP800_73_4SecurityObjectTests','sp800_73_4_Test_35',NULL);
INSERT INTO "TestSteps" VALUES(41,'73-4.36','gov.gsa.conformancelib.tests.SP800_73_4SecurityObjectTests','sp800_73_4_Test_36',NULL);
INSERT INTO "TestSteps" VALUES(42,'76.1','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_1',NULL);
INSERT INTO "TestSteps" VALUES(43,'76.2','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_2',NULL);
INSERT INTO "TestSteps" VALUES(44,'76.3','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_3',NULL);
INSERT INTO "TestSteps" VALUES(45,'76.4','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_4',NULL);
INSERT INTO "TestSteps" VALUES(46,'76.5','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_5',NULL);
INSERT INTO "TestSteps" VALUES(47,'76.6','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_6',NULL);
INSERT INTO "TestSteps" VALUES(48,'76.7','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_7',NULL);
INSERT INTO "TestSteps" VALUES(49,'76.8','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_8',NULL);
INSERT INTO "TestSteps" VALUES(50,'76.9','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_9',NULL);
INSERT INTO "TestSteps" VALUES(51,'76.10','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_10',NULL);
INSERT INTO "TestSteps" VALUES(52,'76.11','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_11',NULL);
INSERT INTO "TestSteps" VALUES(53,'76.12','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_12',NULL);
INSERT INTO "TestSteps" VALUES(54,'76.13','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_13',NULL);
INSERT INTO "TestSteps" VALUES(55,'76.14','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_14',NULL);
INSERT INTO "TestSteps" VALUES(56,'76.15','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_15',NULL);
INSERT INTO "TestSteps" VALUES(57,'76.16','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_16',NULL);
INSERT INTO "TestSteps" VALUES(58,'76.17','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_17',NULL);
INSERT INTO "TestSteps" VALUES(59,'76.18','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_18',NULL);
INSERT INTO "TestSteps" VALUES(60,'76.19','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_19',NULL);
INSERT INTO "TestSteps" VALUES(61,'76.20','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_20',NULL);
INSERT INTO "TestSteps" VALUES(62,'76.21','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_21',NULL);
INSERT INTO "TestSteps" VALUES(63,'76.22','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_22',NULL);
INSERT INTO "TestSteps" VALUES(64,'76.23','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_23',NULL);
INSERT INTO "TestSteps" VALUES(65,'76.24','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_24',NULL);
INSERT INTO "TestSteps" VALUES(66,'76.25','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_25',NULL);
INSERT INTO "TestSteps" VALUES(67,'76.26','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_26',NULL);
INSERT INTO "TestSteps" VALUES(68,'76.27','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_27',NULL);
INSERT INTO "TestSteps" VALUES(69,'76.28','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_28',NULL);
INSERT INTO "TestSteps" VALUES(70,'76.29','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_29',NULL);
INSERT INTO "TestSteps" VALUES(71,'76.30','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_30',NULL);
INSERT INTO "TestSteps" VALUES(72,'76.31','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_31',NULL);
INSERT INTO "TestSteps" VALUES(73,'76.32','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_32',NULL);
INSERT INTO "TestSteps" VALUES(74,'76.33','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_33',NULL);
INSERT INTO "TestSteps" VALUES(75,'76.34','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_34',NULL);
INSERT INTO "TestSteps" VALUES(76,'76.35','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_35',NULL);
INSERT INTO "TestSteps" VALUES(77,'76.36','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_36',NULL);
INSERT INTO "TestSteps" VALUES(78,'76.37','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_37',NULL);
INSERT INTO "TestSteps" VALUES(79,'76.38','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_38',NULL);
INSERT INTO "TestSteps" VALUES(80,'76.39','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_39',NULL);
INSERT INTO "TestSteps" VALUES(81,'76.40','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_40',NULL);
INSERT INTO "TestSteps" VALUES(82,'76.41','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_41',NULL);
INSERT INTO "TestSteps" VALUES(83,'76.42','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_42',NULL);
INSERT INTO "TestSteps" VALUES(84,'76.43','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_43',NULL);
INSERT INTO "TestSteps" VALUES(85,'76.44','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_44',NULL);
INSERT INTO "TestSteps" VALUES(86,'76.45','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_45',NULL);
INSERT INTO "TestSteps" VALUES(87,'76.46','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_46',NULL);
INSERT INTO "TestSteps" VALUES(88,'76.47','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_47',NULL);
INSERT INTO "TestSteps" VALUES(89,'76.48','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_48',NULL);
INSERT INTO "TestSteps" VALUES(90,'76.49','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_49',NULL);
INSERT INTO "TestSteps" VALUES(91,'76.50','gov.gsa.conformancelib.tests.SP800_76_Tests','sp800_76Test_50',NULL);
INSERT INTO "TestSteps" VALUES(92,'CMS.1','gov.gsa.conformanceLib.tests.CMSTests','CMS_Test_1',NULL);
INSERT INTO "TestSteps" VALUES(93,'CMS.2','gov.gsa.conformanceLib.tests.CMSTests','CMS_Test_2',NULL);
INSERT INTO "TestSteps" VALUES(94,'CMS.3','gov.gsa.conformanceLib.tests.CMSTests','CMS_Test_3',NULL);
INSERT INTO "TestSteps" VALUES(95,'CMS.4','gov.gsa.conformanceLib.tests.CMSTests','CMS_Test_4',NULL);
INSERT INTO "TestSteps" VALUES(96,'CMS.5','gov.gsa.conformanceLib.tests.CMSTests','CMS_Test_5',NULL);
INSERT INTO "TestSteps" VALUES(97,'CMS.6','gov.gsa.conformanceLib.tests.CMSTests','CMS_Test_6',NULL);
INSERT INTO "TestSteps" VALUES(98,'CMS.7','gov.gsa.conformanceLib.tests.CMSTests','CMS_Test_7',NULL);
INSERT INTO "TestSteps" VALUES(99,'CMS.8','gov.gsa.conformanceLib.tests.CMSTests','CMS_Test_8',NULL);
INSERT INTO "TestSteps" VALUES(100,'CMS.9','gov.gsa.conformanceLib.tests.CMSTests','CMS_Test_9',NULL);
INSERT INTO "TestSteps" VALUES(101,'CMS.11','gov.gsa.conformanceLib.tests.CMSTests','CMS_Test_11',NULL);
INSERT INTO "TestSteps" VALUES(102,'CMS.12','gov.gsa.conformanceLib.tests.CMSTests','CMS_Test_12',NULL);
INSERT INTO "TestSteps" VALUES(103,'CMS.13','gov.gsa.conformanceLib.tests.CMSTests','CMS_Test_13',NULL);
INSERT INTO "TestSteps" VALUES(104,'CMS.14','gov.gsa.conformanceLib.tests.CMSTests','CMS_Test_14',NULL);
INSERT INTO "TestSteps" VALUES(105,'CMS.15','gov.gsa.conformanceLib.tests.CMSTests','CMS_Test_15',NULL);
INSERT INTO "TestSteps" VALUES(106,'CMS.16','gov.gsa.conformanceLib.tests.CMSTests','CMS_Test_16',NULL);
INSERT INTO "TestSteps" VALUES(107,'CMS.17','gov.gsa.conformanceLib.tests.CMSTests','CMS_Test_17',NULL);
INSERT INTO "TestSteps" VALUES(108,'CMS.18','gov.gsa.conformanceLib.tests.CMSTests','CMS_Test_18',NULL);
INSERT INTO "TestSteps" VALUES(109,'CMS.19','gov.gsa.conformanceLib.tests.CMSTests','CMS_Test_19',NULL);
INSERT INTO "TestSteps" VALUES(110,'CMS.20','gov.gsa.conformanceLib.tests.CMSTests','CMS_Test_20',NULL);
INSERT INTO "TestSteps" VALUES(111,'CMS.21','gov.gsa.conformanceLib.tests.CMSTests','CMS_Test_21',NULL);
INSERT INTO "TestSteps" VALUES(112,'CMS.22','gov.gsa.conformanceLib.tests.CMSTests','CMS_Test_22',NULL);
INSERT INTO "TestSteps" VALUES(113,'CMS.23','gov.gsa.conformanceLib.tests.CMSTests','CMS_Test_23',NULL);
INSERT INTO "TestSteps" VALUES(114,'78.1','gov.gsa.conformancelib.tests.SP800_78_X509DataObjectTests','sp800_78_Test_1',NULL);
INSERT INTO "TestSteps" VALUES(115,'78.2','gov.gsa.conformancelib.tests.SP800_78_X509DataObjectTests','sp800_78_Test_2',NULL);
INSERT INTO "TestSteps" VALUES(116,'78.3','gov.gsa.conformancelib.tests.SP800_78_X509DataObjectTests','sp800_78_Test_3',NULL);
INSERT INTO "TestSteps" VALUES(117,'PKIX.1','gov.gsa.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_1',NULL);
INSERT INTO "TestSteps" VALUES(118,'PKIX.2','gov.gsa.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_2',NULL);
INSERT INTO "TestSteps" VALUES(119,'PKIX.3','gov.gsa.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_3',NULL);
INSERT INTO "TestSteps" VALUES(120,'PKIX.4','gov.gsa.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_4',NULL);
INSERT INTO "TestSteps" VALUES(121,'PKIX.5','gov.gsa.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_5',NULL);
INSERT INTO "TestSteps" VALUES(122,'PKIX.6','gov.gsa.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_6',NULL);
INSERT INTO "TestSteps" VALUES(123,'PKIX.7','gov.gsa.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_7',NULL);
INSERT INTO "TestSteps" VALUES(124,'PKIX.8','gov.gsa.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_8',NULL);
INSERT INTO "TestSteps" VALUES(125,'PKIX.9','gov.gsa.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_9',NULL);
INSERT INTO "TestSteps" VALUES(126,'PKIX.10','gov.gsa.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_10',NULL);
INSERT INTO "TestSteps" VALUES(127,'PKIX.11','gov.gsa.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_11',NULL);
INSERT INTO "TestSteps" VALUES(128,'PKIX.12','gov.gsa.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_12',NULL);
INSERT INTO "TestSteps" VALUES(129,'PKIX.13','gov.gsa.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_13',NULL);
INSERT INTO "TestSteps" VALUES(130,'PKIX.14','gov.gsa.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_14',NULL);
INSERT INTO "TestSteps" VALUES(131,'PKIX.15','gov.gsa.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_15',NULL);
INSERT INTO "TestSteps" VALUES(132,'PKIX.16','gov.gsa.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_16',NULL);
INSERT INTO "TestSteps" VALUES(133,'PKIX.17','gov.gsa.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_17',NULL);
INSERT INTO "TestSteps" VALUES(134,'PKIX.18','gov.gsa.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_18',NULL);
INSERT INTO "TestSteps" VALUES(135,'PKIX.19','gov.gsa.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_19',NULL);
INSERT INTO "TestSteps" VALUES(136,'PKIX.20','gov.gsa.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_20',NULL);
INSERT INTO "TestSteps" VALUES(137,'PKIX.21','gov.gsa.conformancelib.tests.PKIX_X509DataObjectTests','PKIX_Test_21',NULL);
INSERT INTO "TestStepParameters" VALUES(1, 21,NULL,'CHUID_OID:5',0);
INSERT INTO "TestStepParameters" VALUES(2, 79,NULL,'CARDHOLDER_FINGERPRINTS_OID:513',0);
INSERT INTO "TestStepParameters" VALUES(3, 79,NULL,'CARDHOLDER_FACIAL_IMAGE_OID:1281',1);
INSERT INTO "TestStepParameters" VALUES(4, 79,NULL,'CARDHOLDER_IRIS_IMAGES_OID:9',2);
INSERT INTO "TestStepParameters" VALUES(5, 82,NULL,'CARDHOLDER_FINGERPRINTS_OID:8',0);
INSERT INTO "TestStepParameters" VALUES(6, 82,NULL,'CARDHOLDER_FACIAL_IMAGE_OID:2',1);
INSERT INTO "TestStepParameters" VALUES(7, 82,NULL,'CARDHOLDER_IRIS_IMAGES_OID:16',2);
INSERT INTO "TestStepParameters" VALUES(8, 83,NULL,'CARDHOLDER_FINGERPRINTS_OID:128',0);
INSERT INTO "TestStepParameters" VALUES(9, 83,NULL,'CARDHOLDER_FACIAL_IMAGE_OID:32:2',1);
INSERT INTO "TestStepParameters" VALUES(10, 83,NULL,'CARDHOLDER_IRIS_IMAGES_OID:64',2);
INSERT INTO "TestStepParameters" VALUES(11, 84,NULL,'-2',0);
INSERT INTO "TestStepParameters" VALUES(12, 84,NULL,'100',1);
INSERT INTO "TestStepParameters" VALUES(13, 91,NULL,'-2',0);
INSERT INTO "TestStepParameters" VALUES(14, 91,NULL,'100',1);
INSERT INTO "TestStepParameters" VALUES(15, 103,NULL,'1.2.840.113549.1.1.5',0);
INSERT INTO "TestStepParameters" VALUES(16, 103,NULL,'1.2.840.113549.1.1.11',1);
INSERT INTO "TestStepParameters" VALUES(17, 103,NULL,'1.2.840.113549.1.1.10',2);
INSERT INTO "TestStepParameters" VALUES(18, 103,NULL,'1.2.840.10045.4.3.2',3);
INSERT INTO "TestStepParameters" VALUES(19, 103,NULL,'1.2.840.10045.4.3.3',4);
INSERT INTO "TestStepParameters" VALUES(20, 105,NULL,'2.16.840.1.101.3.6.7',0);
INSERT INTO "TestStepParameters" VALUES(21, 107,NULL,'2.16.840.1.101.3.6.6',0);
INSERT INTO "TestStepParameters" VALUES(22, 107,NULL,'1.3.6.1.1.16.4',1);
INSERT INTO "TestStepParameters" VALUES(23, 114,NULL,'Please check atom that it does what the description says',0);
INSERT INTO "TestStepParameters" VALUES(24, 115,NULL,'Please check atom that it does what the description says',0);
INSERT INTO "TestStepParameters" VALUES(25, 116,NULL,'1.2.840.113549.1.1.5',0);
INSERT INTO "TestStepParameters" VALUES(26, 116,NULL,'1.2.840.113549.1.1.11',1);
INSERT INTO "TestStepParameters" VALUES(27, 116,NULL,'1.2.840.113549.1.1.10',2);
INSERT INTO "TestStepParameters" VALUES(28, 116,NULL,'1.2.840.10045.4.3.2',3);
INSERT INTO "TestStepParameters" VALUES(29, 116,NULL,'1.2.840.10045.4.3.3',4);
INSERT INTO "TestStepParameters" VALUES(30, 122,NULL,'2.16.840.1.101.3.2.1.48.11',0);
INSERT INTO "TestStepParameters" VALUES(31, 128,NULL,'2.16.840.1.101.3.6.6',0);
INSERT INTO "TestStepParameters" VALUES(32, 128,NULL,'1.3.6.1.1.16.4',1);
INSERT INTO "TestStepParameters" VALUES(33, 129,NULL,'15',0);
INSERT INTO "TestStepParameters" VALUES(34, 134,NULL,'2.16.840.1.101.3.2.1.48.13',0);
INSERT INTO "TestStepParameters" VALUES(35, 136,NULL,'2.16.840.1.101.3.6.8',0);
INSERT INTO "TestStepParameters" VALUES(36, 137,NULL,'2.16.840.1.101.3.2.1.48.86',0);
INSERT INTO "TestCases" VALUES(1, NULL,'8.1.0.1','CCC of PIV card applet conforms to SP800-73 Appendix A',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(2, NULL,'8.1.0.2','Length field encoded as shown in SP800-85B Table 1',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(3, NULL,'8.1.0.3','Tag encoded as 3 bytes',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(4, NULL,'8.1.0.4','Each data object returned with 2 byte status word (90 00)',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(5, NULL,'8.1.1','CCC Registered data model element is present and has a value of 0x10.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(6, NULL,'8.1.2','CCC BERTLV tag is 5FC107',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(7, NULL,'8.1.3','CCC Tags 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xFA, 0xFB, 0xFC, 0xFD present in that order',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(8, NULL,'8.1.8','CCC Optional Tags 0xE3 and 0xE4 may be present or absent; if present are after tags listed in and are in that order',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(9, NULL,'8.1.9','CCC Tag 0xFE present and after any tags from 73-4.4 and 73.4-5',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(10, NULL,'8.1.10','CCC Values of tags present conform to vendor-supplied data',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(11, NULL,'8.1.11','Confirm that tag 0xFE has length of 0',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(12, NULL,'8.2.0.1','CHUID of PIV card applet conforms to SP800-73 Appendix A',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(13, NULL,'8.2.0.2','Length field encoded as shown in SP800-85B Table 1',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(14, NULL,'8.2.0.4','Tag encoded as 3 bytes',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(15, NULL,'8.2.0.5','Each data object returned with 2 byte status word (90 00)',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(16, NULL,'8.2.1','CHUID blob no larger than 3395 bytes',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(17, NULL,'8.2.2.1','Tag 0x30 is present and is the first tag or the first tag following 0xEE',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(18, NULL,'8.2.2.2','Tags 0x32 and 0x33 are optionally present and must follow 0x30 in that order',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(19, NULL,'8.2.2.3','Tags 0x34 and 0x35 are present and follow tags from 73-4.10, 73-4.11',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(20, NULL,'8.2.2.4','Tag 0x36 is optionally present and follows tags from 73-4.10, 73-4.11, 73-4.12',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(21, NULL,'8.2.2.5','Tags 0x3E and 0xFE are present and follow tags from 73-4.10, 73-4.11, 73-4.12, 73-4.13 in that order',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(22, NULL,'8.2.2.6','If CHUID tag 0xEE is present, it is the first tag in the blob',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(23, NULL,'8.2.3','Expiration Date is formatted YYYYMMDD',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(24, NULL,'8.2.4','Expiration Date is within the next 5 years',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(25, NULL,'8.2.5','If the CHUID contains the optional Cardholder UUID, then the data element shall be in accordance with 800 73-4 Part 1 Section 3.4.2.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(26, NULL,'8.2.6','The retired key map is not present',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(27, NULL,'8.2.101','Tag 0xFE has length of 0',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(28, NULL,'8.3.0.1','X509 Certificate for PIV Authentication of PIV card applet conforms to SP800-73 Appendix A',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(29, NULL,'8.3.0.2','Length field encoded as shown in SP800-85B Table 1',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(30, NULL,'8.3.0.3','Tag encoded as 3 bytes',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(31, NULL,'8.3.0.4','Each data object returned with 2 byte status word (90 00)',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(32, NULL,'8.3.1','Container blob is no larger than 1905 bytes',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(33, NULL,'8.3.2.1','Tags 0x70 and 0x71 are present in that order',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(34, NULL,'8.3.2.2','Tag 0x72 is optionally present and follows tags from 73-4.19',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(35, NULL,'8.3.2.3','Tag 0xFE is present and follows tags from 73-4.19, 73-4.20',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(36, NULL,'8.3.2.4','No tags other than (0x70, 0x71, 0x72, 0xFE) are present',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(37, NULL,'8.3.2.101','Tag 0xFE has length of 0',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(38, NULL,'8.4.0.1','Cardholder Fingerprints of PIV card applet conforms to SP800-73 Appendix A',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(39, NULL,'8.4.0.2','Length field encoded as shown in SP800-85B Table 1',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(40, NULL,'8.4.0.3','Tag encoded as 3 bytes',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(41, NULL,'8.4.0.4','Each data object returned with 2 byte status word (90 00)',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(42, NULL,'8.4.5','CHUID blob no larger than 3395 bytes',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(43, NULL,'8.4.6','If CHUID tag 0xEE is present, it is the first tag in the blob',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(44, NULL,'8.4.7','Tag 0x30 is present and is the first tag or the first tag following 0xEE',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(45, NULL,'8.4.8','Tags 0x32 and 0x33 are optionally present and must follow 0x30 in that order',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(46, NULL,'8.4.9','Tag 0xFE has length of 0',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(47, NULL,'8.5.0.1','Printed Information of PIV card applet conforms to SP800-73 Appendix A',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(48, NULL,'8.5.0.2','Length field encoded as shown in SP800-85B Table 1',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(49, NULL,'8.5.0.3','Tag encoded as 3 bytes',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(50, NULL,'8.5.0.4','Each data object returned with 2 byte status word (90 00)',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(51, NULL,'8.5.1.1','Printed Information blob is no larger than 120 bytes',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(52, NULL,'8.5.1.2','Tags 0x01, 0x02, 0x05, 0x06 are present in that order',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(53, NULL,'8.5.1.3','Tags 0x07 and 0x08 are optionally present in that order, following the tags from 73-4.28',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(54, NULL,'8.5.1.4','Tag 0xFE is present and follows tags from 73-4.28, 73-4.29',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(55, NULL,'8.5.1.5','No tags other than (0x01, 0x02, 0x05, 0x06, 0x07, 0x08, 0xFE) are present',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(56, NULL,'8.5.101','Tag 0xFE has length of 0',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(57, NULL,'8.6.0.1','Card Holder Facial Image of PIV card applet conforms to SP800-73 Appendix A',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(58, NULL,'8.6.0.2','Length field encoded as shown in SP800-85B Table 1',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(59, NULL,'8.6.0.3','Tag encoded as 3 bytes',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(60, NULL,'8.6.0.4','Each data object returned with 2 byte status word (90 00)',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(61, NULL,'8.6.1.1','Card Holder Facial Image blob no larger than 12710 bytes',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(62, NULL,'8.6.1.2','Position is one of the valid x,y coordinate types in the original image',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(63, NULL,'8.6.1.3','No tags other than (0xBC, 0xFE) are present',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(64, NULL,'8.6.1.101','Tag 0xFE has length of 0',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(65, NULL,'8.7.0.1','X509 Cert for Digital Signature on PIV applet conforms to SP800-73 Appendix A',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(66, NULL,'8.7.0.2','Length field encoded as shown in SP800-85B Table 1',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(67, NULL,'8.7.0.3','Tag encoded as 3 bytes',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(68, NULL,'8.7.0.4','Each data object returned with 2 byte status word (90 00)',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(69, NULL,'8.7.1.1','Container blob is no larger than 1905 bytes',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(70, NULL,'8.7.1.2','Tags 0x70 and 0x71 are present in that order',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(71, NULL,'8.7.1.3','Tag 0x72 is optionally present and follows tags from 73-4.19',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(72, NULL,'8.7.1.4','No tags other than (0x70, 0x71, 0x72, 0xFE) are present',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(73, NULL,'8.7.1.5','Tag 0xFE is present and follows tags from 73-4.19, 73-4.20',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(74, NULL,'8.7.101','Tag 0xFE has length of 0',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(75, NULL,'8.8.0.1','Confirm that X509 Cert for Key Management data object conforms to SP800-73 Appendix A',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(76, NULL,'8.8.0.2','Length field encoded as shown in SP800-85B Table 1',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(77, NULL,'8.8.0.3','Tag encoded as 3 bytes',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(78, NULL,'8.8.0.4','Each data object returned with 2 byte status word (90 00)',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(79, NULL,'8.8.1.1','Container blob is no larger than 1905 bytes',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(80, NULL,'8.8.1.2','Tags 0x70 and 0x71 are present in that order',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(81, NULL,'8.8.1.3','Tag 0x72 is optionally present and follows tags from 73-4.19',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(82, NULL,'8.8.1.4','Tag 0xFE is present and follows tags from 73-4.19, 73-4.20',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(83, NULL,'8.8.1.5','No tags other than (0x70, 0x71, 0x72, 0xFE) are present',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(84, NULL,'8.8.101','Tag 0xFE has length of 0',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(85, NULL,'8.9.0.1','Confirm that X509 Cert for Card Authentication on PIV applet conforms to SP800-73 Appendix A',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(86, NULL,'8.9.0.2','Length field encoded as shown in SP800-85B Table 1',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(87, NULL,'8.9.0.3','Tag encoded as 3 bytes',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(88, NULL,'8.9.0.4','Each data object returned with 2 byte status word (90 00)',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(89, NULL,'8.9.1.1','Container blob is no larger than 1905 bytes',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(90, NULL,'8.9.1.2','Tags 0x70 and 0x71 are present in that order',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(91, NULL,'8.9.1.3','Tag 0x72 is optionally present and follows tags from 73-4.19',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(92, NULL,'8.9.1.4','Tag 0xFE is present and follows tags from 73-4.19, 73-4.20',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(93, NULL,'8.9.1.5','No tags other than (0x70, 0x71, 0x72, 0xFE) are present',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(94, NULL,'8.9.101','Tag 0xFE has length of 0',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(95, NULL,'8.10.0.1','Confirm that Security Object data object conforms to SP800-73 Appendix A',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(96, NULL,'8.10.0.2','Length field encoded as shown in SP800-85B Table 1',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(97, NULL,'8.10.0.3','Tag encoded as 3 bytes',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(98, NULL,'8.10.0.4','Each data object returned with 2 byte status word (90 00)',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(99, NULL,'8.10.1.1','Security Object blob no larger than 1008 bytes',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(100, NULL,'8.10.1.2','Tags 0xBA, 0xBB, 0XFE are present in that order',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(101, NULL,'8.10.1.3','No tags other than (0xBA, 0xBB, 0xFE) are present',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(102, NULL,'8.10.1.4','Parse data at tag 0xBA and for each data container found ensure that performing a select returns status words 0x90, 0x00',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(103, NULL,'9.1.1.1','Validate that CBEFF structure conforms to SP800-76 Table 7',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(104, NULL,'9.1.1.2','BDB length field is non-zero',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(105, NULL,'9.1.1.3','Recorded length matches actual length',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(106, NULL,'9.1.1.4','SB length field is non-zero',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(107, NULL,'9.1.2.1','Card Holder Fingerprint object length equals sum of CBEFF header length + BDB length + SB length',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(108, NULL,'9.1.2.2','Validate that the biometric data block is signed but not encrypted',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(109, NULL,'9.1.2.3','Validate that BDB Format Owner is set to a value of 0x001B denoting M1, the INCITS Technical Committee on Biometrics.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(110, NULL,'9.1.2.4','Validate that for mandatory fingerprint minutiae template data stored on a PIV card, the BDB Format Type is set to a value of 0x0201',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(111, NULL,'9.1.2.5','Validate that that the creation date in the PIV Patron Format is encoded in 8 bytes using a binary representation of YYYYMMDDhhmmssZ',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(112, NULL,'9.1.2.6','Validate date encoding on Validity Period in PIV Patron Format',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(113, NULL,'9.1.2.7','Valdiate that that Biometric Type has the value 0x000008',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(114, NULL,'9.1.2.8','Validate that for the mandatory minutia PIV card templates, the CBEFF biometric data type encoding value shall be b100xxxxx, which corresponds to biometric data that has been processed.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(115, NULL,'9.1.2.9','Validate that the biometric quality field carries valid values',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(116, NULL,'9.1.2.10','Validate that that the Creator field in the PIV Patron Format contains 18 bytes of which the first K <= 17 bytes shall be ASCII characters, and the first of the remaining 18-K shall be a null terminator (zero)',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(117, NULL,'9.1.2.11','Validate that FASC-N field in the PIV Patron Format contains the same 25 bytes as the FASC-N component of the CHUID identifier',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(118, NULL,'9.1.2.12','Validate that the Reserved for Future Use field is equal to 0x00000000',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(119, NULL,'9.2.1.1','Validate that CBEFF structure conforms to SP800-76 Table 7',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(120, NULL,'9.2.1.2','BDB length field is non-zero',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(121, NULL,'9.2.1.3','Recorded length matches actual length',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(122, NULL,'9.2.1.4','SB length field is non-zero',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(123, NULL,'9.2.2.1','Card Holder Fingerprint object length equals sum of CBEFF header length + BDB length + SB length',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(124, NULL,'9.2.2.2','Validate that the biometric data block is signed but not encrypted',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(125, NULL,'9.2.2.3','Validate that BDB Format Owner is set to a value of 0x001B denoting M1, the INCITS Technical Committee on Biometrics.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(126, NULL,'9.2.2.4','Validate that for optional facial image data stored on a PIV card, the BDB Format Type is set to a value of 0x0501',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(127, NULL,'9.2.2.5','Validate that that the creation date in the PIV Patron Format is encoded in 8 bytes using a binary representation of YYYYMMDDhhmmssZ',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(128, NULL,'9.2.2.6','Validate date encoding on Validity Period in PIV Patron Format',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(129, NULL,'9.2.2.7','Validate that Biometric Type has the value 0x000002',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(130, NULL,'9.2.2.8','Validate that the CBEFF biometric data type encoding value shall be b001xxxxx, which corresponds to the raw biometric data',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(131, NULL,'9.2.2.9','The Biometric Data Quality field is -2 or 0 - 100.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(132, NULL,'9.2.2.10','Validate that that the Creator field in the PIV Patron Format contains 18 bytes of which the first K <= 17 bytes shall be ASCII characters, and the first of the remaining 18-K shall be a null terminator (zero)',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(133, NULL,'9.2.2.11','Validate that FASC-N field in the PIV Patron Format contains the same 25 bytes as the FASC-N component of the CHUID identifier',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(134, NULL,'9.2.2.12','Validate that the Reserved for Future Use field is equal to 0x00000000',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(135, NULL,'9.3.1.1','Validate that CBEFF structure conforms to SP800-76 Table 7',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(136, NULL,'9.3.1.2','BDB length field is non-zero',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(137, NULL,'9.3.1.3','Recorded length matches actual length',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(138, NULL,'9.3.1.4','SB length field is non-zero',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(139, NULL,'9.3.2.1','Patron Header Version field has a value of 0x03.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(140, NULL,'9.3.2.2','Validate that the biometric data block is signed but not encrypted',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(141, NULL,'9.3.2.3','The BDB Format Owner field has a value of 0x0101.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(142, NULL,'9.3.2.4','The BDB Format Type field has a value of 0x0009.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(143, NULL,'9.2.2.5','Validate that that the creation date in the PIV Patron Format is encoded in 8 bytes using a binary representation of YYYYMMDDhhmmssZ',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(144, NULL,'9.3.2.6','Validate date encoding on Validity Period in PIV Patron Format',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(145, NULL,'9.3.2.7','The value of the Biometric Type field for the iris image is 0x000010.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(146, NULL,'9.3.2.8','Validate that the CBEFF biometric data type encoding value shall be b01000000, which corresponds to the raw biometric data',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(147, NULL,'9.3.2.9','The Biometric Data Quality field is -2 or 0 - 100.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(148, NULL,'9.3.2.10','Validate that that the Creator field in the PIV Patron Format contains 18 bytes of which the first K <= 17 bytes shall be ASCII characters, and the first of the remaining 18-K shall be a null terminator (zero)',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(149, NULL,'9.3.2.11','Validate that FASC-N field in the PIV Patron Format contains the same 25 bytes as the FASC-N component of the CHUID identifier',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(150, NULL,'9.3.2.12','Validate that the Reserved for Future Use field is equal to 0x00000000',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(151, NULL,'9.3.1.1','BDB length field is non-zero',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(152, NULL,'9.3.1.2','Recorded length matches actual length',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(153, NULL,'9.3.1.3','SB length field is non-zero',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(154, NULL,'9.4.1.1','Extract contents of format identifier, confirm value 0x464D5200',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(155, NULL,'9.4.1.2','Extract contents of version identifier, confirm value 0x20323030',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(156, NULL,'9.4.1.3','Biometric Data Block length (L) where 26 <= L <= 1574',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(157, NULL,'9.4.1.4','Confirm that product identifier owner and product identifier type are non-zero and that MSBs identify vendor, LSBs identify minutia detection algorithm version',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(158, NULL,'9.4.1.5','Confirm that product identifier owner and product identifier type are non-zero and that MSBs identify vendor, LSBs identify minutia detection algorithm version',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(159, NULL,'9.4.1.6','Confirm that capture equipment compliance has a value of 1000b',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(160, NULL,'9.4.1.7','Confirm that capture equipment id is non-NULL',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(161, NULL,'9.4.1.8','Width of the Size of Scanned Image in x direction is the larger of the widths of the two input',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(162, NULL,'9.4.1.9','Height of the Size of Scanned Image in y direction is the larger of the heights of the two input images.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(163, NULL,'9.4.1.10','X resolution has a value of 197',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(164, NULL,'9.4.1.11','X resolution has a value of 197',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(165, NULL,'9.4.1.12','Number of Finger Views is 2',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(166, NULL,'9.4.1.13','Confirm that reserved byte is set to 0',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(167, NULL,'9.4.2.x','Confirm that Finger View Header has value A',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(168, NULL,'9.4.2.x','Confirm that Finger View Position (0,14)',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(169, NULL,'9.4.2.1','If only 1 minutiae present for a finger, view number must be 0',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(170, NULL,'9.4.2.2','Impression type must be 0 or 2',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(171, NULL,'9.4.2.3','Finger Quality value shall be between 20, 40, 60, 80, 100, 254, or 255.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(172, NULL,'9.4.2.4','Number of minutia (0..128)',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(173, NULL,'9.4.2.5','Minutiae Type value shall be 01b, 10b, or 00b.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(174, NULL,'9.4.2.6','Verify that position is one of the valid x,y coordinate types in the original image',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(175, NULL,'9.4.2.7','Verify that angle (0,179)',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(176, NULL,'9.4.2.8','Verify that quality (0,100)',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(177, NULL,'9.4.2.9','Verify that extended data block length is 0',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(178, NULL,'10.1.1.1','The CHUID buffer contains an asymmetric digital signature that is implemented as a SignedData type and is encoded as a CMS external signature according to RFC 5652.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(179, NULL,'10.1.1.2','The value of the version field of the SignedData is 3.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(180, NULL,'10.1.1.3','The digestAlgorithms field value of the SignedData is in accordance with Table 3-2 of SP800-78-4.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(181, NULL,'10.1.1.4','The eContent field has been omitted and the eContentType asserts id-piv-CHUIDSecurityObject in encapContentInfo.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(182, NULL,'10.1.1.5','The crls field is omitted from the SignedData.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(183, NULL,'10.1.1.6','The signerInfos field in the SignedData contains a single SignerInfo.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(184, NULL,'10.1.1.7','The SignerIdentifier in the SignerInfo uses the issuerAndSerialNumber choice and it corresponds to the issuer and serialNumber fields found in the X.509 certificate of the signer.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(185, NULL,'10.1.1.8','The digestAlgorithm field value of the SignerInfo is in accordance with Table 3-2 of SP80078 and it matches the value present in the digestAlgorithms field of the SignedData.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(186, NULL,'10.1.1.9','The value of the hash obtained from the message digest attribute of the signedAttrs of the SignerInfo is identical to that obtained after hashing the concatenated contents of the CHUID, excluding the asymmetric digital signature field and the Buffer Length field, if present.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(187, NULL,'10.1.1.10','The value of the subject DN obtained from the certificate in the certificates field in the SignedData is identical to that obtained from the pivSigner-DN attribute of the signedAttrs of the SignerInfo.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(188, NULL,'10.1.1.11','The signatureAlgorithm field specified in the SignerInfo field for RSA with PKCS #1 v1.5 padding specifies the rsaEncryption OID (as per Section 3.2 of RFC 3370) and for ECDSA and RSA with PSS padding, the signatureAlgorithm shall be in accordance with Table 3-3 of SP800-78-4.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(189, NULL,'10.1.1.12','The certificate from the cert bag succesfully validates the CMS signature.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(190, NULL,'10.1.1.11.1','The signing certificate contains id-PIV-content-signing (2.16.840.1.101.3.6.7) in the EKU extension keyPurposeId field.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(191, NULL,'10.1.1.11.2','Ensure that RSA key has 2048-bit modulus',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(192, NULL,'10.2.1.1','The CBEFF_SIGNATURE_BLOCK is present in the biometric CBEFF structure containing an asymmetric digital signature that is implemented as a SignedData type according to RFC 5652.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(193, NULL,'10.2.1.2','PKCS#7 version is set to 3',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(194, NULL,'10.2.1.3.1','Signing key length is valid',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(195, NULL,'10.2.1.3.2','digestAlgorithms field value of the SignedData is in accordance with Table 3-2 of SP80078.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(196, NULL,'10.2.1.4','eContent field has been omitted and the eContentType asserts id-piv-biometricObject in encapContentInfo.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(197, NULL,'10.2.1.5','The crls field is omitted from the SignedData.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(198, NULL,'10.2.1.6','The signerInfos field in the SignedData contains a single SignerInfo.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(199, NULL,'10.2.1.7.1','SignerId uses ths IssuerAndSerialNumber choice',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(200, NULL,'10.2.1.7.2','Issuer and Serial in the signer info corresponds to the issuer and serial values in the signer certificate',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(201, NULL,'10.2.1.8.3','The digestAlgorithm field value of the SignerInfo is in accordance with Table 3-2 of SP80078 and it matches the value present in the digestAlgorithms field of the SignedData.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(202, NULL,'10.2.1.8.4','The digestAlgorithm field value of the SignerInfo is in accordance with Table 3-2 of SP80078',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(203, NULL,'10.2.1.9','Message digest from signed attributes bag matches the digest over Fingerprint biometric data (excluding contents of digital signature field)',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(204, NULL,'10.2.1.10','The value of the subject DN obtained from the certificate in the certificates field in the SignedData is identical to that obtained from the pivSigner-DN attribute of the signedAttrs of the SignerInfo.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(205, NULL,'10.2.1.11','The signature algorithm value for RSA with PKCS #1 v1.5 padding specifies the rsaEncryption OID (as per Section 3.2 of RFC 3370) and for ECDSA and RSA with PSS padding, the signatureAlgorithm is in accordance with Table 3-3 of SP80078.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(206, NULL,'10.1.1.12','Certificate from the cert bag succesfully validates the CMS signature',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(207, NULL,'11.7.2.4.1','Confirm that signing certificate contains id-PIV-content-signing in EKU extension',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(208, NULL,'10.2.1.14','Confirm that signed attributes include pivFASC-N and entryUUID attributes and that they match FASC-N and GUID read from CHUID container',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(209, NULL,'10.2.1.12.1','RSA key has a minimum length of 2048-bit modulus',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(210, NULL,'10.2.1.12.2','ECDSA key has a minimum of Curve P-256',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(211, NULL,'10.2.1.12.3','Ensure that signature algorithm is one of 1.2.840.113549.1.1.5, 1.2.840.113549.1.1.11, 1.2.840.113549.1.1.10, 1.2.840.10045.4.3.2, 1.2.840.10045.4.3.3',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(212, NULL,'10.3.1.1','The CBEFF_SIGNATURE_BLOCK is present in the biometric CBEFF structure containing an asymmetric digital signature that is implemented as a SignedData type according to RFC 5652.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(213, NULL,'10.3.1.2','PKCS#7 version is set to 3',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(214, NULL,'10.3.1.3.1','Signing key length is valid',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(215, NULL,'10.3.1.3.2','digestAlgorithms field value of the SignedData is in accordance with Table 3-2 of SP80078.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(216, NULL,'10.3.1.4','eContent field has been omitted and the eContentType asserts id-piv-biometricObject in encapContentInfo.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(217, NULL,'10.3.1.5','The crls field is omitted from the SignedData.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(218, NULL,'10.3.1.6','The signerInfos field in the SignedData contains a single SignerInfo.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(219, NULL,'10.3.1.7.1','SignerId uses ths IssuerAndSerialNumber choice',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(220, NULL,'10.3.1.7.2','Issuer and Serial in the signer info corresponds to the issuer and serial values in the signer certificate',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(221, NULL,'10.3.1.8.3','The digestAlgorithm field value of the SignerInfo is in accordance with Table 3-2 of SP80078 and it matches the value present in the digestAlgorithms field of the SignedData.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(222, NULL,'10.3.1.8.4','The digestAlgorithm field value of the SignerInfo is in accordance with Table 3-2 of SP80078',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(223, NULL,'10.3.1.9','Message digest from signed attributes bag matches the digest over Fingerprint biometric data (excluding contents of digital signature field)',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(224, NULL,'10.3.1.10','The value of the subject DN obtained from the certificate in the certificates field in the SignedData is identical to that obtained from the pivSigner-DN attribute of the signedAttrs of the SignerInfo.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(225, NULL,'10.3.1.11','The signature algorithm value for RSA with PKCS #1 v1.5 padding specifies the rsaEncryption OID (as per Section 3.2 of RFC 3370) and for ECDSA and RSA with PSS padding, the signatureAlgorithm is in accordance with Table 3-3 of SP80078.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(226, NULL,'10.3.1.12','Certificate from the cert bag succesfully validates the CMS signature',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(227, NULL,'11.7.2.4.1','Confirm that signing certificate contains id-PIV-content-signing in EKU extension',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(228, NULL,'10.3.1.14','Confirm that signed attributes include pivFASC-N and entryUUID attributes and that they match FASC-N and GUID read from CHUID container',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(229, NULL,'10.4.1.1','The actual hash of the data elements on the PIV card are identical to their corresponding hash values present in the security object.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(230, NULL,'10.4.2.1','Verify that the asymmetric digital field contains a CMS signed data object with no encapsulated content  (see issue #52).',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(231, NULL,'10.4.2.2','Confirm that version of signed data structure is 1',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(232, NULL,'10.4.2.3','Verify that eContent contains a security object',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(233, NULL,'10.4.2.4','The eContent field contains a correctly formatted ldsSecurityobject and the eContentType asserts id-icao-ldsSecurityObject in encapContentInfo.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(234, NULL,'10.4.2.5','The certificates field is omitted from the SignedData.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(235, NULL,'10.4.2.6','Validate signing and digest algorithms',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(236, NULL,'10.4.2.7','The signatureAlgorithm field specified in the SignerInfo field for RSA with PKCS #1 v1.5 padding specifies the rsaEncryption OID (as per Section 3.2 of RFC 3370) and for ECDSA and RSA with PSS padding, the signatureAlgorithm shall be in accordance with Table 3-3 of SP80078.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(237, NULL,'11.1.1.1.1','The signatureAlgorithm value is in accordance with Table 3-3 of SP80078',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(238, NULL,'11.1.1.1.2','If the algorithm value is id-RSASSA-PSS, verify that the signature->parameters field is populated with SHA-256 (OID = 2.16.840.1.101.3.4.2.1). For the other RSA algorithms, the parameters field is populated with NULL. For ECDSA, the parameters field is absent.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(239, NULL,'11.1.1.1.3','The key sizes used are in accordance with Table 3-1 of SP80078.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(240, NULL,'11.1.1.2','The PIV authentication key is generated using an allowed asymmetric key algorithm.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(241, NULL,'11.1.1.3','Confirm digitalSignature bit is set',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(242, NULL,'11.1.1.4','Confirm no other keyUsage bits are set',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(243, NULL,'11.1.1.5.1','Confirm certificate policies extension is present',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(244, NULL,'11.1.1.5.2','Confirm that id- fpki-common-authentication OID is asserted in certificate policies',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(245, NULL,'11.1.2.3.1','authorityInformationAccess extension is present',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(246, NULL,'11.1.2.3.2','An accessMethod containing id-ad-ocsp is present.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(247, NULL,'11.1.2.3.3','The accessLocation for this AccessMethod is of type uniformResourceIdentifier and that the scheme is http (not https).',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(248, NULL,'11.1.2.4','Confirm that piv interim extension is present',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(249, NULL,'11.1.2.5','Sign arbitrary data using the specified key container and confirm that the certificate can validate it',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(250, NULL,'11.1.2.6.1','GeneralName field exists that contains an otherName with a type-id asserting the pivFASC-N OID. The value field of this otherName contains the FASC-N for the cardholder which matches the FASC-N obtained from parsing the CHUID.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(251, NULL,'11.1.2.6.2','GeneralName field exists that contain a URI asserting a Card UUID as specified by [RFC4122, Section 3] that matches the GUID value in the CHUID.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(252, NULL,'11.1.2.6.3','No other name forms appear in the subjectAltName extension',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(253, NULL,'11.1.2.7','Confirm that expiration of certificate is not later than expiration of card',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(254, NULL,'11.1.2.8','For RSA certs, confirm that public exponent >= 65537',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(255, NULL,'11.2.1.1','Digital Signature cert - The signatureAlgorithm value is in accordance with Table 3-3 of SP 800-78',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(256, NULL,'11.2.1.2','Key Mangement cert - If the algorithm value is id-RSASSA-PSS, verify that the signature->parameters field is populated with SHA-256 (OID = 2.16.840.1.101.3.4.2.1). For the other RSA algorithms, the parameters field is populated with NULL. For ECDSA, the parameters field is absent.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(257, NULL,'','keyUsage extension is present',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(258, NULL,'11.2.2.1.1','digitalSignature and nonRepudiation bits have been set.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(259, NULL,'11.2.2.1.2','Digital Signature cert - Digital Signature Cert - Elliptic curve keys have keyAgreement bit set',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(260, NULL,'11.2.2.1.3','Digital Signature cert - Digital Signature cert - No other keyUsage bits are set.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(261, NULL,'11.2.2.2','Digital Signature cert - Sign arbitrary data using the specified key container and confirm that the certificate can validate it',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(262, NULL,'11.2.2.3','The expiration date of the digital signature certificate is not beyond the expiration date of the CHUID i.e. the PIV card.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(263, NULL,'11.2.2.4','Digital Signature cert - For RSA certs, confirm that public exponent >= 65537',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(264, NULL,'11.3.1.1','Key Management cert - The signatureAlgorithm value is in accordance with Table 3-3 of SP 800-78',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(265, NULL,'11.3.1.2','Key Mangement cert - If the algorithm value is id-RSASSA-PSS, verify that the signature->parameters field is populated with SHA-256 (OID = 2.16.840.1.101.3.4.2.1). For the other RSA algorithms, the parameters field is populated with NULL. For ECDSA, the parameters field is absent.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(266, NULL,'11.3.2.1.1','Key Management cert - RSA keys have keyEncipherment bit set',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(267, NULL,'11.3.2.1.2','Key Management cert - Key Management Cert - Elliptic curve keys have keyAgreement bit set',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(268, NULL,'11.3.2.1.3','Key Management cert - Key Management cert - No other keyUsage bits are set.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(269, NULL,'11.3.2.2','Key Management cert - Sign arbitrary data using the specified key container and confirm that the certificate can validate it',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(270, NULL,'11.3.2.3','Key Management cert - For RSA certs, confirm that public exponent >= 65537',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(271, NULL,'11.4.1.1','Card Auth cert - signatureAlgorithm value is in accordance with Table 3-3 of SP80078',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(272, NULL,'11.4.1.2','Card Auth cert - If the algorithm value is id-RSASSA-PSS, verify that the signature->parameters field is populated with SHA-256 (OID = 2.16.840.1.101.3.4.2.1). For the other RSA algorithms, the parameters field is populated with NULL. For ECDSA, the parameters field is absent.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(273, NULL,'11.4.2.1.1','Card Auth cert - keyUsage extension is present.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(274, NULL,'11.4.2.1.2','Card Auth cert - keyUsage digitalSignature bit is set.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(275, NULL,'11.4.2.1.3','Card Auth cert - No other keyUsage bits are set.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(276, NULL,'11.4.2.2','Card Auth cert - Asserts id- fpki-common-cardAuth OID in certificate policies.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(277, NULL,'11.4.2.3.1','Card Auth cert - extKeyUsage is present.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(278, NULL,'11.4.2.3.2','Card Auth cert - EKU asserts the id-PIV-cardAuth OID, and does not assert any other OIDs.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(279, NULL,'11.4.2.4.1','Card Auth cert - authorityInformationAccess extension is present',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(280, NULL,'11.4.2.4.2','Card Auth cert - Confirm that an access method containing id-ad-ocsp is prsent',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(281, NULL,'11.4.2.4.3','Card Auth cert - Confirm that the access method is uniformResourceIdentifier and that protocol is http',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(282, NULL,'11.4.2.5','Card Auth cert - Confirm that piv interim extension is present',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(283, NULL,'11.4.2.6','Card Auth cert - Sign arbitrary data using the specified key container and confirm that the certificate can validate it',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(284, NULL,'11.4.2.6.1','Card Auth cert - For RSA certs, confirm that public exponent >= 65537',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(285, NULL,'11.7.2.4.1','A policyIdentifier field in the certificatePolicies extension asserts the id-fpki-common-piv-contentSigning policy of [COMMON] (OID = 2.16.840.1.101.3.2.1.3.39) and the extended key usage (extKeyUsage) extension will assert the id-PIV-content-signing.',NULL, 1, 1);
INSERT INTO "TestCases" VALUES(286, NULL,'11.7.2.4.2','A policyIdentifier field in the certificatePolicies extension asserts the id-fpki-common-piv-contentSigning policy of [COMMON] (OID = 2.16.840.1.101.3.2.1.3.39) and the extended key usage (extKeyUsage) extension will assert the id-PIV-content-signing.',NULL, 1, 1);
INSERT INTO "TestsToSteps" VALUES(1, 1,1,0,NULL);
INSERT INTO "TestsToSteps" VALUES(2, 2,2,0,NULL);
INSERT INTO "TestsToSteps" VALUES(3, 3,3,0,NULL);
INSERT INTO "TestsToSteps" VALUES(4, 4,4,0,NULL);
INSERT INTO "TestsToSteps" VALUES(5, 6,5,0,NULL);
INSERT INTO "TestsToSteps" VALUES(6, 7,6,0,NULL);
INSERT INTO "TestsToSteps" VALUES(7, 8,7,0,NULL);
INSERT INTO "TestsToSteps" VALUES(8, 9,8,0,NULL);
INSERT INTO "TestsToSteps" VALUES(9, 10,9,0,NULL);
INSERT INTO "TestsToSteps" VALUES(10, 11,10,0,NULL);
INSERT INTO "TestsToSteps" VALUES(11, 28,11,0,NULL);
INSERT INTO "TestsToSteps" VALUES(12, 1,12,0,NULL);
INSERT INTO "TestsToSteps" VALUES(13, 2,13,0,NULL);
INSERT INTO "TestsToSteps" VALUES(14, 3,14,0,NULL);
INSERT INTO "TestsToSteps" VALUES(15, 4,15,0,NULL);
INSERT INTO "TestsToSteps" VALUES(16, 13,16,0,NULL);
INSERT INTO "TestsToSteps" VALUES(17, 15,17,0,NULL);
INSERT INTO "TestsToSteps" VALUES(18, 16,18,0,NULL);
INSERT INTO "TestsToSteps" VALUES(19, 17,19,0,NULL);
INSERT INTO "TestsToSteps" VALUES(20, 18,20,0,NULL);
INSERT INTO "TestsToSteps" VALUES(21, 19,21,0,NULL);
INSERT INTO "TestsToSteps" VALUES(22, 14,22,0,NULL);
INSERT INTO "TestsToSteps" VALUES(23, 20,23,0,NULL);
INSERT INTO "TestsToSteps" VALUES(24, 21,24,0,NULL);
INSERT INTO "TestsToSteps" VALUES(25, 18,25,0,NULL);
INSERT INTO "TestsToSteps" VALUES(26, 29,26,0,NULL);
INSERT INTO "TestsToSteps" VALUES(27, 28,27,0,NULL);
INSERT INTO "TestsToSteps" VALUES(28, 1,28,0,NULL);
INSERT INTO "TestsToSteps" VALUES(29, 2,29,0,NULL);
INSERT INTO "TestsToSteps" VALUES(30, 3,30,0,NULL);
INSERT INTO "TestsToSteps" VALUES(31, 4,31,0,NULL);
INSERT INTO "TestsToSteps" VALUES(32, 23,32,0,NULL);
INSERT INTO "TestsToSteps" VALUES(33, 24,33,0,NULL);
INSERT INTO "TestsToSteps" VALUES(34, 25,34,0,NULL);
INSERT INTO "TestsToSteps" VALUES(35, 26,35,0,NULL);
INSERT INTO "TestsToSteps" VALUES(36, 27,36,0,NULL);
INSERT INTO "TestsToSteps" VALUES(37, 28,37,0,NULL);
INSERT INTO "TestsToSteps" VALUES(38, 1,38,0,NULL);
INSERT INTO "TestsToSteps" VALUES(39, 2,39,0,NULL);
INSERT INTO "TestsToSteps" VALUES(40, 3,40,0,NULL);
INSERT INTO "TestsToSteps" VALUES(41, 4,41,0,NULL);
INSERT INTO "TestsToSteps" VALUES(42, 65,42,0,NULL);
INSERT INTO "TestsToSteps" VALUES(43, 66,43,0,NULL);
INSERT INTO "TestsToSteps" VALUES(44, 67,44,0,NULL);
INSERT INTO "TestsToSteps" VALUES(45, 64,45,0,NULL);
INSERT INTO "TestsToSteps" VALUES(46, 28,46,0,NULL);
INSERT INTO "TestsToSteps" VALUES(47, 1,47,0,NULL);
INSERT INTO "TestsToSteps" VALUES(48, 2,48,0,NULL);
INSERT INTO "TestsToSteps" VALUES(49, 3,49,0,NULL);
INSERT INTO "TestsToSteps" VALUES(50, 4,50,0,NULL);
INSERT INTO "TestsToSteps" VALUES(51, 32,51,0,NULL);
INSERT INTO "TestsToSteps" VALUES(52, 33,52,0,NULL);
INSERT INTO "TestsToSteps" VALUES(53, 34,53,0,NULL);
INSERT INTO "TestsToSteps" VALUES(54, 35,54,0,NULL);
INSERT INTO "TestsToSteps" VALUES(55, 36,55,0,NULL);
INSERT INTO "TestsToSteps" VALUES(56, 28,56,0,NULL);
INSERT INTO "TestsToSteps" VALUES(57, 1,57,0,NULL);
INSERT INTO "TestsToSteps" VALUES(58, 2,58,0,NULL);
INSERT INTO "TestsToSteps" VALUES(59, 3,59,0,NULL);
INSERT INTO "TestsToSteps" VALUES(60, 4,60,0,NULL);
INSERT INTO "TestsToSteps" VALUES(61, 37,61,0,NULL);
INSERT INTO "TestsToSteps" VALUES(62, 30,62,0,NULL);
INSERT INTO "TestsToSteps" VALUES(63, 31,63,0,NULL);
INSERT INTO "TestsToSteps" VALUES(64, 28,64,0,NULL);
INSERT INTO "TestsToSteps" VALUES(65, 1,65,0,NULL);
INSERT INTO "TestsToSteps" VALUES(66, 2,66,0,NULL);
INSERT INTO "TestsToSteps" VALUES(67, 3,67,0,NULL);
INSERT INTO "TestsToSteps" VALUES(68, 4,68,0,NULL);
INSERT INTO "TestsToSteps" VALUES(69, 23,69,0,NULL);
INSERT INTO "TestsToSteps" VALUES(70, 24,70,0,NULL);
INSERT INTO "TestsToSteps" VALUES(71, 25,71,0,NULL);
INSERT INTO "TestsToSteps" VALUES(72, 27,72,0,NULL);
INSERT INTO "TestsToSteps" VALUES(73, 26,73,0,NULL);
INSERT INTO "TestsToSteps" VALUES(74, 28,74,0,NULL);
INSERT INTO "TestsToSteps" VALUES(75, 1,75,0,NULL);
INSERT INTO "TestsToSteps" VALUES(76, 2,76,0,NULL);
INSERT INTO "TestsToSteps" VALUES(77, 3,77,0,NULL);
INSERT INTO "TestsToSteps" VALUES(78, 4,78,0,NULL);
INSERT INTO "TestsToSteps" VALUES(79, 23,79,0,NULL);
INSERT INTO "TestsToSteps" VALUES(80, 24,80,0,NULL);
INSERT INTO "TestsToSteps" VALUES(81, 25,81,0,NULL);
INSERT INTO "TestsToSteps" VALUES(82, 26,82,0,NULL);
INSERT INTO "TestsToSteps" VALUES(83, 27,83,0,NULL);
INSERT INTO "TestsToSteps" VALUES(84, 28,84,0,NULL);
INSERT INTO "TestsToSteps" VALUES(85, 1,85,0,NULL);
INSERT INTO "TestsToSteps" VALUES(86, 2,86,0,NULL);
INSERT INTO "TestsToSteps" VALUES(87, 3,87,0,NULL);
INSERT INTO "TestsToSteps" VALUES(88, 4,88,0,NULL);
INSERT INTO "TestsToSteps" VALUES(89, 23,89,0,NULL);
INSERT INTO "TestsToSteps" VALUES(90, 24,90,0,NULL);
INSERT INTO "TestsToSteps" VALUES(91, 25,91,0,NULL);
INSERT INTO "TestsToSteps" VALUES(92, 26,92,0,NULL);
INSERT INTO "TestsToSteps" VALUES(93, 27,93,0,NULL);
INSERT INTO "TestsToSteps" VALUES(94, 28,94,0,NULL);
INSERT INTO "TestsToSteps" VALUES(95, 1,95,0,NULL);
INSERT INTO "TestsToSteps" VALUES(96, 2,96,0,NULL);
INSERT INTO "TestsToSteps" VALUES(97, 3,97,0,NULL);
INSERT INTO "TestsToSteps" VALUES(98, 4,98,0,NULL);
INSERT INTO "TestsToSteps" VALUES(99, 38,99,0,NULL);
INSERT INTO "TestsToSteps" VALUES(100, 39,100,0,NULL);
INSERT INTO "TestsToSteps" VALUES(101, 40,101,0,NULL);
INSERT INTO "TestsToSteps" VALUES(102, 41,102,0,NULL);
INSERT INTO "TestsToSteps" VALUES(103, 42,103,0,NULL);
INSERT INTO "TestsToSteps" VALUES(104, 43,104,0,NULL);
INSERT INTO "TestsToSteps" VALUES(105, 44,105,0,NULL);
INSERT INTO "TestsToSteps" VALUES(106, 45,106,0,NULL);
INSERT INTO "TestsToSteps" VALUES(107, 46,107,0,NULL);
INSERT INTO "TestsToSteps" VALUES(108, 47,108,0,NULL);
INSERT INTO "TestsToSteps" VALUES(109, 48,109,0,NULL);
INSERT INTO "TestsToSteps" VALUES(110, 79,110,0,NULL);
INSERT INTO "TestsToSteps" VALUES(111, 80,111,0,NULL);
INSERT INTO "TestsToSteps" VALUES(112, 81,112,0,NULL);
INSERT INTO "TestsToSteps" VALUES(113, 82,113,0,NULL);
INSERT INTO "TestsToSteps" VALUES(114, 83,114,0,NULL);
INSERT INTO "TestsToSteps" VALUES(115, 84,115,0,NULL);
INSERT INTO "TestsToSteps" VALUES(116, 85,116,0,NULL);
INSERT INTO "TestsToSteps" VALUES(117, 86,117,0,NULL);
INSERT INTO "TestsToSteps" VALUES(118, 87,118,0,NULL);
INSERT INTO "TestsToSteps" VALUES(119, 42,119,0,NULL);
INSERT INTO "TestsToSteps" VALUES(120, 43,120,0,NULL);
INSERT INTO "TestsToSteps" VALUES(121, 44,121,0,NULL);
INSERT INTO "TestsToSteps" VALUES(122, 45,122,0,NULL);
INSERT INTO "TestsToSteps" VALUES(123, 46,123,0,NULL);
INSERT INTO "TestsToSteps" VALUES(124, 47,124,0,NULL);
INSERT INTO "TestsToSteps" VALUES(125, 48,125,0,NULL);
INSERT INTO "TestsToSteps" VALUES(126, 79,126,0,NULL);
INSERT INTO "TestsToSteps" VALUES(127, 80,143,0,NULL);
INSERT INTO "TestsToSteps" VALUES(128, 81,128,0,NULL);
INSERT INTO "TestsToSteps" VALUES(129, 82,129,0,NULL);
INSERT INTO "TestsToSteps" VALUES(130, 83,130,0,NULL);
INSERT INTO "TestsToSteps" VALUES(131, 84,131,0,NULL);
INSERT INTO "TestsToSteps" VALUES(132, 85,132,0,NULL);
INSERT INTO "TestsToSteps" VALUES(133, 86,133,0,NULL);
INSERT INTO "TestsToSteps" VALUES(134, 87,134,0,NULL);
INSERT INTO "TestsToSteps" VALUES(135, 42,151,0,NULL);
INSERT INTO "TestsToSteps" VALUES(136, 43,152,0,NULL);
INSERT INTO "TestsToSteps" VALUES(137, 44,153,0,NULL);
INSERT INTO "TestsToSteps" VALUES(138, 45,138,0,NULL);
INSERT INTO "TestsToSteps" VALUES(139, 46,139,0,NULL);
INSERT INTO "TestsToSteps" VALUES(140, 47,140,0,NULL);
INSERT INTO "TestsToSteps" VALUES(141, 48,141,0,NULL);
INSERT INTO "TestsToSteps" VALUES(142, 82,142,0,NULL);
INSERT INTO "TestsToSteps" VALUES(143, 80,127,0,NULL);
INSERT INTO "TestsToSteps" VALUES(144, 81,144,0,NULL);
INSERT INTO "TestsToSteps" VALUES(145, 82,145,0,NULL);
INSERT INTO "TestsToSteps" VALUES(146, 83,146,0,NULL);
INSERT INTO "TestsToSteps" VALUES(147, 84,147,0,NULL);
INSERT INTO "TestsToSteps" VALUES(148, 85,148,0,NULL);
INSERT INTO "TestsToSteps" VALUES(149, 86,149,0,NULL);
INSERT INTO "TestsToSteps" VALUES(150, 87,150,0,NULL);
INSERT INTO "TestsToSteps" VALUES(151, 51,135,0,NULL);
INSERT INTO "TestsToSteps" VALUES(152, 52,136,0,NULL);
INSERT INTO "TestsToSteps" VALUES(153, 53,137,0,NULL);
INSERT INTO "TestsToSteps" VALUES(154, 50,154,0,NULL);
INSERT INTO "TestsToSteps" VALUES(155, 51,155,0,NULL);
INSERT INTO "TestsToSteps" VALUES(156, 52,156,0,NULL);
INSERT INTO "TestsToSteps" VALUES(157, 53,157,0,NULL);
INSERT INTO "TestsToSteps" VALUES(158, 53,158,0,NULL);
INSERT INTO "TestsToSteps" VALUES(159, 54,159,0,NULL);
INSERT INTO "TestsToSteps" VALUES(160, 55,160,0,NULL);
INSERT INTO "TestsToSteps" VALUES(161, 56,161,0,NULL);
INSERT INTO "TestsToSteps" VALUES(162, 56,162,0,NULL);
INSERT INTO "TestsToSteps" VALUES(163, 57,163,0,NULL);
INSERT INTO "TestsToSteps" VALUES(164, 57,164,0,NULL);
INSERT INTO "TestsToSteps" VALUES(165, 58,165,0,NULL);
INSERT INTO "TestsToSteps" VALUES(166, 59,166,0,NULL);
INSERT INTO "TestsToSteps" VALUES(167, 60,168,0,NULL);
INSERT INTO "TestsToSteps" VALUES(168, 61,167,0,NULL);
INSERT INTO "TestsToSteps" VALUES(169, 62,169,0,NULL);
INSERT INTO "TestsToSteps" VALUES(170, 63,170,0,NULL);
INSERT INTO "TestsToSteps" VALUES(171, 64,172,0,NULL);
INSERT INTO "TestsToSteps" VALUES(172, 65,173,0,NULL);
INSERT INTO "TestsToSteps" VALUES(173, 66,174,0,NULL);
INSERT INTO "TestsToSteps" VALUES(174, 67,175,0,NULL);
INSERT INTO "TestsToSteps" VALUES(175, 68,176,0,NULL);
INSERT INTO "TestsToSteps" VALUES(176, 69,177,0,NULL);
INSERT INTO "TestsToSteps" VALUES(177, 92,178,0,NULL);
INSERT INTO "TestsToSteps" VALUES(178, 93,179,0,NULL);
INSERT INTO "TestsToSteps" VALUES(179, 94,180,0,NULL);
INSERT INTO "TestsToSteps" VALUES(180, 96,181,0,NULL);
INSERT INTO "TestsToSteps" VALUES(181, 97,182,0,NULL);
INSERT INTO "TestsToSteps" VALUES(182, 98,183,0,NULL);
INSERT INTO "TestsToSteps" VALUES(183, 99,184,0,NULL);
INSERT INTO "TestsToSteps" VALUES(184, 95,185,0,NULL);
INSERT INTO "TestsToSteps" VALUES(185, 100,186,0,NULL);
INSERT INTO "TestsToSteps" VALUES(186, 102,187,0,NULL);
INSERT INTO "TestsToSteps" VALUES(187, 103,188,0,NULL);
INSERT INTO "TestsToSteps" VALUES(188, 104,206,0,NULL);
INSERT INTO "TestsToSteps" VALUES(189, 105,190,0,NULL);
INSERT INTO "TestsToSteps" VALUES(190, 114,191,0,NULL);
INSERT INTO "TestsToSteps" VALUES(191, 92,192,0,NULL);
INSERT INTO "TestsToSteps" VALUES(192, 93,193,0,NULL);
INSERT INTO "TestsToSteps" VALUES(193, 94,194,0,NULL);
INSERT INTO "TestsToSteps" VALUES(194, 95,195,0,NULL);
INSERT INTO "TestsToSteps" VALUES(195, 96,196,0,NULL);
INSERT INTO "TestsToSteps" VALUES(196, 97,197,0,NULL);
INSERT INTO "TestsToSteps" VALUES(197, 98,198,0,NULL);
INSERT INTO "TestsToSteps" VALUES(198, 99,199,0,NULL);
INSERT INTO "TestsToSteps" VALUES(199, 100,200,0,NULL);
INSERT INTO "TestsToSteps" VALUES(200, 113,201,0,NULL);
INSERT INTO "TestsToSteps" VALUES(201, 116,202,0,NULL);
INSERT INTO "TestsToSteps" VALUES(202, 106,203,0,NULL);
INSERT INTO "TestsToSteps" VALUES(203, 102,204,0,NULL);
INSERT INTO "TestsToSteps" VALUES(204, 103,205,0,NULL);
INSERT INTO "TestsToSteps" VALUES(205, 104,188,0,NULL);
INSERT INTO "TestsToSteps" VALUES(206, 105,285,0,NULL);
INSERT INTO "TestsToSteps" VALUES(207, 107,208,0,NULL);
INSERT INTO "TestsToSteps" VALUES(208, 114,209,0,NULL);
INSERT INTO "TestsToSteps" VALUES(209, 115,210,0,NULL);
INSERT INTO "TestsToSteps" VALUES(210, 116,211,0,NULL);
INSERT INTO "TestsToSteps" VALUES(211, 92,212,0,NULL);
INSERT INTO "TestsToSteps" VALUES(212, 93,213,0,NULL);
INSERT INTO "TestsToSteps" VALUES(213, 94,214,0,NULL);
INSERT INTO "TestsToSteps" VALUES(214, 95,215,0,NULL);
INSERT INTO "TestsToSteps" VALUES(215, 96,216,0,NULL);
INSERT INTO "TestsToSteps" VALUES(216, 97,217,0,NULL);
INSERT INTO "TestsToSteps" VALUES(217, 98,218,0,NULL);
INSERT INTO "TestsToSteps" VALUES(218, 99,219,0,NULL);
INSERT INTO "TestsToSteps" VALUES(219, 100,220,0,NULL);
INSERT INTO "TestsToSteps" VALUES(220, 113,221,0,NULL);
INSERT INTO "TestsToSteps" VALUES(221, 116,222,0,NULL);
INSERT INTO "TestsToSteps" VALUES(222, 106,223,0,NULL);
INSERT INTO "TestsToSteps" VALUES(223, 102,224,0,NULL);
INSERT INTO "TestsToSteps" VALUES(224, 103,225,0,NULL);
INSERT INTO "TestsToSteps" VALUES(225, 104,226,0,NULL);
INSERT INTO "TestsToSteps" VALUES(226, 105,206,0,NULL);
INSERT INTO "TestsToSteps" VALUES(227, 107,228,0,NULL);
INSERT INTO "TestsToSteps" VALUES(228, 92,230,0,NULL);
INSERT INTO "TestsToSteps" VALUES(229, 108,231,0,NULL);
INSERT INTO "TestsToSteps" VALUES(230, 109,232,0,NULL);
INSERT INTO "TestsToSteps" VALUES(231, 110,233,0,NULL);
INSERT INTO "TestsToSteps" VALUES(232, 111,234,0,NULL);
INSERT INTO "TestsToSteps" VALUES(233, 113,235,0,NULL);
INSERT INTO "TestsToSteps" VALUES(234, 112,236,0,NULL);
INSERT INTO "TestsToSteps" VALUES(235, 117,237,0,NULL);
INSERT INTO "TestsToSteps" VALUES(236, 117,238,0,NULL);
INSERT INTO "TestsToSteps" VALUES(237, 117,239,0,NULL);
INSERT INTO "TestsToSteps" VALUES(238, 117,240,0,NULL);
INSERT INTO "TestsToSteps" VALUES(239, 119,241,0,NULL);
INSERT INTO "TestsToSteps" VALUES(240, 120,242,0,NULL);
INSERT INTO "TestsToSteps" VALUES(241, 121,243,0,NULL);
INSERT INTO "TestsToSteps" VALUES(242, 122,244,0,NULL);
INSERT INTO "TestsToSteps" VALUES(243, 123,245,0,NULL);
INSERT INTO "TestsToSteps" VALUES(244, 124,246,0,NULL);
INSERT INTO "TestsToSteps" VALUES(245, 125,247,0,NULL);
INSERT INTO "TestsToSteps" VALUES(246, 126,248,0,NULL);
INSERT INTO "TestsToSteps" VALUES(247, 127,249,0,NULL);
INSERT INTO "TestsToSteps" VALUES(248, 128,250,0,NULL);
INSERT INTO "TestsToSteps" VALUES(249, 128,251,0,NULL);
INSERT INTO "TestsToSteps" VALUES(250, 128,252,0,NULL);
INSERT INTO "TestsToSteps" VALUES(251, 129,253,0,NULL);
INSERT INTO "TestsToSteps" VALUES(252, 130,254,0,NULL);
INSERT INTO "TestsToSteps" VALUES(253, 117,255,0,NULL);
INSERT INTO "TestsToSteps" VALUES(254, 117,256,0,NULL);
INSERT INTO "TestsToSteps" VALUES(255, 118,257,0,NULL);
INSERT INTO "TestsToSteps" VALUES(256, 131,258,0,NULL);
INSERT INTO "TestsToSteps" VALUES(257, 133,259,0,NULL);
INSERT INTO "TestsToSteps" VALUES(258, 120,260,0,NULL);
INSERT INTO "TestsToSteps" VALUES(259, 127,261,0,NULL);
INSERT INTO "TestsToSteps" VALUES(260, 129,262,0,NULL);
INSERT INTO "TestsToSteps" VALUES(261, 130,263,0,NULL);
INSERT INTO "TestsToSteps" VALUES(262, 117,264,0,NULL);
INSERT INTO "TestsToSteps" VALUES(263, 117,265,0,NULL);
INSERT INTO "TestsToSteps" VALUES(264, 132,266,0,NULL);
INSERT INTO "TestsToSteps" VALUES(265, 133,267,0,NULL);
INSERT INTO "TestsToSteps" VALUES(266, 120,268,0,NULL);
INSERT INTO "TestsToSteps" VALUES(267, 127,269,0,NULL);
INSERT INTO "TestsToSteps" VALUES(268, 130,270,0,NULL);
INSERT INTO "TestsToSteps" VALUES(269, 117,271,0,NULL);
INSERT INTO "TestsToSteps" VALUES(270, 117,272,0,NULL);
INSERT INTO "TestsToSteps" VALUES(271, 118,273,0,NULL);
INSERT INTO "TestsToSteps" VALUES(272, 119,274,0,NULL);
INSERT INTO "TestsToSteps" VALUES(273, 120,275,0,NULL);
INSERT INTO "TestsToSteps" VALUES(274, 134,276,0,NULL);
INSERT INTO "TestsToSteps" VALUES(275, 135,277,0,NULL);
INSERT INTO "TestsToSteps" VALUES(276, 136,278,0,NULL);
INSERT INTO "TestsToSteps" VALUES(277, 123,279,0,NULL);
INSERT INTO "TestsToSteps" VALUES(278, 124,280,0,NULL);
INSERT INTO "TestsToSteps" VALUES(279, 125,281,0,NULL);
INSERT INTO "TestsToSteps" VALUES(280, 126,282,0,NULL);
INSERT INTO "TestsToSteps" VALUES(281, 127,283,0,NULL);
INSERT INTO "TestsToSteps" VALUES(282, 130,284,0,NULL);
INSERT INTO "TestsToSteps" VALUES(283, 136,226,0,NULL);
INSERT INTO "TestsToSteps" VALUES(284, 137,286,0,NULL);
