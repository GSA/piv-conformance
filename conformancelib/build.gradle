import javax.smartcardio.CardTerminal
import javax.smartcardio.TerminalFactory

// conformancelib/build.gradle

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
    }
}

plugins {
    id 'java-library'
    id 'org.ajoberstar.grgit' version '2.1.0'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id "de.jjohannes.extra-java-module-info" version "0.1"
}

java {
    modularity.inferModulePath.set(true)
}

apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'de.jjohannes.extra-java-module-info'

logger.warn("target java version: " + targetCompatibility)
logger.warn("source java version: " + sourceCompatibility)

eclipse {
    classpath {
        file {
            whenMerged {
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                //jre.accessRules.add(new AccessRule('0', 'javax/smartcardio/**'))
                def lib = entries.find { it.path.contains 'gov.gsa.pivconformance.conformanceblib-' + getVersion() + '.jar' }
                lib.sourcePath = fileReference(file('../libs/gov.gsa.pivconformance.conformancelib-' + getVersion() + '-sources' + '.jar'))
            }
        }
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://repository.apache.org/snapshots' }
    flatDir {
        dirs '../libs', 'build/libs'
    }
}

def getVersion = { ->
    File resourcesDir = new File(project.getProjectDir(), 'src/main/resources/')
    File versionFile = new File(resourcesDir, 'build.version')
    if(!versionFile.exists()) {
        resourcesDir.mkdirs()
        versionFile.createNewFile()
        println 'Initializing build.version file'
        versionFile.text = '0.0-changeme'
    }
    return versionFile.text.replaceAll("[\\n\\r\\t ]", "")
}

def cardTerminalPresent = { ->
    boolean terminalPresent = true // default to 'true' to prevent accidents
    try {
        TerminalFactory factory = TerminalFactory.getDefault()
        List<CardTerminal> terminals = factory.terminals().list()
        if (terminals.size() == 0) {
            println '**** No smartcard readers connected1, proceeding with tests'
            terminalPresent = false
        } else {
            println '**** Cannot run JUnit tests with smartcard reader connected'
            terminalPresent = true
        }
    } catch (Exception ex) {
        println '**** No smartcard readers connected2, proceeding with tests'
        println 'Exception ' + '\n' + ex.getStackTrace()
        terminalPresent = false
    }
    return terminalPresent
}

// custom task from
// https://stackoverflow.com/questions/39444908/how-to-create-an-html-report-for-junit-5-tests
// to get readable output for passing tests
configurations {
    junitXmlToHtml
}

//sourceSets.main.java.srcDirs = ['src']

dependencies {
    api 'org.bouncycastle:bcpkix-jdk15on:1.66'
    api 'org.bouncycastle:bcprov-jdk15on:1.66'
    api 'commons-cli:commons-cli:1.4'
    api 'org.apache.commons:commons-csv:1.8'
    api 'commons-codec:commons-codec:1.15'
    api 'ch.qos.logback:logback-classic:1.3.0-alpha5'
    api 'ch.qos.logback:logback-core:1.3.0-alpha5'
    api 'org.xerial:sqlite-jdbc:3.32.3.2'
    api 'org.apache.ibatis:ibatis-core:3.0'
    api 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    api 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    api 'org.junit.jupiter:junit-jupiter-params:5.7.0'
    api 'org.junit.platform:junit-platform-launcher:1.7.0'
    api 'junit:junit:4.13'
    api 'info.picocli:picocli:3.6.0'
    api 'gov.gsa:gov.gsa.pivconformance.cardlib:' + getVersion()

    testCompile 'gov.gsa:gov.gsa.pivconformance.cardlib:' + getVersion()
    testCompile 'org.junit.vintage:junit-vintage-engine:5.7.0'

    testRuntime 'gov.gsa:gov.gsa.pivconformance.cardlib:' + getVersion()
    runtime 'gov.gsa:gov.gsa.pivconformance.cardlib:' + getVersion()
    runtime 'org.junit.jupiter:junit-jupiter:5.7.0'
    runtime 'info.picocli:picocli:3.6.0'

    junitXmlToHtml 'org.apache.ant:ant-junit:1.10.8'
}

jar {
    doFirst {
        version = getVersion()
    }
    manifest {
         attributes(
 		'Manifest-Version': getVersion(),
 		'Created-By': 'General Services Administration',
 		'Automatic-Module-Name': 'gov.gsa.pivconformance.conformancelib',
 		'Multi-Release': 'false',
 		'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
 		'Implementation-Title': 'gov.gsa.pivconformance.conformancelib',
 		'Implementation-Version': getVersion(),
 		'Implementation-Vendor': 'General Services Administration',
 		'Bundle-ManifestVersion' : '1',
 		'Bundle-SymbolicName': 'gov.gsa.pivconformance.conformancelib',
 		'Bundle-Name': 'gov.gsa.pivconformance.conformancelib',
 		'Bundle-Vendor': 'gov.gsa',
 		'Bundle-RequiredExecutionEnvironment': 'JavaSE-11',
        'Export-Package':'gov.gsa.pivconformance.conformancelib;version=' + getVersion() + ', gov.gsa.pivconformance.conformancelib.test;version=' + getVersion() + ', gov.gsa.pivconformance.conformancelib.configuration;version=' + getVersion() + ', gov.gsa.pivconformance.conformancelib.junitoptions;version=' + getVersion() + ', gov.gsa.pivconformance.conformancelib.tests;version=' + getVersion() + ', gov.gsa.pivconformance.conformancelib.tools.junitoptions;version=' + getVersion() + ', gov.gsa.pivconformance.conformancelib.utilities;version=' + getVersion(),
        'Import-Package': '*',
 		'Specification-Title': 'gov.gsa.pivconformance.conformancelib',
 		'Specification-Version': getVersion(),
 		'Specification-Vendor': 'General Services Administration',
 		'Sealed': 'false'
         )
    }
    doLast {
        configurations.testRuntimeClasspath.each { println it }
    }
}

extraJavaModuleInfo {
    automaticModule("ber-tlv-1.0-11.jar","com.payneteasy")
    automaticModule("slf4j-api-2.0.0-alpha1.jar", "org.slf4j")
    automaticModule("hamcrest-core-1.3.jar","org.hamcrest")
    automaticModule("commons-cli-1.4.jar","org.apache.commons.cli")
    automaticModule("commons-codec-1.15.jar","org.apache.commons.codec")
    automaticModule("commons-csv-1.8.jar","org.apache.commons.csv")
    automaticModule("logback-classic-1.3.0-alpha5.jar", "ch.qos.logback")
    automaticModule("logback-core-1.3.0-alpha5.jar", "ch.qos.logback")
    automaticModule("junit-4.13.jar", "junit")
    automaticModule("ibatis-core-3.0.jar","org.apache.ibatis")
    automaticModule("sqlite-jdbc-3.32.3.2.jar","org.xerial")
    automaticModule("activation-1.1.jar","javax.activation")
    automaticModule("checker-framework-1.7.0.jar","edu.washington.cs.types.checker")
}

sourceSets {
    allResources {
        resources {
            srcDirs "src/main/resources"
        }
    }
    main {
        resources {
            source allResources.resources
        }
    }
    test {
        resources {
            source allResources.resources
        }
    }
}

compileJava {
    options.debugOptions.debugLevel = "source,lines,vars"
    if(JavaVersion.current().isJava9Compatible()) {
        def moduleName = 'gov.gsa.pivconformance.conformancelib'
        inputs.property("moduleName", moduleName)
        println 'compileJava.moduleName and version: ' + moduleName + '-' + getVersion()
    }

    doFirst {
        options.compilerArgs = [
            '--module-path', classpath.asPath,
            '--add-exports', 'java.base/com.sun.crypto.provider=gov.gsa.pivconformance.conformancelib',
            '--add-exports', 'org.junit.platform.commons/org.junit.platform.commons.util=gov.gsa.pivconformance.conformancelib'
        ]
        List<String> argumentList = options.getAllCompilerArgs()
        println 'Compiler args:'
        argumentList.each { println '  [' + it +']' }
        classpath = files()
    }
}

compileTestJava {
    def moduleName
    if(JavaVersion.current().isJava9Compatible()) {
        moduleName = 'gov.gsa.pivconformance.conformancelib.test'
        version = getVersion()
        inputs.property("moduleName", moduleName)
    }
    doFirst {
        options.compilerArgs = [
            '--module-path', classpath.asPath,
            '--add-modules', 'org.junit.jupiter.api',
            '--add-reads', "$moduleName=org.junit.jupiter.api",
            '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath
        ]
        List<String> argumentList = options.getAllCompilerArgs()
        println 'Compiler args:'
        argumentList.each { println '  [' + it +']' }
        classpath = files()
    }
}

test {
    filter {
        excludeTestsMatching "gov.gsa.pivconformance.PIV*"
    }
    if (cardTerminalPresent() == false) {
        def collection = files() //.filter { it.excludeTestsMatching 'PIV*' }
        classpath = collection
	      println 'collection.size() = ' + collection.size()
        version = getVersion()
        allJvmArgs += '-Djava.security.debug=certpath,pkcs11,provider'
        List<String> argumentList = test.getAllJvmArgs()
        println 'Args:'
        argumentList.each { println '  [' + it +']' }
        useJUnitPlatform {
            excludeTags 'PIN'
        }
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

compileJava {
    options.debugOptions.debugLevel = "source,lines,vars"
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

//shadowJar.dependsOn copyShadowLibs

task copyShadowLibs(type: Copy) {
    from configurations.shadow
    into '../libs'
}

task installSource(type: Copy) {
    dependsOn copyShadowLibs
    dependsOn sourceJar
    from sourceJar
    into '../libs' 
}

task install(type: Copy) {
    version = getVersion()
    dependsOn build
    dependsOn jar
    dependsOn shadowJar
    from jar
    into '../libs' 
}
