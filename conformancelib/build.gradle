// set up junit 5 support for gradle
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
    }
}

plugins {
    id 'java-library'
    id 'org.ajoberstar.grgit' version '2.1.0'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id "de.jjohannes.extra-java-module-info" version "0.1"
}

java {
    modularity.inferModulePath.set(true)
}

apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.junit.platform.gradle.plugin'

targetCompatibility = targetJavaVersion

logger.warn("target java version: " + targetCompatibility)
logger.warn("source java version: " + sourceCompatibility)

import org.gradle.plugins.ide.eclipse.model.AccessRule

eclipse {
    classpath {
        file {
            whenMerged {
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new AccessRule('0', 'javax/smartcardio/**'))
                def lib = entries.find { it.path.contains 'gov.gsa.pivconformance.conformancelib' +  '-' + getVersion() + '.jar' }
                lib.sourcePath = fileReference(file('../tools/85b-swing-gui/lib/gov.gsa.pivconformance.conformancelib-sources' + '-' + getVersion() + '.jar'))
            }
        }
    }
}

repositories {
    jcenter()
    maven { url 'https://repository.apache.org/snapshots' }
    flatDir {
        dirs '../cardlib/build/libs', '../libs'
    }
}

def getVersion = { ->
    File resourcesDir = new File(project.getProjectDir(), 'src/main/resources/gov/gsa/pivconformance/utils')
    File versionFile = new File(resourcesDir, 'build.version')
    if(!versionFile.exists()) {
        resourcesDir.mkdirs()
        versionFile.createNewFile()
        println 'Initializing build.version file'
        versionFile.text = '0.0-changeme'
    }
    String version = versionFile.text.replaceAll("[\\n\\r\\t ]", "")
}

// custom task from
// https://stackoverflow.com/questions/39444908/how-to-create-an-html-report-for-junit-5-tests
// to get readable output for passing tests
configurations {
    junitXmlToHtml
}

dependencies {
    compile 'org.bouncycastle:bcprov-jdk15on:1.66'
    compile 'org.bouncycastle:bcprov-ext-jdk15on:1.66'
    compile 'org.bouncycastle:bcpkix-jdk15on:1.66'
    compile 'commons-cli:commons-cli:1.4'
    compile group: 'org.apache.commons', name: 'commons-csv', version: '1.6'
    compile 'commons-codec:commons-codec:1.11'
    compile 'com.payneteasy:ber-tlv:1.0-8'
    compile group: 'org.slf4j', name:'slf4j-api', version: '2.0.0-alpha1'
    compile group: 'ch.qos.logback', name:'logback-classic', version: '1.3.0-alpha5'
    compile group: 'ch.qos.logback', name:'logback-core', version: '1.3.0-alpha5'

    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.32.3.2'
    compile group: 'org.apache.ibatis', name: 'ibatis-core', version: '3.0'
    compile 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    compile 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
    compile 'org.junit.jupiter:junit-jupiter-params:5.4.2'
    compile 'org.junit.jupiter:junit-jupiter-params:5.4.2'
    compile 'org.junit.platform:junit-platform-launcher:1.4.2'
    compile group: 'gov.gsa.pivconformance.cardlib', name:'gov.gsa.pivconformance.cardlib', version: '0.2-1-beta'

    compile group: 'info.picocli', name: 'picocli', version: '3.6.0'
    runtime 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    runtime 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
    runtime 'org.junit.jupiter:junit-jupiter-params:5.4.2'
    testRuntime 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
    testRuntime 'org.junit.jupiter:junit-jupiter-params:5.4.2'
    runtime 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    runtime 'org.junit.jupiter:junit-jupiter-params:5.4.2'
    runtime 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
    runtime 'org.junit.platform:junit-platform-launcher:1.4.2'

    junitXmlToHtml 'org.apache.ant:ant-junit:1.10.8'
}

jar {
    doFirst {
        version = getVersion()
    }
    doLast {
        println 'archiveName: ' + archiveName
        configurations.runtime.each { println it }
    }
}

extraJavaModuleInfo {

    module("bcprov-jdk15on-1.66.jar", "org.bouncycastle", "1.66") {
        exports("bcprov.jdk15on")
    }
    module("bcprov-ext-jdk15on-1.66.jar", "org.bouncycastle", "1.66") {
        exports("bcprov.ext-jdk15on")
    }
    module("bcpkix-jdk15on-1.66.jar", "org.bouncycastle", "1.66") {
        exports("bcpkix.jdk15on")
    }
    module("ber-tlv-1.0-8.jar", "com.payneteasy", "1.08") {
        exports("ber.tlv")
    }
    module("hamcrest-core-1.3.jar", "org.hamcrest", "1.3") {
        exports("hamcrest.core")
    }
    module("slf4j-api-2.0.0-alpha1.jar", "org.slf4j", "1.4") {
        exports("slf4j.api")
    }
    module("sqlite-jdbc-3.32.3.2.jar", "org.xerial.sqlite", "3.32.3.2") {
        exports("org.sqlite")
    }
    module("commons-cli-1.4.jar", "org.apache.commons.cli", "1.4") {
        exports("org.apache.commons.cli")
    }
    module("junit-4.11.jar","org.junit.jupiter", "4.11") {
        exports("org.junit")
        exports("org.junit.runner")
        exports("org.junit.internal")
    }
    module("junit-platform-launcher-5.7.0-RC1.jar","org.junit.platform", "5.7.0-RC1") {
        exports("org.junit.platform.launcher")
    }
    module("junit-platform-commons-5.7.0-RC1.jar","org.junit.platform.commons", "5.7.0-RC1") {
        exports("org.junit.platform.commons")
    }
    module("activation-1.1.jar","javax.activation", "1.1") {
        exports("activation")
    }
    module("checker-framework-1.7.0.jar","edu.washington.cs.types.checker", "1.7.0") {
        exports("checker.framework")
    }
    module("commons-csv-1.6.jar","org.apache.commons.csv", "1.6") {
        exports("org.apache.commons.csv")
    }
    module("logback-classic-1.3.0-alpha5.jar","ch.qos.logback", "1.3.0-alpha5") {
        exports("logback.classic")
    }
    module("logback-core-1.3.0-alpha5.jar","ch.qos.logback", "1.3.0-alpha5") {
        exports("logback.core")
    }
    automaticModule("ibatis-core-3.0.jar","org.apache.ibatis")
}

compileJava {
    options.debugOptions.debugLevel = "source,lines,vars"
    String moduleName = "";
    if(targetCompatibility >= (String) JavaVersion.VERSION_11) {
        moduleName = 'gov.gsa.pivconformance.conformancelib'
        inputs.property("moduleName", moduleName)
        println 'compileJava.moduleName and version: ' + moduleName + '-' + getVersion()
    }

    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

compileTestJava {
    String moduleName = "";
    if(targetCompatibility >= (String) JavaVersion.VERSION_11) {
        moduleName = 'gov.gsa.pivconformance.conformancelib.test'
        inputs.property("moduleName", moduleName)
    }
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'org.junit.jupiter.api',
                '--add-reads', "$moduleName=org.junit.jupiter.api",
                '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
        ]
        classpath = files()
    }
}

// use junit platform for tests
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

junitPlatform {
}

task sourceJar(type: Jar, dependsOn: classes) {
    doFirst {
        version = getVersion()
    }
    classifier 'sources'
    from sourceSets.main.allSource
}

task copyShadowLibs(type: Copy) {
    from configurations.shadow
    into '../libs'
}

shadowJar.dependsOn copyShadowLibs

shadowJar.doFirst {
    version = getVersion()
    println 'shadowJar.doFirst.archveName: ' + archiveName
}

// copy a jar with library sources to make this easier to step through in eclipse
task installSource(type: Copy) {
    dependsOn sourceJar
    from sourceJar
    into '../libs'
}

task install(type: Copy) {
    dependsOn jar
    dependsOn installSource
    from jar
    into '../libs'
}

