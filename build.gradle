plugins {
    id 'org.ajoberstar.grgit' version '2.1.0'
    id 'com.zyxist.chainsaw' version '0.1.3'
    id 'com.github.johnrengelman.shadow' version '2.0.2'
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

javaModule.name = 'gov.gsa.pivconformance'

repositories {
    jcenter()
    maven { url 'https://repository.apache.org/snapshots' }
}

dependencies {
    compile 'org.bouncycastle:bcprov-jdk15on:1.59+'
    compile 'org.bouncycastle:bcpkix-jdk15on:1.59+'
    compile 'commons-cli:commons-cli:1.4'
    compile 'commons-codec:commons-codec:1.11'
    compile 'org.slf4j:slf4j-api:1.8+'
    //compile 'org.slf4j:slf4j-jdk14:1.8+'
    compile 'ch.qos.logback:logback-classic:1.3+'
    shadow 'org.bouncycastle:bcprov-jdk15on:1.59'
    //compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.10.1+'
    //compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.10.1+'
    //compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.10.1+'
}

// Define the main class for the application
mainClassName = 'gov.gsa.pivconformance.tools.PIVRunner'
//mainClassName = 'gov.gsa.pivconformance.tools.PrintEnvironmentInfo'
//ext.moduleName = 'gov.gsa.pivconformance'

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    doLast {
     configurations.runtime.each { println it }
    println "Packaged version $version"
    }

}

run {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

compileJava.doFirst {
        //options.compilerArgs = ['--add-modules', 'java.smartcardio']
        def git = org.ajoberstar.grgit.Grgit.open(dir: '.')
        def commit = git.head()

        def commitId = commit.abbreviatedId
        def commitDate = commit.getDate()
        def buildDate = new Date()

        File resourcesDir = new File(project.getRootDir(), 'src/main/resources/gov/gsa/pivconformance/utils')
        File propertiesFile = new File(resourcesDir, 'version.properties')

        // The project may not have any resources, so create the directories and file
        if(!propertiesFile.exists()) {
            resourcesDir.mkdirs()
            propertiesFile.createNewFile()
        }
        Properties versionProperties = new Properties()
        versionProperties.setProperty('git.commit.time', commitDate.format('dd.MM.yy HH.mm.ss'))
        versionProperties.setProperty('build.time', buildDate.format('dd.MM.yy HH.mm.ss'))
        versionProperties.setProperty('git.commit.id', commitId)
        versionProperties.setProperty('build.version', version)
        versionProperties.store(propertiesFile.newWriter(), null)

        /*propertiesFile.text = """git.commit.id=${commitId}
git.commit.time=${commitDate.format('dd.MM.yyyy HH:mm:ss')}
build.time=${buildDate.format('dd.MM.yyyy HH:mm:ss')}
build.version=${version}
"""*/
}

