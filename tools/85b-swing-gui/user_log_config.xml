<configuration>

    <!-- this is a file appender that the root logger will post events to. Setting the level on the root logger
            will moderate verbosity. Individual facilities can be turned off as shown below. -->
    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <file>85b-swing-gui.log</file>
        <encoder>
            <pattern>%date %level [%thread] %logger{10} [%file:%line] %msg%n</pattern>
        </encoder>
    </appender>

    <!-- this log is used by conformance tests/atoms in progress. it can be omitted if there's no need to crack this stream out into a separate file. -->
    <appender name="TESTLOG" class="ch.qos.logback.core.FileAppender">
        <file>test_progress.log</file>
        <encoder>
            <pattern>%date,%level,"%msg"%n</pattern>
        </encoder>
    </appender>
    
    <!-- This is the appender that produces the conformance results CSV.
        In order to get test reports, it **MUST** be called CONFORMANCELOG -->
    <appender name="CONFORMANCELOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>conformance_results.csv</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
          <fileNamePattern>conformance_results.%i.csv</fileNamePattern>
              <minIndex>1</minIndex>
              <maxIndex>999999</maxIndex>
        </rollingPolicy>
        <!-- the application will search out this appender by name and manually rotate it at the beginning of each conformance run.
                this triggering policy is necessary to allow logback to append to a log without knowing how to rotate it. -->
        <triggeringPolicy class="gov.gsa.pivconformancegui.ManualTriggeringPolicy" />
        <encoder>
            <pattern>%date{yyyy-MM-dd HH:mm:ss},%msg%n</pattern>
        </encoder>
    </appender>

    <!-- This is the appender that produces the APDU traces.
        In order to get traces, it **MUST** be called APDULOG -->
    <appender name="APDULOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>apdu_transmission_log.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
          <fileNamePattern>apdu_transmission_log.%i.log</fileNamePattern>
              <minIndex>1</minIndex>
              <maxIndex>999999</maxIndex>
        </rollingPolicy>
        <!-- the application will search out this appender by name and manually rotate it at the beginning of each conformance run.
                this triggering policy is necessary to allow logback to append to a log without knowing how to rotate it. -->
        <triggeringPolicy class="gov.gsa.pivconformancegui.ManualTriggeringPolicy" />
        <encoder>
            <pattern>%date %level [%thread] %logger{10} [%file:%line] %msg%n</pattern>
        </encoder>
    </appender>

    <!-- this is fully optional and probably only desirable during development -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%msg%n</pattern>
        </encoder>
    </appender>

    <!-- this is an especially noisy log facility and therefore a good example of how to quash log output that isn't wanted while allowing other
            messages to go through the logging apparatus -->
    <logger name="gov.gsa.pivconformance.card.client.X509CertificateDataObject.TLVParser" level="OFF"/>

    <root level="info">
        <appender-ref ref="FILE" />
        <appender-ref ref="STDOUT" />
    </root>

    <!-- split test progress to its own appender -->
    <logger name="gov.gsa.pivconformance.testProgress">
        <appender-ref ref="TESTLOG" />
    </logger>

    <!-- split test results into a CSV -->
    <logger name="gov.gsa.pivconformance.testResults">
        <appender-ref ref="CONFORMANCELOG" />
    </logger>

    <!-- APDUs into a separate log -->
    <logger name="gov.gsa.pivconformance.apdu">
        <appender-ref ref="APDULOG" />
    </logger>

</configuration>
