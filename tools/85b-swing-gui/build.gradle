// set up junit 5 support for gradle
buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'application'
    id 'org.ajoberstar.grgit' version '2.1.0'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
}

java {
    modularity.inferModulePath.set(true)
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'eclipse'

repositories {
    jcenter()
    maven { url 'https://repository.apache.org/snapshots' }
    flatDir {
        dirs '../../cardlib/build/libs', '../../libs'
    }
}

def getVersion = { ->
    File resourcesDir = new File(project.getProjectDir(), 'src/main/resources/gov/gsa/pivconformance/utils')
    File versionFile = new File(resourcesDir, 'build.version')
    if(!versionFile.exists()) {
        resourcesDir.mkdirs()
        versionFile.createNewFile()
        println 'Initializing build.version file...'
        versionFile.text = '0.0-changeme'
    }
    String version = versionFile.text.replaceAll("[\\n\\r\\t ]", "")
}

dependencies {
    compile 'org.bouncycastle:bcprov-jdk15on:1.66'
    compile 'org.bouncycastle:bcprov-ext-jdk15on:1.66'
    compile 'org.bouncycastle:bcpkix-jdk15on:1.66'

    compile 'commons-cli:commons-cli:1.4'
    compile 'commons-codec:commons-codec:1.11'

    compile group: 'org.apache.commons', name: 'commons-csv', version: '1.6'

    compile 'com.payneteasy:ber-tlv:1.0-8'
    compile group: 'org.slf4j', name:'slf4j-api', version: '2.0.0-alpha1'
    compile group: 'ch.qos.logback', name:'logback-classic', version: '1.3.0-alpha5'
    compile group: 'ch.qos.logback', name:'logback-core', version: '1.3.0-alpha5'

    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.32.3.2'
    compile group: 'com.jgoodies', name: 'jgoodies-forms', version: '1.6.0'

    compile files('../../libs/gov.gsa.pivconformance.cardlib' + '-' + getVersion() + '.jar')
    compile files('../../libs/gov.gsa.pivconformance.conformancelib' + '-' + getVersion() + '.jar')

    compile 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    compile 'org.junit.jupiter:junit-jupiter-params:5.1.0'
    compile 'org.junit.platform:junit-platform-launcher:1.0.0'
    runtime 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    runtime 'org.junit.jupiter:junit-jupiter-params:5.1.0'

    shadow 'org.bouncycastle:bcprov-jdk15on:1.66'
    shadow 'org.bouncycastle:bcprov-ext-jdk15on:1.66'
}

sourceSets {
    main {
        java {
            if(targetCompatibility != JavaVersion.VERSION_11)
                exclude '**/module-info.java'
        }
    }
}

import org.gradle.plugins.ide.eclipse.model.AccessRule

eclipse {
    classpath {
        file {
            whenMerged {
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new AccessRule('0', 'javax/smartcardio/**'))

                def cardlib               = entries.find { it.path.contains 'cardlib' }
                cardlib.sourcePath        = fileReference(file('../../libs/' + 'gov.gsa.pivconformance.cardlib' + '-' + getVersion() + '.jar'))
                def conformancelib        = entries.find { it.path.contains 'fips' }
                conformancelib.sourcePath = fileReference(file('../../libs/gov.gsa.pivconformance.cardlib' + '-' + getVersion() + '.jar'))
            }
        }
    }
}

shadowJar {
    classifier = ''
}

// Define the main class for the application jar that will be produced
mainClassName = 'gov.gsa.pivconformance.gui.GuiRunnerApplication'

jar {
    dependsOn(shadowJar { classifier = null })
    doFirst {
        version = getVersion()
    }
    manifest {
        attributes 'Main-Class': mainClassName
    }
    doLast {
        println 'archiveName: ' + archiveName
        configurations.runtime.each { println it }
    }
}

run {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

// use junit platform for tests
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

compileJava {
    options.debugOptions.debugLevel = "source,lines,vars"
}
