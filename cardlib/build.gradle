// set up junit 5 support for gradle
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
    }
}
plugins {
    id 'java-library'
    id 'org.ajoberstar.grgit' version '2.1.0'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id "de.jjohannes.extra-java-module-info" version "0.1"
}

java {
    modularity.inferModulePath.set(true)
}

apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.junit.platform.gradle.plugin'

targetCompatibility = targetJavaVersion

logger.warn("target java version: " + targetCompatibility)
logger.warn("source java version: " + sourceCompatibility)

import org.gradle.plugins.ide.eclipse.model.AccessRule

eclipse {
    classpath {
        file {
            whenMerged {
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new AccessRule('0', 'javax/smartcardio/**'))
                def lib = entries.find { it.path.contains 'gov.gsa.pivconformance.cardlib' +  '-' + getVersion() + '.jar' }
                lib.sourcePath = fileReference(file('../tools/85b-swing-gui/lib/gov.gsa.pivconformance.cardlib-sources' + '-' + getVersion() + '.jar'))
            }
        }
    }
}

repositories {
    jcenter()
    maven { url 'https://repository.apache.org/snapshots' }
    flatDir {
        dirs '../libs'
    }
}

def getVersion = { ->
    File resourcesDir = new File(project.getProjectDir(), 'src/main/resources/gov/gsa/pivconformance/utils')
    File versionFile = new File(resourcesDir, 'build.version')
    if(!versionFile.exists()) {
        resourcesDir.mkdirs()
        versionFile.createNewFile()
        println 'Initializing build.version file'
        versionFile.text = '0.0-changeme'
    }
    String version = versionFile.text.replaceAll("[\\n\\r\\t ]", "")
}

// custom task from
// https://stackoverflow.com/questions/39444908/how-to-create-an-html-report-for-junit-5-tests
// to get readable output for passing tests
configurations {
    junitXmlToHtml
}

dependencies {
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.66'
    implementation 'org.bouncycastle:bcprov-ext-jdk15on:1.66'

    implementation 'commons-cli:commons-cli:1.4'
    implementation 'commons-codec:commons-codec:1.11'

    implementation 'com.payneteasy:ber-tlv:1.0-8'
    implementation 'org.slf4j:slf4j-api:2.0.0-alpha1'
    implementation 'ch.qos.logback:logback-classic:1.3.0-alpha5'

    implementation 'org.xerial:sqlite-jdbc:3.32.3.2'

    testCompile 'org.bouncycastle:bcprov-ext-jdk15on:1.66'
    testCompile 'org.bouncycastle:bcpkix-jdk15on:1.66'

    testCompile 'commons-cli:commons-cli:1.4'
    testCompile 'commons-codec:commons-codec:1.11'
    testCompile 'com.payneteasy:ber-tlv:1.0-8'
    testCompile 'org.slf4j:slf4j-api:2.0.0-alpha1'
    testCompile 'ch.qos.logback:logback-classic:1.3.0-alpha5'

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.7.0-RC1'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.7.0-RC1'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.7.0-RC1'
    testRuntime 'org.junit.jupiter:junit-jupiter-params:5.7.0-RC1'

    shadow 'commons-cli:commons-cli:1.4'
    shadow 'org.slf4j:slf4j-api:2.0.0-alpha1'
    shadow 'org.bouncycastle:bcprov-ext-jdk15on:1.66'
    shadow 'org.bouncycastle:bcpkix-jdk15on:1.66'

    junitXmlToHtml 'org.apache.ant:ant-junit:1.10.8'
}

// use junit platform for tests
test {
    doFirst {
        println 'test:' + getVersion()
    }
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// a place to configure junit platform plugin... not currently necessary, but it is very likely desirable
// to filter tests by tag

junitPlatform {
}

jar {
    doFirst {
        version = getVersion()
    }
    doLast {
        println 'archiveName: ' + archiveName
        configurations.runtime.each { println it }
    }
}

compileJava {
    String moduleName = "";
    if(targetCompatibility >= (String) JavaVersion.VERSION_11) {
        moduleName = 'gov.gsa.pivconformance.cardlib'
        inputs.property("moduleName", moduleName)
    }
    doFirst {
        println 'compileJava:' + getVersion()
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

compileTestJava {
    doFirst {
        println 'compileTestJava:' + getVersion()
    }
    String moduleName = "";
    if(targetCompatibility >= (String) JavaVersion.VERSION_11) {
        moduleName = 'gov.gsa.pivconformance.conformancelib.test'
        inputs.property("moduleName", moduleName)
    }
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'org.junit.jupiter.api',
                '--add-reads', "$moduleName=org.junit.jupiter.api",
                '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
        ]
        version = getVersion()	
        classpath = files()
    }
}

// get readable test reports since gradle eats the summary unless there's a failure
task generateHtmlTestReports {
    doLast {
        def reportsDir = new File(buildDir, 'test-reports')
        reportsDir.mkdirs()

        ant.taskdef(
                name: 'junitReport',
                classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
                classpath: configurations.junitXmlToHtml.asPath
        )

        ant.junitReport(todir: "$buildDir/test-results/junit-platform", tofile: "aggregated-test-results.xml") {
            fileset(dir: "$buildDir/test-results/junit-platform")
            report(format: 'frames', todir: reportsDir)
        }
    }
}

// make gradle check generate the reports
afterEvaluate {
    def junitPlatformTestTask = tasks.getByName('junitPlatformTest')
    generateHtmlTestReports.dependsOn(junitPlatformTestTask)
    check.dependsOn(generateHtmlTestReports)
}

// when producing a jar that is suitable for distribution using the shadow plugin,
// this will enbed a version properties file.
compileJava.doFirst {
    options.compilerArgs = ['--add-modules', 'java.smartcardio']
    def git = org.ajoberstar.grgit.Grgit.open(dir: "${project.rootDir}/..")
    def commit = git.head()

    def commitId = commit.abbreviatedId
    def commitDate = commit.getDate()
    def buildDate = new Date()
    File resourcesDir = new File(project.getProjectDir(), 'src/main/resources/gov/gsa/pivconformance/utils')
    File propertiesFile = new File(resourcesDir, 'version.properties')

    // The project may not have any resources, so create the directories and file
    if(!propertiesFile.exists()) {
        resourcesDir.mkdirs()
        propertiesFile.createNewFile()
        println 'Creating properties files'
    }
    Properties versionProperties = new Properties()
    versionProperties.setProperty('git.commit.time', commitDate.format('dd.MM.yy HH.mm.ss'))
    versionProperties.setProperty('build.time', buildDate.format('dd.MM.yy HH.mm.ss'))
    versionProperties.setProperty('git.commit.id', commitId)
    versionProperties.setProperty('build.version', getVersion())
    versionProperties.store(propertiesFile.newWriter(), null)
}

extraJavaModuleInfo {

    module("bcprov-ext-jdk15on-1.66.jar", "org.bouncycastle.provider.ext", "1.66") {
        exports("bcprov.ext-jdk15on")
    }
    module("bcpkix-jdk15on-1.66.jar", "org.bouncycastle.pkix", "1.66") {
        exports("bcpkix.jdk15on")
    }
    module("ber-tlv-1.0-8.jar", "com.payneteasy", "1.08") {
        exports("ber.tlv")
    }
    module("hamcrest-core-1.3.jar", "org.hamcrest", "1.3") {
        exports("hamcrest.core")
    }
    module("slf4j-api-2.0.0-alpha1.jar", "org.slf4j", "1.4") {
        exports("slf4j.api")
    }
    module("sqlite-jdbc-3.32.3.2.jar", "org.xerial", "3.32.3.2") {
        exports("sqlite.jdbc")
    }
    module("commons-cli-1.4.jar", "org.apache.commons.cli", "1.4") {
        exports("org.apache.commons.cli")
    }
    module("commons-codec-1.4.jar", "org.apache.commons.codec", "1.11") {
        exports("org.apache.commons.codec")
    }
    module("junit-4.11.jar","org.junit.jupiter", "4.11") {
        exports("junit")
    }
    module("activation-1.1.jar","javax.activation", "1.1") {
        exports("activation")
    }
    module("checker-framework-1.7.0.jar","edu.washington.cs.types.checker", "1.7.0") {
        exports("checker.framework")
    }

}

compileJava {
    options.debugOptions.debugLevel = "source,lines,vars"
}

task sourceJar(type: Jar, dependsOn: classes) {
    doFirst {
        version = getVersion()
    }
    classifier 'sources'
    from sourceSets.main.allSource
}

task copyShadowLibs(type: Copy) {
    from configurations.shadow
    into '../libs'
}

shadowJar.dependsOn copyShadowLibs

shadowJar.doFirst {
    println 'shadowJar.doFirst.archveName: ' + archiveName
}

task installSource(type: Copy) {
    dependsOn copyShadowLibs
    dependsOn sourceJar
    from sourceJar
    into '../libs' 
}

task install(type: Copy) {
    dependsOn jar
    dependsOn installSource
    from jar
    into '../libs' 
}
