// cardlib/build.gradle

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
    }
}

plugins {
    id 'java-library'
    id "org.ajoberstar.grgit" version "4.1.0"
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id 'de.jjohannes.extra-java-module-info' version '0.1'
}

java {
    modularity.inferModulePath.set(true)
}

apply plugin: 'java-library'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'de.jjohannes.extra-java-module-info'

logger.warn("target java version: " + targetCompatibility)
logger.warn("source java version: " + sourceCompatibility)

import javax.smartcardio.CardTerminal
import javax.smartcardio.TerminalFactory
import java.lang.management.ManagementFactory
import java.lang.management.RuntimeMXBean

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://repository.apache.org/snapshots' }
    flatDir {
        dirs 'build/libs','../libs'
    }
}

def getVersion = { ->
    File resourcesDir = new File(project.getProjectDir(), 'src/main/resources/')
    File versionFile = new File(resourcesDir, 'build.version')
    if(!versionFile.exists()) {
        resourcesDir.mkdirs()
        versionFile.createNewFile()
        println 'Initializing build.version file'
        versionFile.text = '0.0-changeme'
    }
    String version = versionFile.text.replaceAll("[\\n\\r\\t ]", "")
}

String killJavaPid() {
    try {
        RuntimeMXBean runtimeBean = ManagementFactory.getRuntimeMXBean()
        String name = runtimeBean.getName()
        int k = name.indexOf('@')
        if (k > 0) {
            Runtime rt = Runtime.getRuntime()
            rt.exec("taskkill /F /IM java.exe")
        }
        return name.substring(0, k)
    } catch (Exception ex) {
       System.out.println 'Couldn\'t kill java.exe'
    }
    return null
}

def deleteCardsDir = { String directory ->
    def cardsDir = new File(project.getRootDir(), directory)
    def count = 0
    while (count < 5 && cardsDir.exists()) {
        try {
            System.out.println 'Attempting to delete ' + cardsDir.getAbsolutePath()
            delete cardsDir
            System.out.println 'Deleted ' + cardsDir.getAbsolutePath()
            Thread.sleep(1000)
            count++
        } catch (Exception e) {
            System.out.println e.getMessage()
            Thread.sleep(1000)
            count++ 
        }
    }
}

def cardTerminalPresent = { ->
    boolean terminalPresent = true // default to 'true' to prevent accidents
    try {
        TerminalFactory factory = TerminalFactory.getDefault()
        List<CardTerminal> terminals = factory.terminals().list()
        if (terminals.size() == 0) {
            println '**** No smartcard readers connected1, proceeding with tests'
            terminalPresent = false
        } else {
            println '**** Cannot run JUnit tests with smartcard reader connected'
            terminalPresent = true
        }
    } catch (Exception ex) {
        println '**** No smartcard readers connected2, proceeding with tests'
        println 'Exception ' + '\n' + ex.getStackTrace()
        terminalPresent = false
    }
    return terminalPresent
}

// custom task from
// https://stackoverflow.com/questions/39444908/how-to-create-an-html-report-for-junit-5-tests
// to get readable output for passing tests
configurations {
    junitXmlToHtml
}

dependencies {
    api 'ch.qos.logback:logback-classic:1.3.0-alpha5'
    api 'ch.qos.logback:logback-core:1.3.0-alpha5'
    api 'com.payneteasy:ber-tlv:1.0-11'
    api 'com.sun.mail:javax.mail:1.6.2'
    api 'commons-cli:commons-cli:1.4'
    api 'commons-codec:commons-codec:1.15'
    api 'edu.washington.cs.types.checker:checker-framework:1.7.0'
    api 'javax.activation:activation:1.1'
    api 'org.apache.commons:commons-csv:1.8'
    api 'org.apiguardian:apiguardian-api:1.1.0'
    api 'org.bouncycastle:bcpkix-jdk15on:1.66'
    api 'org.bouncycastle:bcprov-jdk15on:1.66'
    api 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    api 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    api 'org.junit.jupiter:junit-jupiter-params:5.7.0'
    api 'org.junit.platform:junit-platform-commons:1.7.0'
    api 'org.junit.platform:junit-platform-engine:1.7.0'
    api 'org.opentest4j:opentest4j:1.2.0'
    api 'org.slf4j:slf4j-api:2.0.0-alpha1'
    api 'org.xerial:sqlite-jdbc:3.32.3.2'
    junitXmlToHtml 'org.apache.ant:ant-junit:1.10.8'
}

test {
    if (cardTerminalPresent() == false) {
        deleteCardsDir('build/classes/java/test/gov/gsa/pivconformance/cardlib/test/gsa-icam-card-builder')
        // Exclude tests that require a PIN
        useJUnitPlatform {
            excludeTags 'PIN'
        }
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

// a place to configure junit platform plugin... not currently necessary, but it is very likely desirable
// to filter tests by tag

junitPlatformTest {
    doFirst {
        println 'Cloning, please wait...'
        File cardsDir = new File(project.getRootDir(), 'build/classes/java/test/gov/gsa/pivconformance/cardlib/test/gsa-icam-card-builder')
        if (!cardsDir.exists()) {
            def grgit = org.ajoberstar.grgit.Grgit.clone(dir: cardsDir, uri: 'https://github.com/GSA/gsa-icam-card-builder', checkout: true, refToCheckout: 'master')
            if (grgit != null) {
                grgit.describe()
                System.out.println 'Cloned ' + cardsDir.getName()
            } else {
                System.out.println 'Couldn\'t clone gsa-icam-card-builder'
            }
        } else {
            System.out.println cardsDir.getName() + ' exists, reusing'
        }
    }
}

jar {
    doFirst {
        version = getVersion()
    }
    manifest {
        attributes(
            'Manifest-Version': getVersion(),
            'Created-By': 'General Services Administration',
            'Automatic-Module-Name': 'gov.gsa.pivconformance.cardlib',
            'Multi-Release': 'false',
            'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
            'Implementation-Title': 'gov.gsa.pivconformance.cardlib',
            'Implementation-Version': getVersion(),
            'Implementation-Vendor': 'General Services Administration',
            'Bundle-ManifestVersion' : '1',
            'Bundle-SymbolicName': 'gov.gsa.pivconformance.cardlib',
            'Bundle-Name': 'gov.gsa.pivconformance.cardlib',
            'Bundle-Vendor': 'gov.gsa',
            'Bundle-RequiredExecutionEnvironment': 'JavaSE-11',
            'Export-Package':'gov.gsa.pivconformance.cardlib;version=' + getVersion() + ', gov.gsa.pivconformance.cardlib.card.client;version=' + getVersion() + ', gov.gsa.pivconformance.cardlib.tlv;version=' + getVersion() + ', gov.gsa.pivconformance.cardlib.tools;version=' + getVersion() + ', gov.gsa.pivconformance.cardlib.utils;version=' + getVersion() + ', gov.gsa.pivconformance.cardlib.utilities;version=' + getVersion(),
            'Import-Package': '*',
            'Specification-Title': 'gov.gsa.pivconformance.cardlib',
            'Specification-Version': getVersion(),
            'Specification-Vendor': 'General Services Administration',
            'Sealed': 'false'
        )
     }
    doLast {
        configurations.runtime.each { println it }
    }
}

compileJava {
    doFirst {
        version = getVersion()    

        def dir = "${project.rootDir}/../"
        def git = org.ajoberstar.grgit.Grgit.open(dir: dir)
        def commit = git.head()

        def commitId = commit.abbreviatedId
        def commitDate = commit.getDate()
        def buildDate = new Date()
        File resourcesDir = new File(project.getProjectDir(), 'src/main/resources/')
        File propertiesFile = new File(resourcesDir, 'version.properties')

        // The project may not have any resources, so create the directories and file
        if(!propertiesFile.exists()) {
            resourcesDir.mkdirs()
            propertiesFile.createNewFile()
            println 'Creating properties files'
        }
        Properties versionProperties = new Properties()
        versionProperties.setProperty('git.commit.time', commitDate.format('dd.MM.yy HH.mm.ss'))
        versionProperties.setProperty('build.time', buildDate.format('dd.MM.yy HH.mm.ss'))
        versionProperties.setProperty('git.commit.id', commitId.toString())
        versionProperties.setProperty('build.version', getVersion())
        versionProperties.store(propertiesFile.newWriter(), null)

        def moduleName = 'gov.gsa.pivconformance.cardlib'
        options.debugOptions.debugLevel = "source,lines,vars"
        if(JavaVersion.current().isJava9Compatible()) {
            options.compilerArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'java.smartcardio',
                    '--add-modules', 'org.junit.jupiter.api',
                    '--add-modules', 'org.slf4j'
            ]
        }
        version = getVersion()
        List<String> argumentList = options.getAllCompilerArgs()
        println 'Compiler args:'
        argumentList.each { println '  [' + it +']' }
        classpath = files()
    }
}

compileTestJava {
    doFirst {
        def moduleName = 'gov.gsa.pivconformance.cardlib.test'
        options.debugOptions.debugLevel = "source,lines,vars"
        if(JavaVersion.current().isJava9Compatible()) {
            options.compilerArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'java.smartcardio',
                    '--add-modules', 'org.junit.jupiter.api',
                    '--add-modules', 'org.slf4j',
                    '--add-reads', "$moduleName=gov.gsa.pivconformance.cardlib"
            ]
        }
        version = getVersion()
        List<String> argumentList = options.getAllCompilerArgs()
        println 'Compiler args:'
        argumentList.each { println '  [' + it +']' }
        classpath = files()
    }
}

// get readable test reports since gradle eats the summary unless there's a failure
task generateHtmlTestReports {
    doLast {
        def reportsDir = new File(buildDir, 'test-reports')
        reportsDir.mkdirs()

        ant.taskdef(
            name: 'junitReport',
            classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
            classpath: configurations.junitXmlToHtml.asPath
        )

        ant.junitReport(todir: "$buildDir/test-results/junit-platform", tofile: "aggregated-test-results.xml") {
            fileset(dir: "$buildDir/test-results/junit-platform")
            report(format: 'frames', todir: reportsDir)
        }
    }
}

// make gradle check generate the reports
afterEvaluate {
    def junitPlatformTestTask = tasks.getByName('junitPlatformTest')
    generateHtmlTestReports.dependsOn(junitPlatformTestTask)
    if (junitPlatformTest.getEnabled() == true)
        check.dependsOn(generateHtmlTestReports)
}

extraJavaModuleInfo {
    module("ber-tlv-1.0-11.jar", "com.payneteasy", "1.0-11") {
        exports("ber.tlv")
    }
    module("hamcrest-core-1.3.jar", "org.hamcrest", "1.3") {
        exports("hamcrest.core")
    }
    module("sqlite-jdbc-3.32.3.2.jar", "org.xerial", "3.32.3.2") {
        exports("sqlite.jdbc")
    }
    module("commons-cli-1.4.jar", "org.apache.commons.cli", "1.4") {
        exports("org.apache.commons.cli")
    }
    module("commons-codec-1.15.jar", "org.apache.commons.codec", "1.15") {
        exports("org.apache.commons.codec.binary")
        exports("org.apache.commons.codec")
    }
    module("commons-csv-1.8.jar", "org.apache.commons.csv", "1.8") {
        exports("org.apache.commons.csv")
    }
    automaticModule("sqlite-jdbc-3.32.3.2.jar", "org.xerial")
    automaticModule("activation-1.1.jar", "javax.activation")
    automaticModule("checker-framework-1.7.0.jar", "edu.washington.cs.types.checker")
    automaticModule("ibatis-core-3.0.jar", "org.apache.ibatis")
}

shadowJar.doFirst {
    version = getVersion()
    dependencies { sourceJar }
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task copyShadowLibs(type: Copy) {
    from configurations.shadow
    into '../libs'
}

task installSource(type: Copy) {
    dependsOn copyShadowLibs
    dependsOn sourceJar
    from sourceJar
    into '../libs' 
}

task install(type: Copy) {
    version = getVersion()
    dependsOn jar
    from jar
    into '../libs' 
}
