// cardlib/build.gradle

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
    }
}

plugins {
    id 'java-library'
    id 'org.ajoberstar.grgit' version '2.1.0'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id 'de.jjohannes.extra-java-module-info' version '0.1'
}

java {
    modularity.inferModulePath.set(true)
}

apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'de.jjohannes.extra-java-module-info'

targetCompatibility = targetJavaVersion

logger.warn("target java version: " + targetCompatibility)
logger.warn("source java version: " + sourceCompatibility)

import org.gradle.plugins.ide.eclipse.model.AccessRule
import org.ajoberstar.grgit.Grgit

eclipse {
    classpath {
        file {
            whenMerged {
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new AccessRule('0', 'javax/smartcardio/**'))
                //def lib = entries.find { it.path.contains 'gov.gsa.pivconformance.cardlib' +  '-' + getVersion() + '.jar' }
                //lib.sourcePath = fileReference(file('../tools/85b-swing-gui/lib/gov.gsa.pivconformance.cardlib-sources' + '-' + getVersion() + '.jar'))
            }
        }
    }
}

repositories {
    jcenter()
    maven { url 'https://repository.apache.org/snapshots' }
    flatDir {
        dirs '../libs'
    }
}

def getVersion = { ->
    File resourcesDir = new File(project.getProjectDir(), 'src/main/resources/')
    File versionFile = new File(resourcesDir, 'build.version')
    if(!versionFile.exists()) {
        resourcesDir.mkdirs()
        versionFile.createNewFile()
        println 'Initializing build.version file'
        versionFile.text = '0.0-changeme'
    }
    String version = versionFile.text.replaceAll("[\\n\\r\\t ]", "")
}

// custom task from
// https://stackoverflow.com/questions/39444908/how-to-create-an-html-report-for-junit-5-tests
// to get readable output for passing tests
configurations {
    junitXmlToHtml
}

dependencies {
/*
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.66'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.66'
    implementation 'commons-cli:commons-cli:1.4'
    implementation 'org.apache.commons:commons-csv:1.8'
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'com.payneteasy:ber-tlv:1.0-11'
    implementation 'org.slf4j:slf4j-api:2.0.0-alpha1'
    implementation 'ch.qos.logback:logback-classic:1.3.0-alpha5'
    implementation 'ch.qos.logback:logback-core:1.3.0-alpha5'
    implementation 'org.xerial:sqlite-jdbc:3.32.3.2'
*/
    implementation 'ch.qos.logback:logback-classic:1.3.0-alpha5'
    implementation 'ch.qos.logback:logback-core:1.3.0-alpha5'
    implementation 'com.payneteasy:ber-tlv:1.0-11'
    implementation 'com.sun.mail:javax.mail:1.6.2'
    implementation 'commons-cli:commons-cli:1.4'
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'edu.washington.cs.types.checker:checker-framework:1.7.0'
    implementation 'javax.activation:activation:1.1'
    implementation 'org.apache.commons:commons-csv:1.8'
    implementation 'org.apiguardian:apiguardian-api:1.1.0'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.66'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.66'
    implementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    implementation 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    implementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'
    implementation 'org.junit.platform:junit-platform-commons:1.7.0'
    implementation 'org.junit.platform:junit-platform-engine:1.7.0'
    //implementation 'org.junit:junit-bom:5.7.0'
    implementation 'org.opentest4j:opentest4j:1.2.0'
    implementation 'org.slf4j:slf4j-api:2.0.0-alpha1'
    implementation 'org.xerial:sqlite-jdbc:3.32.3.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'

    runtime 'ch.qos.logback:logback-classic:1.3.0-alpha5'
    runtime 'ch.qos.logback:logback-core:1.3.0-alpha5'
    runtime 'com.payneteasy:ber-tlv:1.0-11'
    runtime 'com.sun.mail:javax.mail:1.6.2'
    runtime 'commons-cli:commons-cli:1.4'
    runtime 'commons-codec:commons-codec:1.15'
    runtime 'edu.washington.cs.types.checker:checker-framework:1.7.0'
    runtime 'javax.activation:activation:1.1'
    runtime 'org.apache.commons:commons-csv:1.8'
    runtime 'org.apiguardian:apiguardian-api:1.1.0'
    runtime 'org.bouncycastle:bcpkix-jdk15on:1.66'
    runtime 'org.bouncycastle:bcprov-jdk15on:1.66'
    runtime 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    runtime 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    runtime 'org.junit.jupiter:junit-jupiter-params:5.7.0'
    runtime 'org.junit.platform:junit-platform-commons:1.7.0'
    runtime 'org.junit.platform:junit-platform-engine:1.7.0'
    //runtime 'org.junit:junit-bom:5.7.0'
    runtime 'org.opentest4j:opentest4j:1.2.0'
    runtime 'org.slf4j:slf4j-api:2.0.0-alpha1'
    runtime 'org.xerial:sqlite-jdbc:3.32.3.2'

    shadow 'org.bouncycastle:bcpkix-jdk15on:1.66'
    shadow 'org.bouncycastle:bcprov-jdk15on:1.66'
    shadow 'commons-cli:commons-cli:1.4'
    shadow 'org.apache.commons:commons-csv:1.8'
    shadow 'commons-codec:commons-codec:1.15'
    shadow 'org.slf4j:slf4j-api:2.0.0-alpha1'
    shadow 'ch.qos.logback:logback-classic:1.3.0-alpha5'
    shadow 'com.payneteasy:ber-tlv:1.0-11'
    shadow 'org.xerial:sqlite-jdbc:3.32.3.2'

    junitXmlToHtml 'org.apache.ant:ant-junit:1.10.8'
}

task copyLogConfig(type: Copy) {
    from file('../tools/85b-swing-gui/src/main/resources/user_log_config.xml')
    into projectDir
}

// use junit platform for tests
test {
    dependsOn(copyLogConfig)
    doFirst {
        println 'test:' + getVersion()
        File cardsDir = new File(project.getRootDir(), 'build/classes/java/test/gov/gsa/pivconformance/cardlib/test/gsa-icam-card-builder')
        if (cardsDir.exists()) {
            delete cardsDir
        }
        def grgit = org.ajoberstar.grgit.Grgit.clone(dir: cardsDir, uri: 'https://github.com/GSA/gsa-icam-card-builder', checkout: true, refToCheckout: 'master')
    grgit.describe()
    }
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    doLast {
        delete 'build/classes/java/test/gov/pivconformance/cardlib/test/gsa-icam-card-builder'
    }
}

// a place to configure junit platform plugin... not currently necessary, but it is very likely desirable
// to filter tests by tag

junitPlatform {
}

jar {
    doFirst {
        version = getVersion()
    }
    manifest {
         attributes(
 		'Manifest-Version': getVersion(),
 		'Created-By': 'General Services Administration',
 		'Automatic-Module-Name': 'gov.gsa.pivconformance.cardlib',
 		'Multi-Release': 'false',
 		'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
 		'Implementation-Title': 'gov.gsa.pivconformance.cardlib',
 		'Implementation-Version': getVersion(),
 		'Implementation-Vendor': 'General Services Administration',
 		'Bundle-ManifestVersion' : '2',
 		'Bundle-SymbolicName': 'gov.gsa.pivconformance.cardlib',
 		'Bundle-Name': 'gov.gsa.pivconformance.cardlib',
 		'Bundle-Vendor': 'gov.gsa',
 		'Bundle-RequiredExecutionEnvironment': 'JavaSE-11',
 		'Export-Package': 'gov.gsa.pivconformance.cardlib;version=0.2.2-beta,gov.gsa.pivconformance.cardlib.tlv;version=0.2.2-beta,gov.gsa.pivconformance.cardlib.card;version=0.2.2-beta, gov.gsa.pivconformance.cardlib.card.client;version=0.2.2-beta,gov.gsa.pivconformance.cardlib.tools;version=0.2.2-beta,gov.gsa.pivconformance.cardlib.utils;version=0.2.2-beta,gov.gsa.pivconformance.cardlib.test;version=0.2.2-beta',
 		'Import-Package': '*',
 		'Specification-Title': 'gov.gsa.pivconformance.cardlib',
 		'Specification-Version': '0.2.2-beta',
 		'Specification-Vendor': 'General Services Administration',
 		'Sealed': 'false'
         )
     }
    doLast {
        println 'archiveName: ' + archiveName
        configurations.runtime.each { println it }
    }
}

compileJava {
    doFirst {
        println 'compileJava:' + getVersion()
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
    String moduleName = "";
    if(targetCompatibility >= (String) JavaVersion.VERSION_11) {
        moduleName = 'gov.gsa.pivconformance.cardlib'
        inputs.property("moduleName", moduleName)
    }
}

compileTestJava {
    doFirst {
        if(targetCompatibility >= (String) JavaVersion.VERSION_11) {
            String moduleName = 'gov.gsa.pivconformance.cardlib.test'
            options.compilerArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'org.junit.jupiter.api',
                    '--add-reads', "$moduleName=org.junit.jupiter.api",
                    '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
            ]
        }
        version = getVersion()	
        classpath = files()
    }
}

// get readable test reports since gradle eats the summary unless there's a failure
task generateHtmlTestReports {
    doLast {
        def reportsDir = new File(buildDir, 'test-reports')
        reportsDir.mkdirs()

        ant.taskdef(
            name: 'junitReport',
            classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
            classpath: configurations.junitXmlToHtml.asPath
        )

        ant.junitReport(todir: "$buildDir/test-results/junit-platform", tofile: "aggregated-test-results.xml") {
            fileset(dir: "$buildDir/test-results/junit-platform")
            report(format: 'frames', todir: reportsDir)
        }
    }
}

// make gradle check generate the reports
afterEvaluate {
    def junitPlatformTestTask = tasks.getByName('junitPlatformTest')
    generateHtmlTestReports.dependsOn(junitPlatformTestTask)
    check.dependsOn(generateHtmlTestReports)
}

// when producing a jar that is suitable for distribution using the shadow plugin,
// this will embed a version properties file.
compileJava.doFirst {
    options.compilerArgs = ['--add-modules', 'java.smartcardio']
    def dir = "${project.rootDir}/../"
    println '**** DIR: ' + dir
    def git = org.ajoberstar.grgit.Grgit.open(dir: dir)
    def commit = git.head()

    def commitId = commit.abbreviatedId
    def commitDate = commit.getDate()
    def buildDate = new Date()
    File resourcesDir = new File(project.getProjectDir(), 'src/main/resources/')
    File propertiesFile = new File(resourcesDir, 'version.properties')

    // The project may not have any resources, so create the directories and file
    if(!propertiesFile.exists()) {
        resourcesDir.mkdirs()
        propertiesFile.createNewFile()
        println 'Creating properties files'
    }
    Properties versionProperties = new Properties()
    versionProperties.setProperty('git.commit.time', commitDate.format('dd.MM.yy HH.mm.ss'))
    versionProperties.setProperty('build.time', buildDate.format('dd.MM.yy HH.mm.ss'))
    versionProperties.setProperty('git.commit.id', commitId)
    versionProperties.setProperty('build.version', getVersion())
    versionProperties.store(propertiesFile.newWriter(), null)

}

extraJavaModuleInfo {
    module("ber-tlv-1.0-11.jar", "com.payneteasy", "1.0-11") {
        exports("ber.tlv")
    }
    module("hamcrest-core-1.3.jar", "org.hamcrest", "1.3") {
        exports("hamcrest.core")
    }
    module("slf4j-api-2.0.0-alpha1.jar", "org.slf4j", "1.4") {
        exports("slf4j.api")
    }
    module("sqlite-jdbc-3.32.3.2.jar", "org.xerial", "3.32.3.2") {
        exports("sqlite.jdbc")
    }
    module("commons-cli-1.4.jar", "org.apache.commons.cli", "1.4") {
        exports("org.apache.commons.cli")
    }
    module("commons-codec-1.15.jar", "org.apache.commons.codec", "1.15") {
        exports("org.apache.commons.codec.binary")
        exports("org.apache.commons.codec")
    }
    module("commons-csv-1.8.jar", "org.apache.commons.csv", "1.8") {
        exports("org.apache.commons.csv")
    }
    automaticModule("bcpkix-jdk15on-1.66.jar","org.bouncycastle.pkix")
    automaticModule("bcprov-jdk15on-1.66.jar","org.bouncycastle.provider")
    automaticModule("sqlite-jdbc-3.32.3.2.jar","org.xerial")
    automaticModule("activation-1.1.jar","javax.activation")
    automaticModule("checker-framework-1.7.0.jar","edu.washington.cs.types.checker")
    automaticModule("ibatis-core-3.0.jar", "org.apache.ibatis")
}

compileJava {
    options.debugOptions.debugLevel = "source,lines,vars"
}

task sourceJar(type: Jar, dependsOn: classes) {
    version = getVersion()
    classifier 'sources'
    from sourceSets.main.allSource
}

task copyShadowLibs(type: Copy) {
    from configurations.shadow
    into '../libs'
}

task installSource(type: Copy) {
    version = getVersion()
    dependsOn copyShadowLibs
    dependsOn sourceJar
    from sourceJar
    into '../libs' 
}

task install(type: Copy) {
    version = getVersion()
    dependsOn jar
    //dependsOn shadowJar
    from jar
    into '../libs' 
}
